var tipuesearch = {
  "pages": [
    {
      "title": "Client Owned IP",
      "text": "---title: Client Owned IP---Special Watson Group projects where a client will retain the IP (as opposed to IBM) at the completion of the project are now allowed on github.ibm.com when the following rules are followed.The rules...- All code repositories for the special project are private (to prevent Client IP leaking to IBM and prevent IBM IP leaking into the repo)- Access is strictly controlled to the direct members of the special project- The README for all code repositories contains the following:    > \`\`\`    > PLEASE NOTE    >    > IBM will NOT retain the IP contained in this repository after this project completes.    >    > This repository must remain private and access to this repository is strictly limited to those IBMers directly working on this project.    >    > IBMers with access to this project are forbidden from copying/pasting IBM IP into this project and copying IP from this project into other projects.    > \`\`\`- Members of the special project watch the following 3 minute video",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/client-owned-ip/",
    },
    {
      "title": "Thank you!",
      "text": "---title: Thank you!---Thank you for your feedback, we really appreciate it! Well bring you back to the homepage now...",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/nps/",
    },
    {
      "title": "Get Support",
      "text": "---title: Get Support---Who you gonna call?",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/support/",
    },
    {
      "title": "FAQ",
      "text": "---title: FAQweight: 3breadcrumb: FAQ---FAQ Coming Soon!",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/about/faq/",
    },
    {
      "title": "About us...",
      "text": "---title: About us...weight: 1breadcrumb: About---The Watson Health Playbook is your starting point for anything related to the definition, design, development, and support of Watson Health products.The Watson Health Playbook is a fork of the original [Watson Playbook](https://pages.github.ibm.com/the-playbook/){:target=_blank}, which was produced by [Watsons GTD Squad](https://pages.github.ibm.com/the-playbook/about/index/){:target=_blank}.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/about/index/",
    },
    {
      "title": "How to navigate...",
      "text": "---title: How to navigate...weight: 1breadcrumb: Navigation---The following videos give basic navigation guidance and expand upon various usage scenarios.## Basic Playbook Navigation  ## Example Usage Scenarios### Offering Manager  ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/about/nav/",
    },
    {
      "title": "WH Compliance Trainingsidebar: compliance-trainbreadcrumb: Compliance Training",
      "text": "---title: WH Compliance Trainingsidebar: compliance-trainbreadcrumb: Compliance Training---## Watson Health Compliance Training_NEED OVERVIEW TEXT_The [Watson Health Compliance Training Wiki](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/W6a642739bb36_44d9_90cd_f2ec86efebbe/page/Training%20%26%20Document%20Control){:target=_blank} is the primary source of compliance training for Watson Health.### HIPAA Training### GDPR Training... More ...",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/compliance-training/",
    },
    {
      "title": "Watson Health Compliancesidebar: compliancebreadcrumb: Compliance Home",
      "text": "---title: Watson Health Compliancesidebar: compliancebreadcrumb: Compliance Home---## How To - Compliance{% include banners-3-col-with-images.html    b1_title=Market Opportunity & Approach    b1_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/design-guide-black.png    b1_button=Learn More    b1_link=/compliance/market-opportunity/    b2_title=Define & Prove    b2_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/tribe.png    b2_button=Learn More    b2_link=/compliance/define-and-prove/    b3_title=Build & Deliver    b3_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/map-128.svg    b3_button=Learn More    b3_link=/compliance/build-and-deliver/%}{% include banners-1-col-left-with-images.html    b1_title=Sense & Respond    b1_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/hills_24.svg    b1_button=Learn More    b1_link=/compliance/sense-and-respond/%}## Supporting Processes{% include banners-2-col-with-images.html    b1_title=WH Compliance Training    b1_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/map-128.svg    b1_button=Learn More    b1_link=/compliance/compliance-training/    b2_title=QMS Overview    b2_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/who-we-are.svg    b2_img_size=26px    b2_button=Learn More    b2_link=/compliance/qms-overview/index/%}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/index/",
    },
    {
      "title": "Regulatory Considerationssidebar: compliancebreadcrumb: Regulatory",
      "text": "---title: Regulatory Considerationssidebar: compliancebreadcrumb: Regulatory---## DefinitionsGxP means good anything practices. In the pharmaceutical industry, this term is typically used to indicate that a company follows good manufacturing practices, good clinical practices, and/or good documentation practices. Good manufacturing practices can be achieved through ISO 9001 compliance, and typically good clinical practices and good documentation practices infers that records are maintained in an FDA 21 CFR Part 11 compliant manner (or EU equivalent Annex 11), with controlled procedures for records storage and electronic signatures implemented in tooling.ISO 9001 is a Quality Management System standard, for all types of general consumer products. In order for a service to be fully ISO 9001 compliant, they would need to develop the service under a certified ISO 9001 Quality Management System, such as the Merge eClinical QMS.ISO 13485 is a Quality Management System standard, specifically for medical device manufacturers. ISO 13485 is a specialized version of ISO 9001 which has stricter quality and documentation requirements. In order for a service to be fully ISO 13485 compliant, they would need to develop the service under a certified ISO 13485 Quality Management System, such as the Merge (WHI) QMS or the core WH QMS.21 CFR 820 is the FDA regulation that governs the design, development, and distribution of medical devices in the United States.21 CFR Part 11 is the FDA regulation that governs good documentation practices for electronic records and electronic signatures in clinical products in the United States.MDD 93/42/EEC is the Medical Device Directive that governs the design, development, and distribution of medical devices in Europe.ISO 14971 is an international standard for medical device risk management.IEC 62304 is an international standard for medical device software development.Today, there are 3 Quality Management Systems running at Watson Health1. WH core QMS (certified to ISO 13485, enables compliance with 21 CFR Part 11, 21 CFR 820, MDD 93/42/EEC, ISO 14971)2. Merge Healthcare (Watson Health Imaging) QMS (certified to ISO 13485, enables compliance with 21 CFR Part 11, 21 CFR 820, MDD 93/42/EEC, ISO 14971, IEC 62304, and medical device regulations of several other countries including Canada)3. Merge eClinical QMS (certified to ISO 9001, enables compliance with 21 CFR Part 11)## ConsiderationsAs Common Services are being developed, there are Regulatory considerations that play a critical role, especially if the services needs to be used by a regulated offering.ISO 9001 compliance is critical for general quality, however all services need to follow standards to comply with security, privacy, and data governance regulations.If a regulated offering wants to use a service, the two basic requirements are:1. There needs to be documented requirements and design for the service. If the service team doesnt provide that documentation, the regulated offering team is going to have to do very extensive reverse engineering to figure out the requirements and design so that they can adequately test it.2. And around Change Management, the regulated offering team needs a period of time to adequately test the service in a non production environment before they can release it out to prod.Example - someone is going to develop a service that is specifically for electronic signatures and they know the intended users are regulated offerings. That service team should do all the necessary regulatory documentation (beyond ISO considerations) so that it can be re-used. Otherwise many regulated offering teams are going to do the same retroactive documentation and testing over and over and waste time/resources.A bigger concern would be around legacy services that dont have the basic documentation in place - regulated offering teams could not use those.## ISO 9001 ComplianceFor those service teams that are interested in building under a certified ISO 9001 QMS (once the organization has determined that ISO 9001 certification is a business need for common services), the following steps/actions will help prepare the team for the best practices that will need to be followed and will minimize the amount of retroactive documentation needed.1. Perform GxP assessment2. Document Requirements (hills/epic/stories), System Architecture & Security Architecture3. Develop - Iterate     Refine requirements and architecture (system & security)     Design / Configuration (Secure by Design)     Code / Test Automation     Evidence of code review & meeting code standards     Updates to design/config4. Test     Test Plan (if applicable)     Testing - evidence of meeting requirements, user needs, and security policy     User guides     Instructions/tooling & test for installation/consumption5. Document testing     Summary of testing - outstanding defects, NFRs not met, etc.     Final Build Standard     Release memo & Release notes6. After Release     Collect NPS (ISO 9001:2015 has focus on customer satisfaction)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/regulatory-considerations/",
    },
    {
      "title": "Compliance Guildsidebar: compliancebreadcrumb: TBD",
      "text": "---title: Compliance Guildsidebar: compliancebreadcrumb: TBD---",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/tbd/",
    },
    {
      "title": "Final Validation of Information Governance Catalogsidebar: compliance-badbreadcrumb: Information Governance Catalog",
      "text": "---title: Final Validation of Information Governance Catalogsidebar: compliance-badbreadcrumb: Information Governance Catalog---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/build-and-deliver/final-validate-information-gov-catalog/",
    },
    {
      "title": "GDPR Evidence Closuresidebar: compliance-badbreadcrumb: GDPR Evidence Closure",
      "text": "---title: GDPR Evidence Closuresidebar: compliance-badbreadcrumb: GDPR Evidence Closure---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/build-and-deliver/gdpr-evidence-closure/",
    },
    {
      "title": "HIPAA Evidence Closuresidebar: compliance-badbreadcrumb: HIPAA Evidence Closure",
      "text": "---title: HIPAA Evidence Closuresidebar: compliance-badbreadcrumb: HIPAA Evidence Closure---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/build-and-deliver/hipaa-evidence-closure/",
    },
    {
      "title": "Build and Deliversidebar: compliance-badbreadcrumb: Build and Deliver Tasks (Compliance)",
      "text": "---title: Build and Deliversidebar: compliance-badbreadcrumb: Build and Deliver Tasks (Compliance)---# DRAFT (Coming Soon!)Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Build and Deliver phase tasks relevant to Compliance_- _Hover OVER the task to see who OWNS the task_- _Tasks marked with a GxP Only label can be skipped for non-regulated offerings_- _Tasks marked with a CS Only label can be skipped for offerings that are NOT common services_                  svg {          background-image: url(https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/flows/vs-build-and-deliver-comp.jpg);          background-size: 100% 100%;          background-repeat: no-repeat;          max-width: 900px;          width: 90%;        }        path {          fill: transparent;          cursor: pointer;          transition: fill 0.2s;        }        svg a:focus,        svg a:hover {          outline: none;        }        svg a:focus path,        svg a:hover path {          fill: rgba(255,255,0, 0.15);          cursor: pointer;       }                            OWNER: Project Manager - Initialize New Analytics Project Charter                                    OWNER: Project Manager - Create Risk Management Plan                                    OWNER: Offering Manager - Submit list of suppliers                                    OWNER: Tools Team - Submit list of tools                                    OWNER: Dev Lead - Start Contribution Package                                    OWNER: Architect - User Requirements Specification                                    OWNER: Offering Manager - Project Kick-Off                                                          OWNER: Offering Manager - See Begin Monthly Reviews                                    OWNER: Architect - WHCT CoC Team Review                                    OWNER: Dev Lead - Confirm SPRB Review Completed                                    OWNER: Dev Lead - CDT ORB Review                                    OWNER: Operations - Create or Provision CDT Environment                                    OWNER: Architect - Design Input Detailed Requirements                                    OWNER: Project Manager - Approve Design Input                                    OWNER: Architect - Send HL-SL-DL to Dev                                    OWNER: Architect - Document System Architecture Specification                                    OWNER: Project Manager - Start Recording Risk Analysis                                    OWNER: Architect - Planning Requirements Design Review                                    OWNER: Test Lead - Document Verification and Validation Plan                                    OWNER Dev Lead - Create-Groom Stories (Define Design Output)                                    OWNER: Dev Lead - Implement Stories                                    OWNER: Architect - Review and Approve Design Output                                    OWNER: Test Lead - Testing                                    OWNER: Dev Lead - Code Reviews                                    OWNER: Security Lead - Complete Secure Engineering Virus Scans (Code Scans)                                    OWNER: Architect - Database Reviews                                    OWNER: Architect - Architecture Reviews                                    OWNER: Test Lead - Document and Approve Validation Build Standard                                    OWNER: Operations - Install Build to Formal V&V                                    OWNER: Test Lead - Review and Approval of Install Verification Protocol Execution Records                                    OWNER: Test Lead - Document and Approve Pre-Execution V&V Test Protocols                                    OWNER: Test Lead - V&V Readiness Design Review                                    OWNER: Test Lead - V&V Test Execution                                    OWNER: Test Lead - Review and Approve V&V Test Protocol Execution Records                                    OWNER: Test Lead - Document V&V Summary Report                                    OWNER: Dev Lead - Analytics and Informatics Impact Analysis                                    OWNER: Project Manager - Analytics and Informatics Impact Analysis Action Plan                                    OWNER: Architect - AC Review of Contribution Package                                    OWNER: Project Manager - AC Review Action Plan                                    OWNER: Dev Lead - Staging ORB Review                                    OWNER: Operations - Promote Offering to Staging                                    OWNER: Dev Lead - Demo to Sponsors                                    OWNER: Project Manager - Lessons Learned Retrospective                                    OWNER: Security Lead - Complete Secure Engineering Virus Scans (Staging Environment)                                    OWNER: Dev Lead - Release Readiness Review                                    OWNER: Test Lead - Integration Testing                                    OWNER: Operations - External Penetration Testing on Staging                                    OWNER: Security Lead - Gather SecOps Evidence                                    OWNER: Security Lead - Final Health Check Vulnerability Scans                                    OWNER: Dev Lead - Support Training (L1 L2 L3)                                    OWNER: Architect - IBM Cloud Framework Review                                    OWNER: Compliance - HIPAA Evidence Closure                                    OWNER: Compliance - GDPR Evidence Closure                                    OWNER: Compliance - Final Validate Information Gov Catalog                                    OWNER: Dev Lead - Analytics and Informatics Initiate Methodology Guide and White Paper                                    OWNER: Compliance - PSRA Evidence Closure                                    OWNER: Dev Lead - Common Services Readiness Review                                    OWNER: Operations - Operational Readiness Checkpoint                                    OWNER: Architect - Final SPRB Review                                    OWNER: Test Lead - Validate all Data Approvals Received                                    OWNER: Project Manager - Approve Risk Analysis                                    OWNER: Project Manager - Approve Risk Management Report                                    OWNER: Tools Team - Update Tools List and Versions                                    OWNER: Projet Manager - Design Transfer Design Review                                    OWNER: Project Manager - Document and Approve Production Build Standard                                    OWNER: Project Manager - Document and Approve Device Master Record                                    OWNER: Test Lead - Final Review and Approval of Install Verification Protocol Execution Records                                    OWNER: Project Manager - Document and Approve Servicing Work Instructions                                    OWNER: Project Manager - Document and Approve Device History Record                                    OWNER: Project Manager - Document and Approve Design History File                                    OWNER: Tools Team - Final Check - Ensure all tools are assessed                                    OWNER: Dev Lead - Release Readiness Design Review                                    OWNER: Project Manager - Add Client Install to Distribution Log                                    OWNER: Project Manager - Product and Document Identified Risks                                    OWNER: Project Manager - Ensure Suppliers are on Approved Suppliers List                                    OWNER: Operations - Release Stories to Production                                    OWNER: Test Lead - Execute Install Verification Tests                                    OWNER: Operations - Add to Service Catalog                                    OWNER: Operations - Refresh Catalog                                    OWNER: Offering Manager - Launch Readiness                                    OWNER: Operations - Release Stories to Customer                                                          Back to main flow                                    OWNER: Offering Manager - Discuss Portfolio                                    OWNER: Offering Manager - Prioritize Detailed Level Requirements                                    OWNER: Offering Manager - 4 week ask-commit process                    ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/build-and-deliver/index/",
    },
    {
      "title": "PSRA Evidence Closuresidebar: compliance-badbreadcrumb: PSRA Evidence Closure",
      "text": "---title: PSRA Evidence Closuresidebar: compliance-badbreadcrumb: PSRA Evidence Closure---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/build-and-deliver/psra-evidence-closure/",
    },
    {
      "title": "Appropriate GxP Level Trainingsidebar: compliance-dapbreadcrumb: GxP Training",
      "text": "---title: Appropriate GxP Level Trainingsidebar: compliance-dapbreadcrumb: GxP Training---## Appropriate GxP Training RequiredTo be able to work in WH you need to be trained on our WH Quality Management System (QMS), Good x Practices (GxP) and Health Insurance Portability and Accountability Act (HIPAA).## How do I get started?You will need to be registered in [LDS](https://lsgrcoe-csfe-1.ibmcloud.com/){:target=_blank} which is usually done at the project level. All development roles will need to be registered.For further information, please see the [Compliance Training Wiki](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/W6a642739bb36_44d9_90cd_f2ec86efebbe/page/Training%20%26%20Document%20Control){:target=_blank}### Step by step1. WH Quality Management System (QMS) and GxP training is provided through our automated Learning Development System ([LDS](https://lsgrcoe-csfe-1.ibmcloud.com/){:target=_blank}).    - To be onboarded to LDS and our Quality Document Management System (QDMS) your manager should send a note to WH Training/Cambridge/IBM that includes name, Internet address, and WH functional Group2. Instructions for taking [HIPAA training](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/W6a642739bb36_44d9_90cd_f2ec86efebbe/page/HIPAA%20Training){:target=_blank} is provided. (Note: If you require HIPAA re-approval, please be sure to allow a minimum of 3 days before your expiration date to ensure that your certificates will be available prior to your expiration date.  Additionally, please request the level of HIPAA access you need based on the resources you will be accessing.)3. Read our [Slack Education](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/W6a642739bb36_44d9_90cd_f2ec86efebbe/page/Slack%20Education){:target=_blank} guide.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/define-and-prove/appropriate-gxp-training/",
    },
    {
      "title": "Content Governance Reviewsidebar: compliance-dapbreadcrumb: Content Governance Review",
      "text": "---title: Content Governance Reviewsidebar: compliance-dapbreadcrumb: Content Governance Review---## What needs to be done here?[Leverage the ICTQ](../../../dev/market-opportunity/ictq/) and the Asset Inventory process to determine the reviews to be generated for the data content obligations (royalties, usage rights, etc.) and help facilitate if need to purchase new knowledge sets (ie not client data).The team will analyze sources of data being used / proposed to use for each offering and provide the obligations to which the offering must adhere to compliantly use the licensed data or content.You will coordinate with the Data Governance team to understand and build in any required controls or information into the IGC (Information Governance Catalog)## How do I get started?Offering Manager with Data Content Teams. Currently there are two teams at Watson Health who help review royalties / usage rights and assist in procuring data (non-client related); Jackie B. team (Lisa Miller/Schaumburg/IBM) for Truven & Explorys and Kaveh M. team for all other WH Offerings.### Step by step1. After identifying any non-client related data sets connect with Jackie (T/E) or Kaveh (all other WH) to learn usage rights, royalties, etc that offering must comply to2. If want to purchase new knowledge data – pursue thru Jackie / Kaveh team they will assist with coordination with procurement, legal, finance3. Ensure offering team understands and is abiding by these usage rights as develop offering.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/define-and-prove/content-gov-review/",
    },
    {
      "title": "Data Access Compliance Boardsidebar: compliance-dapbreadcrumb: DACB",
      "text": "---title: Data Access Compliance Boardsidebar: compliance-dapbreadcrumb: DACB---## What is the DACB?The DACB reviews requests for access to patient-level data from datasets ONLY for within its scope, such as Explorys, MarketScan, CED/LCED and Micromedex (Combined EMR Dataset and Limited Combined EMR Dataset). Team reviews allowable uses per regulations and other agreements; whether it is allowable use under IBM policies; doesn’t violate any policies or laws to bio-ethics, geography and what happens to data after an engagement (data destruction)## How do I get started?Offering Manager / application owner or team designee-  NOTE: Process is moving to an automated workflow in 2019### Step by step1.  Send an email to 2.  Fill in forms that will be sent to you.3.  DACB review & approves, or sends request for more information",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/define-and-prove/dacb/",
    },
    {
      "title": "Data Governance Reviewsidebar: compliance-dapbreadcrumb: Data Governance Review",
      "text": "---title: Data Governance Reviewsidebar: compliance-dapbreadcrumb: Data Governance Review---## What needs to be done?For Watson Health to have an enterprise listing of all data sources (assets) and data fields (dictionary) being ingested into offerings. Asset Inventory: to capture information about the sources of data used in an offering for a client (description, type, purpose, subject, PI/SPI, frequency, location, owner, provider, etc.). Obtain corresponding Data Dictionary for each source or data elements. Load into Watson Health’s Enterprise IGC (Information Governance Catalog) to facilitate regulatory reporting, researcher or data scientist the ability to search for data, Governance based on contractual usage rights.## How do I get started?Initially OM with Arch/DEV with Data Governance team and then must maintain manually with assistance from Com Ops or enable automated maintenance process.### Step by step1. Gather list of data sources either manually or using an automated tool; aligns with ICTQ and GDPR Triage data flow map (from point of data sourcing/ingestion thru target), update in [Asset Inventory template](https://ibm.ent.box.com/file/318476212419){:target=_blank}2. Include a data dictionary (see [data dictionary template](https://ibm.ent.box.com/file/318476212419){:target=_blank}) for each source containing the data elements and associated information (name, definition, format, personal information/type, etc.)3. Review Asset Inventory Template & Determine Asset Inventory approach – by client or multi-tenant4. Organize and compile AI and DD information, load information into IGC, then review and sign-off5. Put together schedule for changes (set schedule dependent on product updates)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/define-and-prove/data-governance-review/",
    },
    {
      "title": "GDPR Assessmentsidebar: compliance-dapbreadcrumb: GDPR Assessment",
      "text": "---title: GDPR Assessmentsidebar: compliance-dapbreadcrumb: GDPR Assessment---## What needs to be done?Complete GDPR assessment if required by the outcome of the [GDPR Triage](../gdpr-triage) step.## How do I get started?After identifying in GDPR Triage the type of assessment required & the process, Multifunctional team will assist the OM teams to complete one of the following1. GPA (Global Privacy Assessment):  Data Controllers - IBM determines the purpose and controls how the data is processed, stored and/or used.  [Example can be found in GPA Wiki](https://w3.ibm.com/ibm/privacy/assessment.html?r3){:target=_blank} or [GPATool](https://ibm-assess.truste.com/#/project/new/about?templateId=a7dc056c-be42-48f8-af7e-a56b05c1022e&owner=currentUser&final=1){:target=_blank}    - Offering / application level and has no other applicable PI but stores In Scope BCI (Business Contract Information) within; application tool where BCI is stored or collected only requires GPA    - Mobile applications    - Internal applications2. Processor Playbook:  Data Processors - WH processes personal data on behalf of the Data Controller.  Enables or assists Controller in complying with their GDPR obligations Examples: See [Processor Playbook](https://ibm.ent.box.com/file/353009876551){:target=_blank}    - Offerings like WCM or WFO where we process personal data on behalf of our client    - [Risk Assessment training](https://ibm.ent.box.com/file/309444735452){:target=_blank}3. On Premises Assessment:  provide a “shrink-wrapped” software to clients.  The client is the processor and/or controller and is responsible for their data.  IBM is not the processor/controller.  Examples: [On-premise worksheet](https://ibm.ent.box.com/file/365244025455){:target=_blank}    - Social Program Manager On Premises    - iConnect Suite4. Deviation process  - Follow instructions in [WH_SUPP_SOP_0047](https://lsgrcoe-csfe-1.ibmcloud.com/OTCS/cs.exe?func=ll&objaction=overview&objid=21933324){:target=_blank}. If you do not have access to QDMS, your mutli-functional team can provide you with the most recent SOP and [form](https://ibm.ent.box.com/file/389198578289){:target=_blank}.### Step by step1.	Determine team owners for sections & project plan2.	Document Data flows3.	Complete assessments (Processor playbook, GPA, On Premises assessment worksheet)4.	Complete Risk Assessment (included within assessment process – step 3.)5.	Vendor agreements (for any involved across data flow)6.	Work Instructions for handling Data Subject requests7.	Evidences for controls (e.g., SOPs, Procedures, work instructions, technical specifications)8.	DPAs / Service Descriptions & Cumulus updates",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/define-and-prove/gdpr-assessment/",
    },
    {
      "title": "GDPR Triagesidebar: compliance-dapbreadcrumb: GDPR Triage",
      "text": "---title: GDPR Triagesidebar: compliance-dapbreadcrumb: GDPR Triage---## What is the GDPR TriageReview offering/product/application (OPA) Personal Information Data Flow to designate GDPR applicability based on Territorial / PI Scope, determine type of GDPR enablement assessment (Data Controller / Data Processor / On-Premise ) and Schedule / Timing to enable.  Furthermore, if team decides they are not enabling at this time; team must capture within privacy deviation process which can be accessed in [QDMS](https://lsgrcoe-csfe-1.ibmcloud.com/OTCS/cs.exe?func=ll&objaction=overview&objid=21933324){:target=_blank}, If you do not have access to QDMS, your mutli-functional team can provide you with the most recent SOP and FRM.## How do I get started?Offering Manager or Application Owner (or designee) in coordination with Privacy Legal, Technical, Multi-functional Compliance team execute this task together. You can access further guidance [here](https://ibm.ent.box.com/file/337924960962){:target=_blank}.### Step by step1. OM or designee host a detail review meeting with above functions; Provide a  picture of their end to end data flow, Share Offering nuances and “Deep Dive the Data Flow”, understanding sources of all data (knowledge, PI, PHI), data subjects, data fields and movements (process, store, etc)2. Compliance present GDPR Overview; [Further Guidance](https://ibm.ent.box.com/file/309483161912){:target=_blank}3. Discuss Detail Description of Offering and flow (can use previously completed SRB, Architectural flows, PSRA, etc.)4. Compliance Team will determine applicability, [assessment process &/or deviation to follow](https://ibm.ent.box.com/file/389198578289){:target=_blank}.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/define-and-prove/gdpr-triage/",
    },
    {
      "title": "HIPAA Assessmentsidebar: compliance-dapbreadcrumb: HIPAA Assessment",
      "text": "---title: HIPAA Assessmentsidebar: compliance-dapbreadcrumb: HIPAA Assessment---## What needs to be done?For offerings / accounts where IBM may handle, create, transmit, store or receive PHI on behalf of a client, the Compliance Team provides account teams guidance on HIPAA compliance activities in preparation for the account teams completion of the [HIPAA Program Office risk assessment](https://ibm.ent.box.com/file/389197307305){:target=_blank}. Example client types include: Health Plans, Healthcare Providers and Healthcare Clearinghouses (Covered Entities). Please note: Client can also be a Business Associate of Covered Entity.## How do I get started?OM / DEV Team connecting with the Compliance Security Officer### Step by step1.	Read WH_SUPP_FRM_0008 - HIPAA Regulatory Assessment Form. If you do not have access to QDMS, your multi-functional compliance team can provide you with the most recent Form.2.	Setup the HIPAA package in the Security Controls Compliance Tool (SCCT).3.	Complete the HIPAA package questions in SCCT and review responses with the Compliance Security Officer.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/define-and-prove/hipaa-assessment/",
    },
    {
      "title": "Define and Provesidebar: compliance-dapbreadcrumb: Define And Prove Tasks (Compliance)",
      "text": "---title: Define and Provesidebar: compliance-dapbreadcrumb: Define And Prove Tasks (Compliance)---# DRAFT (Coming Soon!)Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Define and Prove phase tasks relevant to Compliance_- _Hover OVER the task to see who OWNS the task_- _Tasks marked with a GxP Only label can be skipped for non-regulated offerings_- _Tasks marked with a CS Only label can be skipped for offerings that are NOT common services_<!--                                                                                                                                        -->                  svg {          background-image: url(https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/flows/vs-define-and-prove-comp.jpg);          background-size: 100% 100%;          background-repeat: no-repeat;          max-width: 900px;          width: 90%;        }        path {          fill: transparent;          cursor: pointer;          transition: fill 0.2s;        }        svg a:focus,        svg a:hover {          outline: none;        }        svg a:focus path,        svg a:hover path {          fill: rgba(255,255,0, 0.15);          cursor: pointer;       }                            OWNER: Project Manager - Create Project Development Plan                                    OWNER: Architect - Initial High Level Architecture                                    OWNER: Offering Manager - Start Common Services Definition Package                                    OWNER: Offering Manager - Create New Hills                                    OWNER: Operations - Operational Hello World                                    OWNER: Dev Lead - Document Technical Foundation                                    OWNER: Designer - Document Experience Architecture                                    OWNER: Dev Lead - Apply for slot in CDT Sandbox Environment                                    OWNER: Architect - Begin Solution Architecture                                    OWNER: Offering Manager - Determine Development Tool List                                    OWNER: Designer - Design Wireframe Prototype                                    OWNER: Offering Manager - GDPR Triage                                    OWNER: Offering Manager - Data Access Compliance Board                                    OWNER: Offering Manager - Content Governance Review                                    OWNER: Offering Manager - Data Governance Review                                    OWNER: Offering Manager - HIPAA Assessment                                    OWNER: Offering Manager - Privacy and Security Risk Assessment                                    OWNER: Offering Manager - GDPR Assessment                                    OWNER: Designer - Usability Study and Validate Prototype                                    OWNER: Offering Manager - Finish GxP Assessment                                    OWNER: DQA - Appropriate GxP Level Training                                    OWNER: Offering Manager - Ensure Data Governances is Understood                                    OWNER: Tools V&V Team - Ensure Development Tools are Identified                                    OWNER: Offering Manager - Conduct Tool GxP Assessment                                    OWNER: Offering Manager - Review and Approve Hills                                    OWNER: Offering Manager - Develop Epics and Groom Backlog                                    OWNER: Offering Manager - Refine Epics                                    OWNER: Architect - AC Review                                    OWNER: Release Manager - SRB Engagement Request                                    OWNER: Project Manager - Create Design Planning Review                                    OWNER: Offering Manager - Create Release Ask                                    OWNER: Release Manager - Conditional Commit Release Plan                                    OWNER: Offering Manager -Create Commitment Pitch                                    OWNER: Offering Manager - Playback 0                                    OWNER: Offering Manager - Commitment Pitch Playback                    ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/define-and-prove/index/",
    },
    {
      "title": "Privacy and Security Risk Assessmentsidebar: compliance-dapbreadcrumb: PSRA Assessment",
      "text": "---title: Privacy and Security Risk Assessmentsidebar: compliance-dapbreadcrumb: PSRA Assessment---## What needs to be done?The PSRA is a risk assessment that addresses privacy and security risks, regulations, and standards and is undertaken as part of a compliance and risk management strategy. This permits a timely identification of potential privacy and security risks and the opportunity to avoid or mitigate the risks.  The PSRA outlines specific mitigation actions, identifies designated owners, highlights mitigation completion deadlines, and includes an appropriate notation of risks that cannot be mitigated or require ongoing action. The PSRA process requires appropriate Business Owner approval of all residual risks and risk mitigation steps.## How do I get started?OM Team working with the Compliance Security & Privacy Team.### Step by step1. Read [WH_SUPP_SOP_0037 - Privacy and Security Risk Assessment SOP, and fill out WH_SUPP_FRM_0007 - Privacy and Security Risk Assessment Form](https://lsgrcoe-csfe-1.ibmcloud.com/OTCS/cs.exe?func=llworkspace){:target=_blank}. If you do not have access to QDMS, your multi-functional compliance team can provide you with the most recent SOP and Form.2.	Submit the completed PSRA form to your multi-functional compliance team.3.	Review the PSRA form with the multi-functional compliance team.4.	Obtain approval of the PSRA by the Security Officer, Privacy Officer, and Program Manager5.	Create action plans to resolve any risks. Create [Security](https://ibm.ent.box.com/file/389210561900){:target=_blank} / [Privacy](https://ibm.ent.box.com/file/389198578289){:target=_blank} deviations for any risks which cannot be resolved prior to product release using WH_SUPP_FRM_0009 - Security Risk Notification Form and/or WH_SUPP_FRM_0010 - Privacy Risk Notification Form. If you do not have access to QDMS, your multi-functional compliance team can provide you with the most recent Forms.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/define-and-prove/psra-assessment/",
    },
    {
      "title": "Market Opportunity and Approachsidebar: compliance-moabreadcrumb: Market Opportunity Tasks (Compliance)",
      "text": "---title: Market Opportunity and Approachsidebar: compliance-moabreadcrumb: Market Opportunity Tasks (Compliance)---Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Market Opportunity and Approach phase tasks relevant to Compliance_- _Hover OVER the task to see who OWNS the task_- _Tasks marked with a GxP Only label can be skipped for non-regulated offerings_- _Tasks marked with a CS Only label can be skipped for offerings that are NOT common services_<!--                                        -->                  svg {          background-image: url(https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/flows/vs-market-opportunity-comp.jpg);          background-size: 100% 100%;          background-repeat: no-repeat;          max-width: 900px;          width: 90%;        }        path {          fill: transparent;          cursor: pointer;          transition: fill 0.2s;        }        svg a:focus,        svg a:hover {          outline: none;        }        svg a:focus path,        svg a:hover path {          fill: rgba(255,255,0, 0.15);          cursor: pointer;       }                            OWNER: Offering Manager - Process and Tool Onboarding                                    OWNER: Offering Manager - Review Market Analysis and Prioritize                                    OWNER: Offering Manager - Review Market Analysis and Prioritize                                    OWNER: Offering Manager - Common Services                                    OWNER: Compliance Lead - Open New Documentation Project                                    OWNER: Offering Manager - Identify IBM Cloud Migration Pattern                                    OWNER: Project Manager - ICTQ                                    OWNER: Offering Manager - Start GxP Assessment                                    OWNER: Design Lead - Concept Car                                    OWNER: Offering Manager - Identify Sponsor Users                                    OWNER: Offering Manager - Market Opportunity Playback                                    OWNER: Offering Manager - Use OMD Light Template                    ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/market-opportunity/index/",
    },
    {
      "title": "Open Documentation Projectsidebar: compliance-moa",
      "text": "---title: Open Documentation Projectsidebar: compliance-moa---## What does this mean?Every new project will require a new compliant documentation project to be opened in the appropriate documentation repository. Depending on type regulatory requirements will determine where some documents can be stored. These projects will be opened by Compliance in Confluence or even QDMS.The following diagram explains which tools are using Confluence as their document repository.![Aha, Jira Document Integration](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha-jira-github-reqflow-conf.jpg){:target=_blank}## How do I get this started?### Step by Step1. Contact your compliance lead in order to get this set up for your project.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/market-opportunity/open-doc-project/",
    },
    {
      "title": "Overview of the different available QMSssidebar: compliance-moabreadcrumb: Overview of QMSs",
      "text": "---title: Overview of the different available QMSssidebar: compliance-moabreadcrumb: Overview of QMSs---## Watson Health Quality Management Systems",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/qms-overview/index/",
    },
    {
      "title": "Sense and Respondsidebar: compliance-sarbreadcrumb: Sense and Respond Tasks (Compliance)",
      "text": "---title: Sense and Respondsidebar: compliance-sarbreadcrumb: Sense and Respond Tasks (Compliance)---# DRAFT (Coming Soon!)Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Sense and Respond phase tasks relevant to Compliance_- _Hover OVER the task to see who OWNS the task_- _Tasks marked with a GxP Only label can be skipped for non-regulated offerings_- _Tasks marked with a CS Only label can be skipped for offerings that are NOT common services_                  svg {          background-image: url(https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/flows/vs-sense-and-respond.jpg);          background-size: 100% 100%;          background-repeat: no-repeat;          max-width: 900px;          width: 90%;        }        path {          fill: transparent;          cursor: pointer;          transition: fill 0.2s;        }        svg a:focus,        svg a:hover {          outline: none;        }        svg a:focus path,        svg a:hover path {          fill: rgba(255,255,0, 0.15);          cursor: pointer;       }                            OWNER: Offering Manager - Ensure Usage - Adoption                                    OWNER: Dev Lead -  L1 / L2 / L3 Support                                    OWNER: Offering Manager - Gather User Feedback and NPS Survey / Interviews                                    OWNER: Offering Manager - Enhance or Adapt Offering                                    OWNER: Offering Manager - Re-Evaluate offering as a Common Service                                    OWNER: Offering Manager - Assess Promotional Materials                                    OWNER: Offering Manager - Release Promotional Materials                                    OWNER: Offering Manager - Ensure Usage / Adoption                    ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/compliance/sense-and-respond/index/",
    },
    {
      "title": "Access to Userssidebar: designbreadcrumb: Access To Users",
      "text": "---title: Access to Userssidebar: designbreadcrumb: Access To Users---Coming Soon!",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/access-to-users/",
    },
    {
      "title": "Human Insightssidebar: designbreadcrumb: Human Insights",
      "text": "---title: Human Insightssidebar: designbreadcrumb: Human Insights---Coming Soon!",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/adoption-metrics/",
    },
    {
      "title": "WH Brand Guidelinessidebar: design",
      "text": "---title: WH Brand Guidelinessidebar: design---## Redirecting to external site...",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/brand-guidelines/",
    },
    {
      "title": "Conceptual Modelsidebar: designbreadcrumb: Conceptual",
      "text": "---title: Conceptual Modelsidebar: designbreadcrumb: Conceptual---Coming Soon!",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/conceptual-model/",
    },
    {
      "title": "WH Design Pattern & Asset Library",
      "text": "---title: WH Design Pattern & Asset Library---## Redirecting to external site...",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/design-system/",
    },
    {
      "title": "Design Guild Guidesidebar: designbreadcrumb: Design Guide",
      "text": "---title: Design Guild Guidesidebar: designbreadcrumb: Design Guide---## Design ThinkingIBM Design Thinking (DT) is human centered design approach for problem solving. It focuses on human needs and value.IBM Design Thinking has three major parts:- The Principles: A frame to see problems and solutions from a new point of view.- The Loop: A behavioral model to understand users’ needs and deliver outcomes continuously.- The Keys: Techniques to scale your practice to complex problems and complex teams.## Watson Health Resources- [Watson Health Design System](https://pages.github.ibm.com/Watson-Health/design-system/index.html)- [WH Marketing Resources](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W429907b3f6ec_4019_81f5_dbe030251892/page/Marketing%20Resources)- [IBM Design Research](https://www.ibm.com/design/research/)- [WH Cognitive Thinking Workshop](https://ibm.box.com/s/x77b8ls78t67dnflbshy2roli4m65xtj)- [WH Persona Template](https://ibm.box.com/s/7fvgq5e3hsjwv3twidkr7m2gp5y37bze)## IBM Design- [Design Tools at IBM](https://designtools.w3ibm.mybluemix.net/)- [IBM Design](https://www.ibm.com/design/)- [IBM Design Thinking University](http://gbslearn.atlanta.ibm.com/iSPO/design_thinking_university/index.html)- [IBM Design Stories & Design Line](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wcb6dafab6c43_486b_839a_caf43834f4a9)- [IBM Design Critique Guide](http://ibm.biz/critique-guide)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/guide/",
    },
    {
      "title": "Human Insightssidebar: designbreadcrumb: Human Insights",
      "text": "---title: Human Insightssidebar: designbreadcrumb: Human Insights---Coming Soon!",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/human-insights/",
    },
    {
      "title": "IBM Design",
      "text": "---title: IBM Design---## Redirecting to external site...",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/ibm-design/",
    },
    {
      "title": "Watson Health Designsidebar: designbreadcrumb: Design Home",
      "text": "---title: Watson Health Designsidebar: designbreadcrumb: Design Home---## How To - Design{% include banners-3-col-with-images.html    b1_title=Market Opportunity & Approach    b1_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/design-guide-black.png    b1_button=Learn More    b1_link=/design/market-opportunity/    b2_title=Define & Prove    b2_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/tribe.png    b2_button=Learn More    b2_link=/design/define-and-prove/    b3_title=Build & Deliver    b3_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/map-128.svg    b3_button=Learn More    b3_link=/design/build-and-deliver/%}{% include banners-1-col-left-with-images.html    b1_title=Sense & Respond    b1_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/hills_24.svg    b1_button=Learn More    b1_link=/design/sense-and-respond/%}## Human Engagement{% include banners-3-col-with-images.html    b1_title=Research Planning    b1_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/who-we-are.svg    b1_img_size=26px    b1_button=Learn More    b1_link=/design/research-planning/    b2_title=Research Methods    b2_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/buildit-runit.png    b2_button=Learn More    b2_link=/design/research-methods/    b3_title=Personas    b3_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/retrospective.png    b3_button=Learn More    b3_link=/design/personas/%}{% include banners-3-col-with-images.html    b1_title=Access to Users    b1_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/retrospective.png    b1_button=Learn More    b1_link=/design/access-to-users/    b2_title=Adoption Metrics    b2_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/who-we-are.svg    b2_img_size=26px    b2_button=Learn More    b2_link=/design/adoption-metrics/    b3_title=Human Insights    b3_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/tribe.png    b3_button=Learn More    b3_link=/design/human-insights/%}## Supporting Resources{% include banners-2-col-with-images.html    b1_title=Pattern & Asset Library    b1_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/design-guide-black.png    b1_button=Learn More    b1_external=true    b1_full_link=https://pages.github.ibm.com/Watson-Health/design-system/index.html    b2_title=Design Resources    b2_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/design-guide-black.png    b2_button=Learn More    b2_link=/design/guide/%}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/index/",
    },
    {
      "title": "Marketing Resources",
      "text": "---title: Marketing Resources---## Redirecting to external site...",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/marketing-resources/",
    },
    {
      "title": "Personassidebar: designbreadcrumb: Personas",
      "text": "---title: Personassidebar: designbreadcrumb: Personas---Coming Soon!",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/personas/",
    },
    {
      "title": "Research Methodssidebar: designbreadcrumb: Methods",
      "text": "---title: Research Methodssidebar: designbreadcrumb: Methods---Coming Soon!",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/research-methods/",
    },
    {
      "title": "Research Planningsidebar: designbreadcrumb: Planning",
      "text": "---title: Research Planningsidebar: designbreadcrumb: Planning---Coming Soon!",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/research-planning/",
    },
    {
      "title": "Build and Deliversidebar: design-badbreadcrumb: Build and Deliver Tasks (Design)",
      "text": "---title: Build and Deliversidebar: design-badbreadcrumb: Build and Deliver Tasks (Design)---# DRAFT (Coming Soon!)Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Build and Deliver phase tasks relevant to Design_- _Hover OVER the task to see who OWNS the task_- _Tasks marked with a GxP Only label can be skipped for non-regulated offerings_- _Tasks marked with a CS Only label can be skipped for offerings that are NOT common services_                  svg {          background-image: url(https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/flows/vs-build-and-deliver.jpg);          background-size: 100% 100%;          background-repeat: no-repeat;          max-width: 900px;          width: 90%;        }        path {          fill: transparent;          cursor: pointer;          transition: fill 0.2s;        }        svg a:focus,        svg a:hover {          outline: none;        }        svg a:focus path,        svg a:hover path {          fill: rgba(255,255,0, 0.15);          cursor: pointer;       }                            OWNER: Project Manager - Initialize New Analytics Project Charter                                    OWNER: Project Manager - Create Risk Management Plan                                    OWNER: Offering Manager - Submit list of suppliers                                    OWNER: Tools Team - Submit list of tools                                    OWNER: Dev Lead - Start Contribution Package                                    OWNER: Architect - User Requirements Specification                                    OWNER: Offering Manager - Project Kick-Off                                                          OWNER: Offering Manager - See Begin Monthly Reviews                                    OWNER: Architect - WHCT CoC Team Review                                    OWNER: Dev Lead - Confirm SPRB Review Completed                                    OWNER: Dev Lead - CDT ORB Review                                    OWNER: Operations - Create or Provision CDT Environment                                    OWNER: Architect - Design Input Detailed Requirements                                    OWNER: Project Manager - Approve Design Input                                    OWNER: Architect - Send HL-SL-DL to Dev                                    OWNER: Architect - Document System Architecture Specification                                    OWNER: Project Manager - Start Recording Risk Analysis                                    OWNER: Architect - Planning Requirements Design Review                                    OWNER: Test Lead - Document Verification and Validation Plan                                    OWNER Dev Lead - Create-Groom Stories (Define Design Output)                                    OWNER: Dev Lead - Implement Stories                                    OWNER: Architect - Review and Approve Design Output                                    OWNER: Test Lead - Testing                                    OWNER: Dev Lead - Code Reviews                                    OWNER: Security Lead - Complete Secure Engineering Virus Scans (Code Scans)                                    OWNER: Architect - Database Reviews                                    OWNER: Architect - Architecture Reviews                                    OWNER: Test Lead - Document and Approve Validation Build Standard                                    OWNER: Operations - Install Build to Formal V&V                                    OWNER: Test Lead - Review and Approval of Install Verification Protocol Execution Records                                    OWNER: Test Lead - Document and Approve Pre-Execution V&V Test Protocols                                    OWNER: Test Lead - V&V Readiness Design Review                                    OWNER: Test Lead - V&V Test Execution                                    OWNER: Test Lead - Review and Approve V&V Test Protocol Execution Records                                    OWNER: Test Lead - Document V&V Summary Report                                    OWNER: Dev Lead - Analytics and Informatics Impact Analysis                                    OWNER: Project Manager - Analytics and Informatics Impact Analysis Action Plan                                    OWNER: Architect - AC Review of Contribution Package                                    OWNER: Project Manager - AC Review Action Plan                                    OWNER: Dev Lead - Staging ORB Review                                    OWNER: Operations - Promote Offering to Staging                                    OWNER: Dev Lead - Demo to Sponsors                                    OWNER: Project Manager - Lessons Learned Retrospective                                    OWNER: Security Lead - Complete Secure Engineering Virus Scans (Staging Environment)                                    OWNER: Dev Lead - Release Readiness Review                                    OWNER: Test Lead - Integration Testing                                    OWNER: Operations - External Penetration Testing on Staging                                    OWNER: Security Lead - Gather SecOps Evidence                                    OWNER: Security Lead - Final Health Check Vulnerability Scans                                    OWNER: Dev Lead - Support Training (L1 L2 L3)                                    OWNER: Architect - IBM Cloud Framework Review                                    OWNER: Compliance - HIPAA Evidence Closure                                    OWNER: Compliance - GDPR Evidence Closure                                    OWNER: Compliance - Final Validate Information Gov Catalog                                    OWNER: Dev Lead - Analytics and Informatics Initiate Methodology Guide and White Paper                                    OWNER: Compliance - PSRA Evidence Closure                                    OWNER: Dev Lead - Common Services Readiness Review                                    OWNER: Operations - Operational Readiness Checkpoint                                    OWNER: Architect - Final SPRB Review                                    OWNER: Test Lead - Validate all Data Approvals Received                                    OWNER: Project Manager - Approve Risk Analysis                                    OWNER: Project Manager - Approve Risk Management Report                                    OWNER: Tools Team - Update Tools List and Versions                                    OWNER: Projet Manager - Design Transfer Design Review                                    OWNER: Project Manager - Document and Approve Production Build Standard                                    OWNER: Project Manager - Document and Approve Device Master Record                                    OWNER: Test Lead - Final Review and Approval of Install Verification Protocol Execution Records                                    OWNER: Project Manager - Document and Approve Servicing Work Instructions                                    OWNER: Project Manager - Document and Approve Device History Record                                    OWNER: Project Manager - Document and Approve Design History File                                    OWNER: Tools Team - Final Check - Ensure all tools are assessed                                    OWNER: Dev Lead - Release Readiness Design Review                                    OWNER: Project Manager - Add Client Install to Distribution Log                                    OWNER: Project Manager - Product and Document Identified Risks                                    OWNER: Project Manager - Ensure Suppliers are on Approved Suppliers List                                    OWNER: Operations - Release Stories to Production                                    OWNER: Test Lead - Execute Install Verification Tests                                    OWNER: Operations - Add to Service Catalog                                    OWNER: Operations - Refresh Catalog                                    OWNER: Offering Manager - Launch Readiness                                    OWNER: Operations - Release Stories to Customer                                                          Back to main flow                                    OWNER: Offering Manager - Discuss Portfolio                                    OWNER: Offering Manager - Prioritize Detailed Level Requirements                                    OWNER: Offering Manager - 4 week ask-commit process                    ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/build-and-deliver/index/",
    },
    {
      "title": "Create New Hills (Design)sidebar: design-dapbreadcrumb: Create New Hills (Design)",
      "text": "---title: Create New Hills (Design)sidebar: design-dapbreadcrumb: Create New Hills (Design)---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/define-and-prove/create-new-hills/",
    },
    {
      "title": "Design Wireframe Prototypesidebar: design-dapbreadcrumb: Design Wireframe Prototype",
      "text": "---title: Design Wireframe Prototypesidebar: design-dapbreadcrumb: Design Wireframe Prototype---# DRAFT## What is a wireframe?A wireframe is a low fidelity representation of a design. It should clearly show:- The main groups of content (what?)- The structure of information (where?)- A description and basic visualization of the user – interface interaction (how?)Wireframes are not just meaningless sets of grey boxes, though they may look exactly like that. Consider them as the backbone of your visual design and remember that wireframes should contain a representation of every important piece of the final product.![Wireframe Example Sketch](https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/design/wireframes.png)Wireframes also play a critical role when explaining Use Cases which require human interaction. You can even refer to a specific element in a wireframe from a Use Case. This is a great way to give greater detail where needed. Use Cases can therefore provide a scenario for to use the wireframe.Wireframes should be created quickly and almost the whole time should be spent communicating with team members and thinking. The mere activity of wireframe-creation should be really quick.If something takes too much time to prepare (e.g. choice of icons, uploading images), you have to represent it in a simplified way (e.g. using placeholders – crossed rectangles for images, plus an appropriate description). We tend to call wireframes low-fidelity deliverables (lo-fi).Remember – a well-created wireframe communicates design in a crystal clear way and sets a path for the whole team.## How do I get started?Your wireframe prototype can make use of the [Watson Health Design Pattern & Asset Library](https://pages.github.ibm.com/Watson-Health/index.html){:target=_blank}, which is a great resource for web style patterns.Also take a look at this [example Developer Works Recipe](https://developer.ibm.com/recipes/tutorials/creating-a-smart-nation-application-design-thinking/){:target=_blank} for building an application using Design Thinking. It contains an example of how to start with a simple hand-drawn wireframe. From there, a more formal wireframe can be built using tooling designed for the task, or general purpose tools like Microsoft Visio.### Step by step1. .. ?2. .. ?3. .. ?4. .. ?5. .. ?",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/define-and-prove/design-wireframe-prototype/",
    },
    {
      "title": "Document Experience Architecturesidebar: design-dapbreadcrumb: Document Experience Architecture",
      "text": "---title: Document Experience Architecturesidebar: design-dapbreadcrumb: Document Experience Architecture---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/define-and-prove/doc-exp-arch/",
    },
    {
      "title": "Define and Provesidebar: design-dapbreadcrumb: Define And Prove Tasks (Design)",
      "text": "---title: Define and Provesidebar: design-dapbreadcrumb: Define And Prove Tasks (Design)---# DRAFT (Coming Soon!)Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Define and Prove phase tasks relevant to Design_- _Hover OVER the task to see who OWNS the task_- _Tasks marked with a GxP Only label can be skipped for non-regulated offerings_- _Tasks marked with a CS Only label can be skipped for offerings that are NOT common services_<!--                                                                                                                                        -->                  svg {          background-image: url(https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/flows/vs-define-and-prove-design.jpg);          background-size: 100% 100%;          background-repeat: no-repeat;          max-width: 900px;          width: 90%;        }        path {          fill: transparent;          cursor: pointer;          transition: fill 0.2s;        }        svg a:focus,        svg a:hover {          outline: none;        }        svg a:focus path,        svg a:hover path {          fill: rgba(255,255,0, 0.15);          cursor: pointer;       }                            OWNER: Project Manager - Create Project Development Plan                                    OWNER: Architect - Initial High Level Architecture                                    OWNER: Offering Manager - Start Common Services Definition Package                                    OWNER: Designer - Create New Hills                                    OWNER: Operations - Operational Hello World                                    OWNER: Dev Lead - Document Technical Foundation                                    OWNER: Designer - Document Experience Architecture                                    OWNER: Dev Lead - Apply for slot in CDT Sandbox Environment                                    OWNER: Architect - Begin Solution Architecture                                    OWNER: Offering Manager - Determine Development Tool List                                    OWNER: Designer - Design Wireframe Prototype                                    OWNER: Offering Manager - GDPR Triage                                    OWNER: Offering Manager - Data Access Compliance Board                                    OWNER: Offering Manager - Content Governance Review                                    OWNER: Offering Manager - Data Governance Review                                    OWNER: Offering Manager - HIPAA Assessment                                    OWNER: Offering Manager - Privacy and Security Risk Assessment                                    OWNER: Offering Manager - GDPR Assessment                                    OWNER: Designer - Usability Study and Validate Prototype                                    OWNER: Offering Manager - Finish GxP Assessment                                    OWNER: DQA - Appropriate GxP Level Training                                    OWNER: Offering Manager - Ensure Data Governances is Understood                                    OWNER: Tools V&V Team - Ensure Development Tools are Identified                                    OWNER: Offering Manager - Conduct Tool GxP Assessment                                    OWNER: Offering Manager - Review and Approve Hills                                    OWNER: Offering Manager - Develop Epics and Groom Backlog                                    OWNER: Offering Manager - Refine Epics                                    OWNER: Architect - AC Review                                    OWNER: Release Manager - SRB Engagement Request                                    OWNER: Project Manager - Create Design Planning Review                                    OWNER: Offering Manager - Create Release Ask                                    OWNER: Release Manager - Conditional Commit Release Plan                                    OWNER: Offering Manager -Create Commitment Pitch                                    OWNER: Designer - Playback 0                                    OWNER: Offering Manager - Commitment Pitch Playback                    ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/define-and-prove/index/",
    },
    {
      "title": "Playback 0 (Design)sidebar: design-dapbreadcrumb: Playback 0 (Design)",
      "text": "---title: Playback 0 (Design)sidebar: design-dapbreadcrumb: Playback 0 (Design)---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/define-and-prove/playback-0/",
    },
    {
      "title": "Usability Study and Validate Prototypesidebar: design-dapbreadcrumb: Usability Study and Validate Prototype",
      "text": "---title: Usability Study and Validate Prototypesidebar: design-dapbreadcrumb: Usability Study and Validate Prototype---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/define-and-prove/usability-study-validate-proto/",
    },
    {
      "title": "Concept Carsidebar: design-moa",
      "text": "---title: Concept Carsidebar: design-moa---## What is the Design Brief?Also known as the Concept Car, tells the narrative of the to-be state for the offering.It makes use of visuals or even pen-and-paper drawings to tell the story of the future experience.## How do I get started?### Step by Step1. The Concept Car template can be found here in the [Offering Management Academy](http://calmedia.atlanta.ibm.com/om_academy/pdf/model/Concept_car.pptx){:target=_blank}2. This is included as part of the [Market Opportunity Playback](../../../om/market-opportunity/market-opportunity-playback/)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/market-opportunity/concept-car/",
    },
    {
      "title": "Market Opportunity and Approachsidebar: design-moabreadcrumb: Market Opportunity Tasks (Design)",
      "text": "---title: Market Opportunity and Approachsidebar: design-moabreadcrumb: Market Opportunity Tasks (Design)---Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Market Opportunity and Approach phase tasks relevant to Design_- _Hover OVER the task to see who OWNS the task_- _Tasks marked with a GxP Only label can be skipped for non-regulated offerings_- _Tasks marked with a CS Only label can be skipped for offerings that are NOT common services_<!--                                        -->                  svg {          background-image: url(https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/flows/vs-market-opportunity-design.jpg);          background-size: 100% 100%;          background-repeat: no-repeat;          max-width: 900px;          width: 90%;        }        path {          fill: transparent;          cursor: pointer;          transition: fill 0.2s;        }        svg a:focus,        svg a:hover {          outline: none;        }        svg a:focus path,        svg a:hover path {          fill: rgba(255,255,0, 0.15);          cursor: pointer;       }                            OWNER: Offering Manager - Process and Tool Onboarding                                    OWNER: Offering Manager - Review Market Analysis and Prioritize                                    OWNER: Offering Manager - Review Market Analysis and Prioritize                                    OWNER: Offering Manager - Common Services                                    OWNER: Compliance Lead - Open New Documentation Project                                    OWNER: Offering Manager - Identify IBM Cloud Migration Pattern                                    OWNER: Project Manager - ICTQ                                    OWNER: Offering Manager - Start GxP Assessment                                    OWNER: Design Lead - Concept Car                                    OWNER: Offering Manager - Identify Sponsor Users                                    OWNER: Offering Manager - Market Opportunity Playback                                    OWNER: Offering Manager - Use OMD Light Template                    ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/market-opportunity/index/",
    },
    {
      "title": "Sense and Respondsidebar: design-sarbreadcrumb: Sense and Respond Tasks (Design)",
      "text": "---title: Sense and Respondsidebar: design-sarbreadcrumb: Sense and Respond Tasks (Design)---# DRAFT (Coming Soon!)Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Sense and Respond phase tasks relevant to Design_- _Hover OVER the task to see who OWNS the task_- _Tasks marked with a GxP Only label can be skipped for non-regulated offerings_- _Tasks marked with a CS Only label can be skipped for offerings that are NOT common services_                  svg {          background-image: url(https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/flows/vs-sense-and-respond.jpg);          background-size: 100% 100%;          background-repeat: no-repeat;          max-width: 900px;          width: 90%;        }        path {          fill: transparent;          cursor: pointer;          transition: fill 0.2s;        }        svg a:focus,        svg a:hover {          outline: none;        }        svg a:focus path,        svg a:hover path {          fill: rgba(255,255,0, 0.15);          cursor: pointer;       }                            OWNER: Offering Manager - Ensure Usage - Adoption                                    OWNER: Dev Lead -  L1 / L2 / L3 Support                                    OWNER: Offering Manager - Gather User Feedback and NPS Survey / Interviews                                    OWNER: Offering Manager - Enhance or Adapt Offering                                    OWNER: Offering Manager - Re-Evaluate offering as a Common Service                                    OWNER: Offering Manager - Assess Promotional Materials                                    OWNER: Offering Manager - Release Promotional Materials                                    OWNER: Offering Manager - Ensure Usage / Adoption                    ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/design/sense-and-respond/index/",
    },
    {
      "title": "Watson Health Developmentsidebar: devbreadcrumb: Development Home",
      "text": "---title: Watson Health Developmentsidebar: devbreadcrumb: Development Home---## How To - Development### Watson Health Development Process Steps{% include banners-3-col-with-images.html    b1_title=Market Opportunity Approach    b1_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/design-guide-black.png    b1_button=Learn More    b1_link=/dev/market-opportunity/    b2_title=Define and Prove    b2_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/tribe.png    b2_button=Learn More    b2_link=/dev/define-and-prove/    b3_title=Build and Deliver    b3_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/map-128.svg    b3_button=Learn More    b3_link=/dev/build-and-deliver/%}{% include banners-1-col-left-with-images.html    b1_title=Sense and Respond    b1_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/hills_24.svg    b1_button=Learn More    b1_link=/dev/sense-and-respond/%}### Supporting Processes{% include banners-3-col-with-images.html    b1_title=WH Common Services    b1_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/hills-epics-stories.png    b1_button=Learn More    b1_link=/dev/common-services/index/    b2_title=WH CS Change Management    b2_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/hills-epics-stories.png    b2_button=Learn More    b2_link=/dev/common-services/change-management/index/    b3_title=Operations    b3_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/map-128.svg    b3_button=Learn More    b3_link=/dev/devops/%}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/index/",
    },
    {
      "title": "Developer Resources",
      "text": "---title: Developer Resources---This pages contains references to generally accepted coding style guides and best practices for the languages commonly used throughout Watson HealthIn addition, links to supporting content for deploying to the IBM Cloud is also included.## Style Guides- [Google Style Guides (external)](https://google.github.io/styleguide/ ){:target=_blank}- [Google Java Style Guide (external)](https://google.github.io/styleguide/javaguide.html){:target=_blank}    - [Eclipse Java Formatters (external)](https://google.github.io/styleguide/intellij-java-google-style.xml ){:target=_blank}    - [IntelliJ Java Formatters (external)](https://google.github.io/styleguide/intellij-java-google-style.xml ){:target=_blank}- [Google Python Style Guide (external)](https://google.github.io/styleguide/pyguide.html ){:target=_blank}- [Google JavaScript Style Guide (external)](https://google.github.io/styleguide/jsguide.html ){:target=_blank}- [Scala Style Guide](developer-guide/scala-coding-style-guide)- [Legal Guidance](developer-guide/legal-guidance)## REST API- [Best Practices](developer-guide/rest-api-best-practices)## IBM Cloud Deployment- [IBM Cloud migration/deployment patterns.](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wa0a1d43ca7a0_4fff_87ff_04006c762969/page/Migration%20Paths){:target=_blank}- [Training on how to interlock with the IBM Cloud](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wa0a1d43ca7a0_4fff_87ff_04006c762969/page/Migration%20Paths){:target=_blank}- [IBM Cloud security guidance for Architects](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wa0a1d43ca7a0_4fff_87ff_04006c762969/page/Security%20Guidance%20for%20Architects){:target=_blank}- [IBM Cloud Accelerator Assets (Sample Code and Applications)](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wa0a1d43ca7a0_4fff_87ff_04006c762969/page/Accelerator%20Assets){:target=_blank}## QA and CI- [Watson Health CI/CD Guidelines](continuous-delivery/index/)- [Automated Testing with Travis CI](https://whitewater.ibm.com/patterns/automated-testing-with-travis){:target=_blank}- [Behavior Driven Development (BDD) with Cucumber](developer-guide/bdd-with-cucumber)## Version Control- [Delivering Code with GitHub](developer-guide/delivering-code-command-line)- [Code Review with GitHub Enterprise](https://whitewater.ibm.com/patterns/code-review-with-github-enterprise){:target=_blank}- [Semantic Versioning](http://semver.org/){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/resources/",
    },
    {
      "title": "Development Tools",
      "text": "---title: Development Tools---This page focuses on tools specific to development. For a more general overview of accepted tools for Watson Health, please see the [Tools page on the Watson Health Playbook](../tools/index/).## Tool integration big picture![Watson Health Development Tool Integration](https://pages.github.ibm.com/watson-health-playbook/resources/images/agileplaybook/aha-jira-github-reqflow.jpg)## Requirements and Development Process Tooling- [Aha!](../tools/aha/)    - Aha! is used by Offering Management to capture and groom the initial high-level requirements and kick of and track an Offering. Aha! integrates with Jira, which is where the [Build and Deliver](build-and-deliver/index/) workflows for development will be realized and managed.- [Jira](https://www.atlassian.com/software/jira?aceid=&adposition=1t1&adgroup=56999361780&campaign=1439934479&creative=294517870063&device=c&keyword=jira&matchtype=e&network=g&placement=&ds_kids=p34164036185&ds_e=GOOGLE&ds_eid=700000001558501&ds_e1=GOOGLE&gclid=Cj0KCQjw9NbdBRCwARIsAPLsnFYqbet-7YkAlEDEOykErTo6-G3SouCtfqFlhNCFHkC9eC5x6BkmktUaAsMFEALw_wcB&gclsrc=aw.ds){:target=_blank}    - Jira is the primary requirements and work tracking tool for Watson Health Development. Jira integrates with Aha! and GitHub.- [GitHub](../tools/github/)    - Watson Health uses GitHub for source control and build management. GitHub integrates with Jira.- [Confluence](https://www.atlassian.com/software/confluence){:target=_blank}    - Confluence integrates with Aha!, Jira and our testing tool XRay. Confluence is the primary document control repository for Watson Health.- [XRay](https://marketplace.atlassian.com/apps/1211769/xray-test-management-for-jira?hosting=cloud&tab=overview){:target=_blank}    - Xray integrates with Jira for test management and traceability.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/tools/",
    },
    {
      "title": "How We Worksidebar: whatbreadcrumb: How We Work",
      "text": "---title: How We Worksidebar: whatbreadcrumb: How We Work---At Watson Health we work in multi-disciplinary teams and apply Agile, Design Thinking and Human-Centered Design approach in a regulated environment. This section will provide high level overview of key practices and provide guidelines for requirements writing.## Practices in Action- Offering Management - What we build- Agile - Adapt to change & deliver value per iteration- QMS - Practices to deliver quality under regulation- Design Thinking - Human-centered approach### Offering Management (OM)Offering Management is an approach to defining offerings used within IBM. It takes into account market and business needs and aims to allow offerings to be delivered incrementally.### AgileAgile is a methodology for the creative development process that anticipates the need for flexibility and applies a level of pragmatism into the delivery of the finished product. Agile assists teams in responding to the unpredictability of constructing software. It uses incremental, iterative work sequences that are commonly known as sprints.### Quality Management System (QMS)QMS is the set of processes focusing on regulatory requirements, patient safety, meeting needs and ensuring satisfaction with our solutions. The Watson Health Quality Management System (QMS) is a collection of business processes WH will follow so that we stay focused on complying with regulatory requirements, ensuring patient safety, consistently meeting our customer’s needs and making sure they are satisfied with the solutions we’re offering. The focus on meeting regulatory needs means that we have to produce specific artifacts and have identified processes, but this does not mean that we follow a waterfall process.This is so important for us as an industry leader, and it shows our commitment to developing products that meet the highest quality standards.### Design ThinkingIBM Design Thinking (DT) is human centred design  approach for problem solving. It focuses on human needs and value. IBM Design Thinking has three major parts:The Principles: A frame to see problems and solutions from a new point of view.The Loop: A behavioral model to understand users’ needs and deliver outcomes continuously.The Keys: Techniques to scale your practice to complex problems and complex teams.### Agile & Design Thinking Key TermsHills: High level human centered business objectives. A Hill is a statement of intent, written as meaningful user outcome. The Hill identifies the users who will consume the value (Who), describes an outcome in user–centric language (What), and formulates a meaningful user outcome (Wow).Technical Foundation: Technical Foundation supports cross-cutting quality, serviceability, and consumability requirements. Technical Foundation is not a Hill, but rather an investment made towards development work.Epics: An epic captures a large body of work. It is a large user story that can be broken down into a number of smaller stories. It may take several sprints to complete an epic. An epic can span more than one project, if multiple projects are included in the board to which the epic belongs.User Stories: A user story is a short description of a desired functionality requirement features. User stories are written from the perspective of an end user.![image](https://pages.github.ibm.com/watson-health-playbook/resources/images/how-we-work/PBSlide01.png)### FDA Key TermsFDA calls out User Needs, Design Input, Design Output and Medical Device, however it does not call out levels of requirements.- Design Input: (FDA) the physical and performance requirements of a device that are used as a basis for device design.- Design Output: (FDA) the results of a design effort at each design phase and at the end of the total design effort.- User Needs: The needs, expressed or otherwise, of users of the device.- Intended Use: The objective intent of the manufacturer regarding the use of a product, process or service as reflected in the specifications, instructions and information provided by the manufacturer.Source: International Medical Device Regulators Forum (IMDRF) document: GHTF SG1 - Label and Instructions for Use for Medical Devices – September 2011![image](https://pages.github.ibm.com/watson-health-playbook/resources/images/how-we-work/PBSlide02.png)## HillsHills are high level requirements & define the problem or need.Written by: Offering Management with collaboration from Design lead, Technical leads, and other stakeholders as needed.Align with IBM Design Thinking- Who – Specific user or class of users- What – Specific user enablement- Wow – Specific & differentiating value to the user (often, but not always, performance)Recommended Format:WHO can/able to…WHAT…. [high level] and/within/by…WOW [uniqueness, great value]![image](https://pages.github.ibm.com/watson-health-playbook/resources/images/how-we-work/PBSlide03.png)## EpicsEpics are the next layer of high level requirements that focus on the problem  One or more scenarios (epics) is needed to achieve the HillWritten by: Collaboratively by the technical leads, OM and Design are reviewers.Intended Use- Reflective of a scenario- Provides value (what) to the user (who)- Aids in organization & grouping of detailed requirementsRecommended Format:As a WHOI need the ability to [do] WHATin order to [goal/value] WHY![image](https://pages.github.ibm.com/watson-health-playbook/resources/images/how-we-work/PBSlide04.png)## StoriesRequirements Stories are detailed requirements that focus on the solutionOne or more scenarios (epics) is needed to achieve the HillWritten by: Technical Leads and Squad leads with collaboration with team members, as neededIntended Use- Lists what the system will do to provide value (what) to the user (who)- Includes Acceptance Criteria that is used to verify the planned solution was provided![image](https://pages.github.ibm.com/watson-health-playbook/resources/images/how-we-work/PBSlide05.png)### Additional resources:- [OM Process & Artifacts, IBM Offering Management Academy](http://calmedia.atlanta.ibm.com/om_academy/process_artifacts.php){:target=_blank}- [IBM Design Thinking](https://www.ibm.com/design/thinking/page/framework){:target=_blank}- [Watson Health Quality Knowledge Sharing](https://apps.na.collabserv.com/communities/service/html/communitystart?communityUuid=deafb345-79a5-43cc-b84d-4037889bca73){:target=_blank}- [Watson Health Training](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/W2ae8c8b21e3a_45d3_8e47_d6a03d7f5c62){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/how-we-work/",
    },
    {
      "title": "IBM Squad Thinkingsidebar: what",
      "text": "---title: IBM Squad Thinkingsidebar: whatweight: 1---We call the way we organize people and roles IBM Squad Thinking. Everything we do is here to support our Squad Members. Heres how it works...## Our SegmentsThe Watson Health Organization is made up of different market Markets. Our current Markets are Payer, Provider, Life Sciences, Oncology & Genomics, Government Health & Human Services. We also have offerings that cross market Segments such as the Watson Platform for Health and the VBC Foundation.  Each Segment has a Market Leader and one or more Leadership Teams.## The Leadership TeamThe Leadership Team typically consists of a Development Leader, a Offering Manager, a Design Leader and an Architect. These four work together to define the backlog and guide the overall project. Together, they are responsible for: Defining Hills Decomposing Hills into Epics Assigning Epics to Releases Assigning Epics to Squads Managing the overall release plan> ProTip: Your Offering Manager is _usually_ synonymous with a Senior Offering Manager (using traditional IBM-specific terms)## TribesTribe is another term weve borrowed from Spotify. Tribes are groups of Products / Services or Projects aligned around common Goals.Tribes include team members from Development, Offering Management, and Design.  Other disciplines are also present in the Tribe, such as Marketing, Finance, Support, etc., but they usually dont organize into the squads.The Tribe is supported by a Leadership Team that prioritizes and assigns Epics across all squads.## Products / Offerings / ServicesEach Tribe typically supports a number of Products / Offerings, Services or Projects within it that are aligned around common Goals. They have one or more Squads. A Product / Offering / Service is sold, while a Project is not currently sold (though may be in the future).## Release ManagersWorking with the Leadership Team at the Product / Offering / Service level are our Release Managers. Each Product should have a Release Manager. They work with the Squads on a _daily basis_ to ensure that the Sprint goals are being met. They break bottlenecks, align our Squads and drive the execution of our delivery plan.> Release Managers are the enablers, accelerators and guardians of the various processes for the products they support.> Release Managers are the Guardians of the Process which means that they continually look at how we can do things better and ensure we are following the existing processes.Release Managers are laser focused on ensuring we can execute on our delivery plans and timelines and they do this in three key areas:ComplianceIf youve never heard of the Offering Deliverables Catalog, or had to make an update to Clearing House, or had to deal with Disaster Recovery process or youve never heard of the OMD process, you can thank your Release Manager. No, really, bring them coffee or chocolate or balloons. They deserve your thanks because they are shielding you from very time consuming but necessary component of our releases. Release Managers have a never ending responsibility to be aware of any and all compliance related activities that may impact a timeline of a particular feature or capability. They are responsible for knowing exactly what it takes to get a product from an experimental to a GA service in Cloud. If youd like to learn more about the various compliance requirements that Release Managers deal with here are a few links that will give you a taste or a headache of all of the things that they are responsible for knowing about to help you get your products out the door: [IBM Cloud Service Framework (fka Bluemix Onboarding)](https://pages.github.ibm.com/ibmcloud/Service-Framework/transitiontoOneCloudSummary.html){:target=_blank} [IBM Offering deliverables Catalog](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/W10a5829829f4_4da8_aee4_d4bca1dd120d/page/Welcome%20to%20IBM%20Offering%20Deliverables){:target=_blank} [Data Processing and Protection Datasheet - DPA URL Search](https://www.ibm.com/software/reports/compatibility/clarity/softwareReqsForProduct.html){:target=_blank} Link to the [Cumulus tool](https://saascapabilities.w3ibm.mybluemix.net/SaaSCapabilities/index.jsp){:target=_blank}Communication and PlanningRelease Managers work with the product leadership team to ensure that the communication and planning is as effective and efficient as it can be. They are the enablers who look across teams to identify where there are dependencies and advise Offering Managers on prioritization in relations to those dependencies. Please help your Release Manager by letting them know as early as possible when you plan to GA a product or would like to make changes to pricing or plans. They can help you understand the timeline of the process, so you can plan the release and announcements accordingly.Agile ProcessRelease Managers help with problem solving and are part of the Leadership Team that can help remove blockers and try to keep the noise of competing priorities and demands. They are the enforcers of the process. Once the product team has agreed to operate in alignment with Agile process they can help reinforce those practices and principles and advise when we are out of alignment.## Iteration ManagersIteration managers are key to helping squads Accelerate their development by Removing Impediments, Managing the Iteration and embodying Servant Leadership.Iteration managers carry water and remove boulders for the squads.## Squads> IBM Agile Academy - Get started with a [5 minute video about Squads](http://agileacademy.w3ibm.mybluemix.net/standalone/cross-functional_teams/){:target=_blank}A Squad is a small, cross-functional, self-organizing team who has end-to-end responsibility for the stuff they build, including: Design, Development, Documentation, Quality, Performance, and Delivery. A Squad leaders job is to communicate what needs to be solved and why, then Squads collaborate to find the best solution. Even though each Squad has its own mission, they need to be aligned with product strategy, company priorities, and other Squads. Squads are assigned Epics in their tracker by the Leadership Team. The Squad will decompose the highest priority Epics into Stories (just focusing on the next few Sprints) and keep their board up to date as those Stories progress from thought to production. Dont write six months’ worth of Stories, your mission will change before you know it!Ideally, a well-performing Squad: Is small, no bigger than 10 people Is co-located in the same physical space or timezone Includes Designers, Developers, and Offering Management [Practices team ceremonies](play-by-play) Is aligned with other Squads Is empowered to put their work into production Is capability-focused Works autonomously Makes decisions independently, rather than by committee or decree Minimizes handoffs and waitingTogether, the Squad will: Refine Epics into Stories Estimate Story level of effort Plan their own Sprints Execute work in Sprints as a cross-functional teamSquads thrive when they have a mission, are co-located, multi-disciplinary, and small.Most people should be on one and only one Squad. This should be followed unless there are _extreme_ resource issues requiring someone to split focus on multiple missions (e.g. not enough Designers working on a Product).Offering Managers will typically be a Part Time Squad member, helping during Grooming and Planning. Offering Managers typically work with multiple Squads.## GuildsSupporting our Segments, Squads, and Tribes are our Guilds. The Guild concept (like Tribes and Squads) come to us from the fine folks at Spotify and are how we maintain alignment and drive efficiency across the entire Watson Health organization. Guilds are organized around disciplines (like the Engineering Guild, the Offering Management Guild). Each Guild is made up of members from all of our Segments. Each Guild has one or more Slack channels, has defined leaders, and is the source for discipline-based best practices. The Agile Transformation Guild creates Playbooks for each Segment and works with Squads to adopt a culture of Continuous Improvement.## ChaptersAnd finally, we come to Chapters. A Chapter is just like a Guild, but typically only works within a Tribe or Location. A Guild is cross-Tribe / cross-Location. A Chapter will typically organize local brown bag sessions, tech talks, or other lab-based events...## Extended Team Roles and Ceremonies...Each and every Product Team is supported by a large number of extended team members. Heres an overview of the roles and ceremonies that happen on a continuous basis.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/ibm-squad-thinking/",
    },
    {
      "title": "Play by Playsidebar: what",
      "text": "---title: Play by Playsidebar: whatweight: 2breadcrumb: Play By Play---We need our [Squad members](../../../dev/agile/ibm-squad-thinking/) to have big blocks of time to get things done. To accomplish this, we always start with the minimum viable process possible.The following pages provide a Play by Play for how to work in a disciplined, agile way...#### Rethink and Reorganize your Organization- [IBM Squad Thinking](../../../dev/agile/ibm-squad-thinking/)#### Provide Time and Structure for Squad Members to Work- [Agile Calendars](play-by-play/agile-calendars/)#### Every Squad, Every Day- [15 Minute Daily Standup (Early AM)](dplay-by-play/aily-standups/)- [30 Minute Daily Backlog Grooming (Late PM)](play-by-play/squad-backlog-grooming/)#### Last Day of the Sprint- [End of Sprint Demos (Whole Team)](play-by-play/end-of-sprint-demo/)- [Hold a Retrospective (Every Squad)](play-by-play/retrospectives/)- [Plan for your next Sprint (Every Squad)](play-by-play/sprint-planning/)#### Weekly- [Whole Team Standups](play-by-play/whole-team-standup/)#### Continuously- [Daily Product Grooming](play-by-play/product-grooming/)- [Capacity Planning](play-by-play/capacity-planning/)- [Process Acceleration](play-by-play/process-acceleration/)#### Dependencies- [Dealing with Dependencies](play-by-play/dependencies/)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/play-by-play/",
    },
    {
      "title": "Planning and Tracking Worksidebar: dev",
      "text": "---title: Planning and Tracking Worksidebar: dev---",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/ongoing-delivery/hills-epics-stories-usecases/",
    },
    {
      "title": "Agile Calendarsbreadcrumb: Calendars",
      "text": "---title: Agile Calendarsbreadcrumb: Calendars---Life moves pretty fast. Agile helps teams keep up. To allow our teams to welcome changing requirements, [even late in development](http://www.agilemanifesto.org/principles.html){:target=_blank}, we work in short iterations called Sprints. [(4 minute video)](http://agileacademy.w3ibm.mybluemix.net/standalone/iteration_zero/){:target=_blank}- 1 or 2 week Sprints are the key to enabling course correction- On the last day of the Sprint, we have a Demo, Retrospective and then we Plan for our next Sprint- Ensure your Product Team minimizes regularly scheduled meetings by adopting a Minimal Meeting Load## One Week Sprint CalendarThe following shows a calendar that _most_ Squad Members can start with.Add to this some regular activies like dealing with Email/Slack/Calendar, eating lunch, and working on Techincal Vitality activies, and you still have a calendar designed to give you big blocks of time:Ensuring your Squad Members have big blocks of uninterrupted time is vital to allowing them to get into states of deep work or even achieving flow.## One Week Sprint Calendar (Product Leadership Team)The following shows a calendar that _most_ Product Leaders can start with.The primary addition to their calendar is the [Daily Product Grooming](../product-grooming).Notice that its held right after Squads hold their Standups. This allows a Squad Leader to join the Daily Product Grooming session to and raise blockers.## Two Week Sprint CalendarIf your Product works in two week Sprints, we add a Whole Team Standup on the first Friday of the Sprint.The second week of the Sprint is exactly like the one week Sprint Calendar.> Signs of Success>  Your Squad Members spend more time Designing, Coding, and Deploying, than they do sitting in Meetings (measure this).>  Your Velocity goes up over time (look for an upward sloping Velocity Report)>  You no longer hear Squad Members state theyre in too many meetings during your Retrospectives",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/play-by-play/agile-calendars/",
    },
    {
      "title": "Capacity Planningbreadcrumb: Capacity Planning",
      "text": "---title: Capacity Planningbreadcrumb: Capacity Planning---Estimates are not precise and uncertain. Watson has varying levels of maturity, in terms of how we operate, and in terms of how we lead. Here is how we are moving toward a more mature model.Product Teams should perform rapid, continous estimation and use Aha! to plan capacity from Quarter to Quarter.## EstimatesT-shirt sizing and/or Planning Poker are easy methods to follow that dont waste precious time going deep on estimating the far away things.### T-Shirt sizing- Step one - review the prioritized plan and pick one that would be considered medium t-shirt sized, your anchor story. Note: the plan can be from the roadmap level down to the sprint level.- Step two - now that you have your anchor then go through each story and ask if that story is much smaller, smaller, the same as, bigger, or much bigger than the anchor.- Step three - equate T-shirt size to a story size number equivalent based on the level you are planning and/or on a previous average velocity> Pro Tip:> If the item is so unknowable that you cant determine based on prior work go HUGE. For example, if your capacity for the last quarter was 2000 points and you use T-shirt sizing, then make XL equivalent to between 50-80% of your known capacity.### Planning Poker- If you havent done this already, build two tables of completed, representative work to use as a reference when estimating.  - Step one - create one table for Sprint-sized work, and another for Epic-sized work, include the points in the table.  - Step two - create one good example per point value (per time slice) should be enough to get going.  - Step three - refer to these when sizing work and discussing differences> Pro Tip:> The reference work or anchor story trick helps speed planning poker to the extreme## CapacityAt every level of the organization, whether it be at the personal level, the Squad level, or the Product level, there is a finite capacity available for work.We are people, not robots, we must remember this as we make future plans.Thankfully, we have tools that can help guide us towards understanding what can, and what cant be done within any given period of time.### Capacity Planning in Aha!Once you have estimates, you can use the Aha capacity planning capability to give you dates- Step one - set the capacity limit in Aha based on your actual quarterly velocity  - Add up the most recent quarters worth of points from your Jira velocity charts  - Add them to each Aha Release Target (by clicking on the word Capacity in the column)- Step two - drag and drop your Aha Epics into the prioritized order (top is highest priority)  Aha will draw a red line in the column to show you where you are at capacity- Step three - drag anything below it to the next Quarter- Step four - rinse, repeatIts important to understand that estimates are intended to be able to help make prioritization and tradeoff decisions and not to set due dates. When we use the model above to make these estimates it will help us have better conversations about those due dates and deliverables.Like everything else around here, were trying to move the entire organization to continuous grooming, sizing, and planning (each are individual activities). Theres still work to be done on all levels...",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/play-by-play/capacity-planning/",
    },
    {
      "title": "Continuous Planningbreadcrumb: Continuous Planning",
      "text": "---title: Continuous Planningbreadcrumb: Continuous Planning---We here in Watson have progressed to the point where most Squads can state, with a high degree of accuracy, what they can commit to in their next Sprint. Some can even state what they can commit to in the Sprint after that. The challenge we currently face is that the business depends on us being able to forecast further out than a few weeks. With the bulk of revenue coming from client-specific commitments being made a Quarter or more out, we need the organization to use our Sprint-based expertise to guide our long term forecasting.## Our Goal> All Product Teams follow a Continuous Planning process that yields a rolling Roadmap where we can forecast out at least two quarters beyond the current quarter.## Fundamental Tenets- No Assumptions - The only work that can be placed on a Product Roadmap is work that the Product Leadership Team has groomed (Described, Sized, Prioritized) ([link](product-grooming))- There are three timeframes each Product Team focuses on for planning. The next Year, the next Quarter, and the next Sprint.    - The Next Year - This is the Planning Roadmap. This shows the future state that we are aiming for a single product and also shows the quarter when we are planning product integrations.    - The Next Quarter - The 3 month period that begins after the current Quarter. This means that roadmap commitments should be rolling across months.    - The Next Sprint - Squads are responsible for planning, with certainty, what they can commit to delivering for this Sprint, and the next Sprint.- Group-based Estimates - Work must be estimated by a group, not by an individual. Estimates can be wrong, we expect them to be wrong, AGILITY & COMMUNICATION is key.- Total Agreement - Every stakeholder agrees to dates everywhere that dates are needed, and items with dates become our highest priorities- Trade off Decisions - When it is clear that a Squad (or Product) cannot achieve a commitment, the Product Leadership Team owns the trade off decisions and works with their Tribe and Segment Leaders to ensure that we deliver the right things in the right order.## Steps- All work starts in Aha:  This includes new work (new features, new deployments) AND continuing investment on EXISTING capabilities (keeping the lights on operational support / bug fixes, security updates, technology shifts).- The Product Leadership Team meets daily to analyze new work and make sure they are on the same page wrt scope. This includes rough order of magnitude sizing based on real world data.- The Product Leadership Team prioritizes and commits to plans based on estimates provided by Squads and available resources- The Offering Manager owns the Roadmap and sends Aha Epics to GitHub the Quarter before they will be implemented. All other work stays in the Aha Parking Lot- The Squads that will do the work, will size the work - estimation must leverage prior sprint velocity and should improve over time.  Squads have to size work within a week of it being assigned by the Product Leadership Team. If Squads are not sizing within a week, the Product Leadership Team will work with the Squads to help them achieve success.- If work is required from other teams, the Offering Manager is responsible for interlocking with their counterparts from those teams. If there is a prioritization conflict, the Offering Manager works with the Tribe and Segment Leadership teams to resolve the conflict.- Release Managers track each Squads progress on their commitments. When committed work needs to change - e.g. new work coming in, original estimation was faulty, CIEs took time etc, the Release Manager and Offering Manager are responsible for communicating with stakeholders and re-prioritizing with them as necessary.This is a continuous process that leverages feedback loops as described in the [Agile Calendars](agile-calendars) page of the Playbook.## Things to watch out for- Comprehensiveness of Aha - We should make sure that Aha Roadmaps are comprehensive accounts of where the Product Teams will need to spend their effort. E.g. today, it seems most of our roadmaps do not include amount of effort Squad Members spend on day-to-day operational support (deployments, SRE, CIE management, bug fixes, L3 support) or new automation they need to build to make such tasks cheaper to execute. Specifically, make sure you include SMARTS principles that we have successfully used to improve operational stability -  Scale testing, Monitoring, Alerting, Recovery (SRE Playbooks), Testing, Security.- ASSUMING an interlock - We gave them this date target 6 months ago  does NOT an interlock make. Unless owners of work items have committed to a date target, there is no interlock, plan or roadmap.- Squad hesitation of accurate estimation - We can never be 100% accurate in estimating effort, but having some estimate is better than nothing and leveraging agile group-based-estimation + our past sprint velocity, we should be ok. Talk to agile coaches for help.## Asks for the Leadership- Donna asks for Roadmaps/ Backlogs  that have epics in which Design and Development agree on the Acceptance criteria.    Design and development determine when the Roadmap/Backlog is Well Defined.- Aameek tells his report that if they do not have a well defined backlog then they should make that known to him and Donna- Aameek demands from his staff that Releases ups are are accurate (Contains all Known epics and stories, and estimated.   Burn-ups are to be reviewed with Aameek every 2 weeks- Leadership Team education    - Understand how to use burn-downs, burn ups, roadmaps to drive behavior    - Identify what leaders need to do and actions to take to support transformation    - Q1 2018 Leadership training workshop 1.5 - 2 days[] Need macro analysis with current+2q  horizon so that we can identify unsustainable trends - e.g. if a new deployment requires 2 Sprints worth of effort and we are doing 10 new deployments two quarters later, we need to invest in automation this quarter to reduce the effort to multiple deployments per Sprint.> Signs of Success>  Your Product Team has a clear vision for where youre going.>  Your Squads are aligned in their work and have fewer bottlenecks.>  All work is visible, so your planning becomes more accurate.>  You deliver what you say youre going to. Your stakeholders are satisfied.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/play-by-play/continuous-planning/",
    },
    {
      "title": "15 Minute Daily Standupsbreadcrumb: Standups",
      "text": "---title: 15 Minute Daily Standupsbreadcrumb: Standups---Every morning, spend 15 minutes with your [Squad](../ibm-squad-thinking/) to align and break bottlenecks.> Who: Every Squad> When: Every Morning> Get started with this  [(4 minute video)](http://agileacademy.w3ibm.mybluemix.net/standalone/daily_standup_meeting/){:target=_blank} from the IBM Agile Academy about how to run your Daily Standup- Look at the Stories (Issues) that are in the In Progress and/or To Do states and answer the questions:    - What was done yesterday    - What will you do today    - What blockers you have- Its often helpful to work off your Kanban Board and use the columns in reverse order, e.g:>Yesterday I closed #42, today Ill be reviewing #27 then start working on #33. Im blocked by #22 as its still in the backlog- If you cant get through every In Progress Story in 15 minutes, check the following:  - Is your group is too big?  - Have you taken on too much at once?  - Are people straying from the yesterday / today / blockers format?- Alternately, you can try running your Standups in Slack:  - This is a _great_ way to align a non-colocated large team, especially one split across multiple time zones (though you should really work on transforming into a Squad...)  - You dont necessarily need to dedicate 15 minutes for Slack-based Standups  - [Distributed Standup with Slack](#running-standups-in-slack)If you need more details on a subject, use the parking lot approach and get the right group together after. [Link](https://w3-connections.ibm.com/blogs/widp/entry/how_to_lead_a_daily_standup?lang=en){:target=_blank}### 60 Second Kanban Board Updates [(4 minute video)](http://agileacademy.w3ibm.mybluemix.net/standalone/walls_of_work/){:target=_blank}Squad members should spend about 60 seconds updating the Kanban Board Updating the board includes: Making sure that each Issue is in the correct column (e.g. New -> Backlog -> In Progress -> Review -> Complete) Making sure that each member is working on the Issue with the highest priority, and that issue is the closest to the top of the pipeline> Signs of Success>  Your Squad Members spend more time Designing, Coding, and Deploying, than they do sitting in Meetings (measure this).>  Blocking issues are brought to the surface daily.>  Temporary Pair Programming increases as Squad Members help each other through blocking issues.## Running Standups in Slack...Is your team too big? Are there members of the team who are not all in one room or timezone?We know that nothing beats a 15 minute daily standup for aligning a [Squad](../ibm-squad-thinking/), yet teams still struggle because they are too big, too distributed, or a mix of both.Heres a great trick to running your daily standup using Slack reminders.Paste the following into your Squads Slack channel:```/remind # ```@here - Standup Time!Please use this format:#standupY: What you did yesterdayT: What youre doing todayB: List the blockers/impediments you have```in this channel at 9:45AM every day```Moving forward, Slackbot will call you into your Squad channel and ask for an update.To make this work, the squad needs to commit to post and then read everyones status every single day.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/play-by-play/daily-standups/",
    },
    {
      "title": "Dependenciesbreadcrumb: Dependencies",
      "text": "---title: Dependenciesbreadcrumb: Dependencies---# THIS IS GITHUB/ZENHUB CENTRIC - NEEDS REWRITE FOR AHA->JIRA->CONFLUENCE->GITHUBSometimes a story cant be completed until some other piece of work is done.  Most Squad members assume this could be something technical, but many times, it can be virtually any kind of additional background work. To understand how to track dependencies, were going to separate them into to categories: Internal and External to the Squad.## Dependencies inside the SquadLets look at a Story that requires a user interface to be created, it will probably take more than one Sprint, and require multiple people.  Work that takes more than a Sprint? That really sounds more like an Epic. In this case, we create the User Story, convert it to a Zenhub Epic, and add the additional work as child issues. Assign these issues to the Squad Members that will be completing the work. Its important to identify and track all of the dependencies so that the team doesnt develop a false sense of confidence about how much work they have to do to complete a user story or epic.## Dependencies outside the SquadA Squad should be able to complete a mission from thought to production. While every Product Team should ensure that each and every Squad is enabled for success, reality is messy. The truth is that weve all had work that depended on something being done outside of our Squad. To help us deal with that, we worked with the teams that develop both ZenHub and Aha and had them add the ability to mark work as dependent on other work.> ProTip:> You can only call out dependencies for work that youre actually tracking. To ensure youre not missing anything, you should err on the side of caution and leverage both Aha and ZenHub to track all of your dependencies.## ZenHub Dependencies- Open an Issue- Click the + add dependency button- Use typeahead to find the issue and then select it- Your issue is now marked blocked by another issue> ProTip:> Dependencies can by added for any Issue in your [Product Issue Tracker](../../../dev/planning-and-tracking-work/getting-organized#product-issue-trackers) and/or for any connected repository for those smaller projects that use the [Board of Boards](../../../dev/planning-and-tracking-work/getting-organized#board-of-boards-less-common) approach.Dont get too hung up on the use of the word blocked. If you stop and think about it, any work that cant be started until something else is completed is actually blocked.> ProTip:> - Use a red blocked label in GitHub to mark issues blocked by something that isnt in GitHub> - Make sure the issue has a link to the thing thats blocking it### Coming soon (1H 2018)- ZenHub will be adding the ability to mark an issue as dependent in addition to blocked- ZenHub will be adding the ability to mark an issue as blocked by anything. This could be a GitHub Issue in some random repo, or youll be able to add a URL so you can mark a GitHub Issue blocked on a Change Request URL. You wont be able to get live status from anything but GitHub, but it will help you keep track of your dependencies, and the dependency will show up on the card in the board view.- ZenHub will add a Dependency Report that will show you a graph of our dependencies...## Aha DependenciesRecognizing that the items in our Roadmap can be _highly dependent_ on other items in Aha, we worked with the team at Aha to add the ability to mark an Epic as dependent on another.- Open an Epic- Select Actions > Link to another record- Find the Aha Epic that your Epic is dependent on (hint: use the Epic ID, e.g. GTD-14)- Click Create link- Your Epic is now dependent on that other Epic- To see your dependencies on a calendar/gantt view, go to the Release Targets view.- Youll see arrows connecting one target to another. Its easy to spot problems in this view (e.g. one Epic completing _after_ the start of a dependent Epic)> ProTip:> To visualize a dependency across products, youll need to add the Release Target from the _other Product_ to your view. You can only add dependencies on Epics you have access to. Work with your Aha Admin to ensure you have read acce### Aha Dependency ReportingAha has added a Dependency viewer report for us.- Select the Epic- Scroll down to the Visualize link- Click the target icon to center on that Epic, and the arrow icons on a dependency to see the depenencies for your dependencies> ProTip:> Remember, you have to click the little target icon to expand and see the extended Dependencies, youll only see the a level or two by default...",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/play-by-play/dependencies/",
    },
    {
      "title": "End of Sprint Demo",
      "text": "---title: End of Sprint Demo---On the last day of the Sprint, hold a Demo, a Retrospective, then Plan your next Sprint> Who: Whole Product Team> When: Last Day of the Sprint> Get started with this  [(5 minute video)](https://agileacademy.mybluemix.net/standalone/showcase/){:target=_blank} from the IBM Agile Academy about how to run an end of Sprint DemoThe End of Sprint Demo is the time to come together as a broader team to validate that what was planned for the sprint is what was achieved. For some team members the sprint was spent creating stories and writing code, others will have created architecture diagrams that lay the foundation for future work, while others still might have some preliminary user experience mock-ups to share with the broader team.The Iteration Manager is responsible for the process of setting up the End of Sprint Demo and facilitating the session. They work with the Offering Manager who will help set the context by starting with a brief description of the business value delivered during the sprint. Then members of the Development Team will provide a demonstration of working code, a read out of an investigation story, an architectural diagram or other artifacts of the stories that were worked on in the sprint. Focusing on the business value helps keep the stakeholders engaged and is a good reminder to everyone of why we did what we did. Additional facilitation responsibilities include: Planning what will be said. It doesnt have to be a complete script, but knowing the highlights helps. Look at what the squad did over the last sprint. Identify stories that have been completed and use that as a starting point. Bring something visual to share. If there is a live demo of something ensure that your browser is open to the page and test it immediately before the meeting. Have a backup if things go wrong. Set time limits (5 minute slots and 10 minute slots work well) and make sure presenters adhere to time limits. The team may not be able to cover everything that was done that Sprint. Thats fine. Post visuals and meeting notes.After the Demo, have lunch as a team then hold a Retrospective...> Signs of Success>  Your Squad Members feel a sense of pride in showcasing what theyve accomplished.>  Your organization better understands what work is being done.>  You ensure that the right work is being done in the right order.>  Offering Management, Design, and Engineering are on the same page.>The Sprint Plan and the End of Sprint Demo are the bookends to your sprint.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/play-by-play/end-of-sprint-demo/",
    },
    {
      "title": "Agile Estimates & Reportsbreadcrumb: Agile Estimates",
      "text": "---title: Agile Estimates & Reportsbreadcrumb: Agile Estimates---# THIS IS GITHUB/ZENHUB CENTRIC - NEEDS REWRITE FOR AHA->JIRA->CONFLUENCE->GITHUB## OverviewAgile Estimation and Reporting using Story Points, Burndown, Velocity, and Burnup are the keys to understanding what a team can accomplish. These practices let you understand a teams capacity which helps them become predictable and have a balanced budget. Work in an organization asking for Person Week/Month sizings for long term forecasting? Weve got [guidance](#person-months) for you as well...## Story Points> Who: Squad Members> When: Sprint PlanningAll too often, teams skip estimating how much effort and risk is involved in the things they have to do. This results in teams being asked to do more than they can handle. To help everyone understand what is achievable, we create size estimates. Watson Health teams map the Point values (typically using the Fibonacci sequence) in ZenHub to T-Shirt sizing:| Point Values  | T-Shirt Sizing || ------------------- | -------------- || 1                   | XX-Small       || 2                   | X-Small        || 3                   | Small          || 5                   | Medium         || 8                   | Large          || 13                  | X-Large        || 21                  | XX-Large       |When estimating stories, remember to work out of the backlog. It will take a few Sprints to understand exactly how much can be fit in a Sprint safely.### Planning Poker> Who: Squad Members> When: Sprint Planning> Get started with this  [4 minute video](http://agileacademy.w3ibm.mybluemix.net/standalone/planning_poker/){:target=_blank} from the IBM Agile Academy about how to run a Planning Poker MeetingPlanning poker is a consensus-based, gamified technique for estimating, mostly used to estimate effort or relative size of development goals in software development. Members of the group make estimates by playing numbered cards face-down to the table, instead of speaking them aloud. The cards are revealed, and the estimates are then discussed. By hiding the figures in this way, the group can avoid the cognitive bias of anchoring, where the first number spoken aloud sets a precedent for subsequent estimates.- Its up to your Squad to determine what your sizings mean- You cant compare point values from one team to another team- As a group, set an estimate for every Issue opened.- Leverage your small group to help understand how much effort an Issue really is.[Plan on having the meeting at the end of each sprint.](agile-calendars/) Working out of the team backlog, the team lead reads the Story title and short description.  This should give the team the background they need to understand how big it feels.The team will vote together, so make sure you use a SIMPLE mechanism to capture the vote. You can use emoji reactions to vote in Slack!```“How many Story points?” “XX-Small” :sp-1: “X-Small” :sp-2: “Small” :sp-3: “Medium” :sp-5: “Large” :sp-8: “X-Large” :sp-13: “XX-Large” :sp-21:```If the team votes with consensus, move on to the next.  If consensus is not reached on the first vote, ask the outliers why they voted as they did and call for another vote.  Repeat a few times until you reach consensus.  If you can’t get close within three votes, move on and come back at the end (or call an “After Meeting”).To ensure that discussion is structured; the Moderator or the Offering Manager may at any point turn over the egg timer and when it runs out all discussion must cease and another round of poker is played.### Establishing a baselineAfter a few Sprints, youll have some great examples of completed work and the point values you assigned. Build a table on your wiki and use that as a reference to make your estimation go even faster.| Point Values  | Issue || ------------------- | -------------- || 1                   | [[5479](#table)] As a Social Coder, I would like to have a description of the project so that I can be productive as quick as possible       || 2                   | [[5977](#table)] As a CTO, I want to see real-world examples of emerging technology success so that I can better envision how it can help me.        || 3                   | [[3433](#table)] When importing intents or entities, a line with commas but no data does not return an error in the store          || 5                   | [[8876](#table)] As a Watson Developer, I want the UI Kit to be consumable via a managed repository so that I can be sure which version my application uses         || 8                   | [[77876](#table)] As an academic user with an expired Trial account, I need to transition to a new account type so that I can continue Bluemixing          || 13                  | [[5633](#table)] As a CISO, I need to understand IBMs GDPR is so that I can make informed decisions about how I can help my organization adopt.        || 21                  | [[334](#table)] As a service owner, I must have a documented and tested DR solution so I can ensure I can recover from catastrophic failures       |Remember, Story Points map points to effort, XS/S/M/L/XL-style, not hours.- To apply Story Points to an Issue, open the Issue, click the Estimate dropdown in the right sidebar and click one of the values.## ForecastingTeams are asked for a high-level plan for multiple sprints that reflect expectation about what scope will be implemented, this forecast is referred to as a Release Plan.  One of the benefits of the relative nature of story point estimation is that it can be applied to Epics that are months into the future the same way they are applied to Stories with the only difference being the effort needed.  When estimating Epics teams extend the point value sequence, with the greater the point value indicating the lack of clarity of the scope.| Extended Point Values  | T-Shirt Sizing || ------------------- | -------------- || 30                  | Small          || 50                  | Medium         || 80                   | Large          || 130                  | X-Large        || 210                  | XX-Large       |## Capacity Planning (Intro)All too often, we fail to consider our capacity when we plan. Wed love to talk about it now, but we have a chicken and egg problem here. We cant talk about capacity planning without talking about the reports you use to figure out what your capacity actually is. So, read through this next section about reporting and then well talk about capacity planning...## Agile Reporting### BurndownBurndown reports show completion of work over time (from 100% to 0% remaining). ZenHub adds Burndown reports to GitHub. All you have to do is add Story Points to your Issues, assign your Issues to Milestones, and ZenHub will automatically generate Burndown charts for you.> ProTips:> - The diagonal line is your ideal, if youre below the line, youre ahead of schedule, above the line, youre behind.> - Notice that plateau? Thats a weekend. We expect work to pause on the weekends.### Filtered Burndown ChartsOn a big project? Use the Label dropdown to create custom Burndown charts for your Squad that you can bookmark.Things to note...- Every filter option you pick is added to the URL, that makes every custom view  bookmarkable and shareable- Add links to filtered burndown charts to your wiki- Create a burndown chart for defects by filtering on your defect label- The Burn Pipeline dropdown allows you to add additional pipelines (columns) to the burndown chart. If you have an automated build, but manual deployment process, this can let you see how much faster you could be done if you adopted Continuous Delivery Practices### VelocityAfter a few Sprints, add up the number of completed Story Points and divide by the number of Sprints. The average number of Story Points completed is called your Velocity. Use your average number of Story Points to determine how many Points to put in each Sprint moving forward. Understanding (and using) your Velocity is key to getting your Squad to predictability.ZenHub generates Velocity charts automatically. Youll find them under the Reports tab.Things to note...- By default, ZenHub looks at 10 Sprints; the 3 most recent open Sprints, and the 7 most recent closed Sprints.- Your average velocity is the purple line- You can remove a Sprint from the Velocity chart by unchecking it in the table below the chart (you might want to do this for Sprints that happen around major holidays)- You can filter the Velocity chart just like the burndown chart by picking one or more Labels from the Label drop-down.> ProTip: Look at the chart above. The average Velocity for this project is a little over 30 Story Points per Sprint and yet theyve added 193 Story Points to the Sprint. The Velocity chart is a great way to spot overcommiting. Overcommitting is a big problem that negatively impacts morale, causes lost revenue, and prevents teams from becoming predictable.### Release Reports (aka Burnup)Release Reports show completion of work over time (from 0% to 100% complete). ZenHub adds Release Reports to GitHub (which are also commonly called Burnup charts). All you have to do is add Story Points to your Issues, assign your Issues to a Release, and ZenHub will automatically generate Burndown charts for you.- First, go to the Reports tab and click on Release Reports- Create a new Release Report, enter the start and end date, and fill in the description- Go to your Board- Filter your board to see the issues you want to add to a Release Report- Use multi-select to add the issues your Release Report> ProTip: ZenHub allows you to select up to fifty Issues at a time. Its often best to filter by Sprint + Squad + another label to work through adding all of your issues.> ProTip: Do not build a release during the release. Build your releases before the start date of the release. There is a scope creep algorithm baked into Release Reports that will skew the predicted end date dramatically. Youll still be able to use the burn up chart, but the predicted end date will be off if you build a release report while the release is already underway...## Capacity PlanningAll too often, we fail to consider our capacity when we plan and track our work. To ensure you have a balanced budget, where your Squads are primed for success on their missions, you must do your capacity planning based on real world data. Aha provides a capacity indicator for the Quarter, and an out of scope indicator based on points. ZenHub provides real world execution-based data in your Velocity reports. Heres how you use all of this to help you better understand and plan for the capacity your Squads have.Before you begin:- Most teams have _invisible work_, work that isnt being tracked along with the work youve planned  - This can be Technical Foundation, Dedicated Deployments, etc  - Nine times out of ten, invisible work is the reason our planned goals arent met  - Retrospectives are used to bring invisible work to the surface- If you dont track all of your work, you cannot understand your capacity  - When in doubt, track it (this means opening an Issue, assigning a quick estimate, adding it to a milestone, and assigning it to a person)Once you have a handle on all of the work youre actually doing, you can start capacity planning using features in Aha and ZenHub.> Chicken and Egg Problem>> Again, we have a chicken and egg problem. You cant plan your capacity for a Quarter until you have at least a rough idea about what you can accomplish within a Quarter. When in doubt, be conservative in your estimates.### ZenHub- Bring up your Velocity report for the _whole team_- Add up a Quarters worth of points- Deduct 25%- Use that number of points as your Quarterly Capacity### Aha- Ensure that capacity tracking by Points is enabled for your Product (found under Settings for your Product)- Add your Quarterly Capacity in Points to each of your Quarterly Release Targets- Hold a [Planning Poker](#planning-poker) session and add a Forecasting Estimate to each Epic- You can then see whether or not you are under/over budget for your capacity.  - The bar at the top is the total number of points in the Release Target  - If it is all blue, you are under capacity, anything in red is over capacity  - Aha will automatically draw a red line in your column to show you what work cannot be contained within the Quarter  - Aha will automatically recalculate the capacity limit line if you reprioritize by dragging and dropping cards## People, not robots...Remember, we are people, not robots. Stop and consider the human impact of overcommitting. If we are to continue this pace indefinitely, we need to ensure our Squad Members do not burn out. Taking your capacity in mind when planning is key to ensuring a productive organization.## Person Month EstimatesWe get it. From time to time, teams will be asked for Person Month sizings for things like allocating headcount or long term forecasting. Thankfully, you can quickly and easily translate your group-based estimates in Points to Person Months. Even better, by using real-world data, based on work youve completed, your estimates will be meaningful rather than just a guess. Better still, you dont have to worry about overhead because your points are about what youve actually delivered! Overhead, keeping the lights on, fixing bugs, its already covered in your Velocity. Awesome.> ProTip> Its vital that you have been practicing group-based estimation for a few Sprints otherwise you wont be able to provide meaningful data. Please read through this _entire_ page before moving forward.- First youll need to know how many Weeks per Sprint (e.g. 2 Weeks per Sprint)- Next youll need to know how many people you have (e.g. 90 People)- Finally, youll need to know your Product Teams Velocity. (e.g. 528 Points)  - Use ZenHub Reports to determine your Product Team Velocity (your average over the last 3 or more Sprints)  - Since youre dealing with very high-level planning, and since Velocity varies from Squad to Squad, its best to do this at the Product level. If you know _which Squad_ will implement your long term work, this also works at the Squad level.- Divide your Product Team Velocity by the number of weeks per Sprint, then multiple by four  - This converts from Points per Sprint to Points per Month- Divide the number of Points per Month by the number of People  - This tells you how many Points equals one Person MonthSo, with these example numbers, 1 Person Month to deliver 11.75 Points.You can then calculate the Person Month equivalents per Point value (.08PM to deliver 1 Point, .17PM to deliver 2 Points, .25PM to deliver 3 Points, etc.). [Heres a handy Spreadsheet that you can use.](https://ibm.box.com/s/suxnji0ametxzl6zyrxq7q427rxzk16a){:target=_blank}Once you have approximate Person Month numbers for each point value you use, add them to your [table of completed work.](#table)Wait a second, thats _far too simplistic_, right? Shouldnt we really come up with a complex formula that does a better job of dealing with the variations seen from Squad to Squad and...Yes yes, we went down that path first. We did the math, worked various formulas through a number of Squads and Product Teams, compared different multipliers to address all kinds of variables until one of us noticed that all of the super complex things we tried were within 5% of this _much_ simpler solution.So, yeah, we were overthinking it.Keep it simple. This very easy solution is close enough for these kinds of exercises.So, go about your business. Keep estimating as a group using Points and use this to answer the Person Month questions when they come up...> ProTip> Only ever use Person Months for very high level planning, do not use it for your day to day execution. It will be wrong since Velocity varies from Sprint to Sprint.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/play-by-play/estimates-and-reports/",
    },
    {
      "title": "Process Acceleration",
      "text": "---title: Process Acceleration---# THIS IS GITHUB/ZENHUB CENTRIC - NEEDS REWRITE FOR AHA->JIRA->CONFLUENCE->GITHUBWhile we always strive to start with the minimum viable process possible, sometimes we get it wrong. It doesnt matter where you are in your projects timeline, theres never a bad time to look at improving your processes (no matter what the process is). To help you, were bringing techniques used in Lean Manfuacturing and adapting them to Software Development.> Keeping it simple> We freely admit that were simplifying a number of things here to help teams get going with these practices. Dont sweat the small stuff, you can get [deeper and more complex](https://www.safaribooksonline.com/search/?query=value%20stream%20mapping){:target=_blank} when youre comfortable with each of these practices...## Value Stream MappingValue Stream Maps are created by documenting an as-is process and then designing a to-be process. You then use the to-be process as a goal to guide continuous improvement efforts.While Value Stream Mapping can be applied to any process, were going to focus on three slices of time. Lead Time, Cycle Time, and Process Time. Were going to use the decades-old Lean Manufacturing derived definitions here. Were also going to tailor our language to GitHub terms (because thats where we all work).## Lead Time, Cycle Time, Process Time### Lead Time- Lead Time is the time between the work being defined and the work being live in Production- In GitHub, this is the elapsed time between New Issue and Closed (Assuming Closed == Production)- Lead Time is what the Customer experiences### Cycle Time- Cycle Time is the time between the work starting and being live in Production- Cycle Time is what the Product Team Experiences### Process Time- Process Time is the time between the work starting and being ready to deploy- Process Time is what the Squad Member experiences (when theres a handoff to deploy)If our highest priority is to satisfy our customers through the early and continutous delivery of valuable software, then we must focus on shrinking the amount of time it takes new work to be delivered. Now its time to measure and improve...## Measure and Improve- As a Team, design some experiments to shrink the amount of time work stays in each state.- As a Team, measure and review your Lead Time regularly- As a Team, define an Emergency Lead Time Goal and a Typical Lead Time Goal.### As IsAs a Team, review the end to end process you want to improve. Create a bar chart that tracks the amount of time work spends in each state of your process.![As-Is Value Stream Map](https://pages.github.ibm.com/watson-health-playbook/resources/images/agile/play-by-play/value-stream-mapping/as-is-lead-time.png)### To BeAs a Team, set some goals you want to achieve with your current process.  Create a bar chart that tracks the amount of time work spends in each future state of your process.![To-Be Value Stream Map](https://pages.github.ibm.com/watson-health-playbook/resources/images/agile/play-by-play/value-stream-mapping/to-be-lead-time.png)The first time you do this, youll likely focus on shrinking the amount of time work stays in each phase. As you mature, you can work on actually changing the process through automation and improvement and thereby improving the value stream.Remember, Experiment, Measure, Repeat.> Examples> As a Squad Member, I can turn around an emergency fix and push it into production before the end of the day> As a Product Team, we can deliver a New Idea into production the same Sprint we complete the workRemember, the only way to meet customer needs is to ensure that Lead Time is the concern of everyone…## Mining ZenHub for DataIf you noticed that the Lead / Cycle / Process Time charts looked like they were pulled from columns in a ZenHub board, you were right. We have scripts that can pull the data out of ZenHub and then get you to the point where you can easily create these charts in Excel.Theres an GitHub Enterprise organization devoted to GitHub User Scripts, grab the [Issue Scripts](https://github.ibm.com/github-user-scripts/issue-scripts){:target=_blank} from there.> Signs of Success> - Work moves from Thought to Production faster than it once did> - You see improvements in Lead / Cycle / Process Time after you measure again the next quarter> - Squad Members are involved in Deployment> - Product Teams regularly measure and report on Lead / Cycle / Process Time",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/play-by-play/process-acceleration/",
    },
    {
      "title": "Product Grooming",
      "text": "---title: Product Grooming---# THIS IS GITHUB/ZENHUB CENTRIC - NEEDS REWRITE FOR AHA->JIRA->CONFLUENCE->GITHUBEvery week, the Product Leadership team comes together for Continuous Product Grooming. Heres the flow: Describe Size (within one week) Prioritze Repeat> Who: Offering Manager, Development Leader, Design Leader, Architect - Squad Leaders attend only when they are blocked> When: Preferably Daily, but at least weekly## Describe (10 Minutes)- The Offering Manager brings the list of new Ideas / Epics / Hills- Each item must have Acceptance Criteria so that the Product Leadership Team doesnt waste time debating what things mean- They review each item with the Product Leadership Team- The Product Leadership team asks questions, provides feedback, any concerns are written down in the Aha item- This exercise is time-boxed to 1 minute per idea, maximum of 10 minutes.## Size (10 minutes)- The Development Leader reviews the sizing done for each item- The Product Leadership team asks questions, provides feedback, any concerns are written down in the Aha item- Agreed upon Sizing is added to the Aha item- Ideas are promoted to Epic status- The Development Leader, Design Leader, and Architect take the list of new items back to the Squads and run Planning Poker Sessions. The output of those sessions will be reviewed at the next Product Grooming Session## Prioritize (10 minutes)- The Product Leadership team prioritizes the sized Epics and assigns them to the appropriate Quarter in Aha- If the Epic is going to be worked on in the next Quarter, send it to ZenHub and have the Squads start deconstructing the work.## Repeat- If you cant get through all of the items that need to be reviewed, schedule another Product Grooming Session for the next day, do not extend the meeting.- Forcing the time-boxing will prevent the Product Leadership Team from getting into the weeds.> Signs of Success>  Squads have the information they need to understand their work.>  Product Leadership Team is able to adjust priorities continuously to react to changes in the market>  Offering Management, Design, and Engineering are on the same page.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/play-by-play/product-grooming/",
    },
    {
      "title": "Retrospectives",
      "text": "---title: Retrospectives---On the last day of the Sprint, hold a Demo, a Retrospective, then Plan your next Sprint> Who: Each Squad> When: Last Day of the Sprint> Get started with this  [(3 minute video)](http://agileacademy.w3ibm.mybluemix.net/standalone/retrospective/){:target=_blank} from the IBM Agile Academy about how to run a RetrospectiveRetrospectives are a key Agile practice that, when practiced well, help a Squad gain the ability to make their own lives better. There are a variety of ways to run retrospectives, heres a popular format to use. On a regular basis, get together with your Squad and ask yourself:     What has gone well?     What hasnt gone well?     What are some experiments we can try to make things better? Make sure people own and actually try the experiments. Repeat, every few weeks.Hold your retrospective after your End of Sprint Demo and before you plan for you next Sprint.## Tools for Distributed RetrospectivesIf a Squad isnt co-located, or you want to hold a Whole Team / End of Project Retrospective, youll have a much easier time using one of the following tools...### Slack[Slack](http://ibm-watsonhealth.slack.com){:target=_blank} is a non-obvious choice but actually works incredibly well, _especially for large, distributed teams_.- Use the channel that your Squad/Product/Project already uses- Timebox your Retrospective (an hour for a Squad, a day for a large group)- Divide the chat into sections using Slack Threads to keep the Retrospective focused  - Working Well Section:    ```> :thumbsup:  Working Well```    ```> Please list things that have been working well, they can be technical, process, cultural, nearly anything at all. Use reactions ( :thumbsup: / :thumbsdown: / :clap: / etc) to show how you feel about anything in this section. Try and use complete sentences so that we can look back and understand everything clearly...```  - Things that didnt work well:    ```> :thumbsup:  Working Well```    ```> Please list things that have been working well, they can be technical, process, cultural, nearly anything at all. Use reactions ( :thumbsup: / :thumbsdown: / :clap: / etc) to show how you feel about anything in this section. Try and use complete sentences so that we can look back and understand everything clearly...```  - Experiments you can try:    ```> :alembic:  Experiments```    ```> Please list some experiments the team can try that you feel could make things better. Reference items from the feedback already captured and well use reactions ( :thumbsup: / :thumbsdown: ) to vote on which of the experiments the team will try. Try and use complete sentences so that we can look back and understand everything clearly...```- Use 👍 and 👎 to provide rough counts for how many people agree/disagree- Use the counts to determine where to focus your experiments- Use @mentions to assign owners, and transfer your experiments to GitHub for execution...> ProTip:> Start the Slack Threads yourself and monitor the channel during the duration of the Retrospective. Youll want to encourage people to contribute to the threads so that the content is compact, easy to find, and helpful.### MURAL[MURAL](http://mural.ly){:target=_blank} is the obvious choice for running distributed retrospectives, but can be challenging for those that are not familiar with it.- Divide your board into three columns- Drag and drop stickies into the appropriate columns- Group together, look for patterns- Use voting to decide which experiments to try first### GitHub[GitHub](http://github.ibm.com){:target=_blank} is the place to track your experiments. Treat improvement as part of your ongoing work.And remember, you dont have to hold a retrospective to improve. Every single one of us can (and should) be asking ourselves how can we get better? every single day...> Signs of Success>  Squads that hold Retrospectives regularly build a culture of Continuous Improvement>  Squad Members are happier when they can make their own lives better>  Squads that improve their own lives become examples for others to do the same",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/play-by-play/retrospectives/",
    },
    {
      "title": "Sprint Planning",
      "text": "---title: Sprint Planning---# THIS IS GITHUB/ZENHUB CENTRIC - NEEDS REWRITE FOR AHA->JIRA->CONFLUENCE->GITHUBOn the last day of the Sprint, hold a Demo, a Retrospective, then Plan your next Sprint> Who: Each Squad> When: Last Day of the Sprint> Get started with this  [(4 minute video)](http://agileacademy.w3ibm.mybluemix.net/standalone/iteration_planning/){:target=_blank} from the IBM Agile Academy about how to Plan for your next SprintAgile doesnt mean we dont plan. Offering Managers do an incredible amount of work to discover and define what we should build. Roadmaps are created that help guide us to our destination.Sprint planning is our GPS to get us there and deal with the roadblocks along the way.- Before each Sprint starts, look at what you accomplished last Sprint and assign a similar amount of work to your upcoming Sprint.- Estimation tools like [Story Points in Zenhub](estimates-and-reports) allow you to apply T-Shirt style sizing to your work.- Ensure you have a multi-disciplinary view of your Sprint. Everyone on your Squad attends and helps guide.> ProTip: Theres immense value in holding these three ceremonies on the _last day of the Sprint_ because it sets up a psychological line in the sand that helps our Squad members feel Done. This may sound trivial, but there have been long term studies that show that the best way to motivate people is by facilitating progress and enabling small wins. See: [The Progress Principle](https://www.safaribooksonline.com/library/view/the-progress-principle/9781422142738/){:target=_blank}Remember, Continuous Improvement is what we strive for...> Signs of Success>  Squads that plan for each Sprint have less re-work, get interrupted less, and get things done>  Squads that plan consistently become predictable. Predictable Squads are valued higher in the organization",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/play-by-play/sprint-planning/",
    },
    {
      "title": "Squad Backlog Grooming",
      "text": "---title: Squad Backlog Grooming---# THIS IS GITHUB/ZENHUB CENTRIC - NEEDS REWRITE FOR AHA->JIRA->CONFLUENCE->GITHUBAn Epic thats been assigned to the Squad must be broken down into [User Stories](../ongoing-delivery/hills-epics-stories-usecases#stories), estimated, and prioritized.> Who: Every Squad> When: Every Afternoon## Running the SessionDuring the session, the Squad will: Review new Epics assigned them from their Leadership Teams Refines the Epics into Stories and/or additional Epics Adds detail to the Stories Estimates the Stories in points## Estimate effort with PointsAll too often, teams skip estimating how much effort and risk is involved in the things they have to do. This results in teams being asked to do (or teams taking on) more than they can handle. To help everyone understand what is achievable, we create Story Point estimates.Story Points are used to express the effort required by the squad to deliver a fully implemented item from the backlog(Epic, Story,Issue). Story Points are a relative estimate, meaning a story that is assigned a 2 should be twice the effort of a story assigned 1 and two-thirds the effort of a story estimated at 3.There are several ways to get started with Story Points, a team can work together and determine what the smallest story that they would track and establish that as a 1. For squads accustomed to using T-Shirt sizing Watson teams can map the Point values (typically using the Fibonacci sequence) in [ZenHub](/tools/zenhub) to T-Shirt sizing:| Point Values  | T-Shirt Sizing || ------------------- | -------------- || 1                   | XX-Small       || 2                   | X-Small        || 3                   | Small          || 5                   | Medium         || 8                   | Large          || 13                  | X-Large        || 21                  | XX-Large       |When estimating stories, remember to work out of the backlog. It will take a few Sprints to understand exactly how much can be fit in a Sprint safely.## ForecastingTeams are asked for a high-level plan for multiple sprints that reflect expectation about what scope will be implemented, this forecast is referred to as a Release Plan.  One of the benefits of the relative nature of story point estimation is that it can be applied to Epics that are months into the future the same way they are applied to Stories with the only difference being the effort needed.  When estimating Epics teams can extend the point value  sequence, with the greater the point value indicating the lack of clarity of the scope.| Extended Point Values  || ------------------- || 30                  || 50                  || 80                  || 130                 || 210                 |## Planning Poker### How to run a Planning Poker Meeting [(4 minute video)](http://agileacademy.w3ibm.mybluemix.net/standalone/planning_poker/){:target=_blank}Planning poker is a consensus-based, gamified technique for estimating, mostly used to estimate effort or relative size of development goals in software development. Members of the group make estimates by playing numbered cards face-down to the table, instead of speaking them aloud. The cards are revealed, and the estimates are then discussed. By hiding the figures in this way, the group can avoid the cognitive bias of anchoring, where the first number spoken aloud sets a precedent for subsequent estimates.- Its up to your Squad to determine what your sizings mean- You cant compare point values from one team to another team- As a group, set an estimate for every Issue opened.- Leverage your small group to help understand how much effort an Issue really is.[Plan on having the meeting at the end of each sprint.](agile-calendars/) Working out of the team backlog, the team lead reads the Story title and short description.  This should give the team the background they need to understand how big it feels.The team will vote together, so make sure you use a SIMPLE mechanism to capture the vote. You can even do this in Slack by pasting in the following and using the reactions to vote on each one.```“How many Story points?” “XX-Small” :sp-1: “X-Small” :sp-2: “Small” :sp-3: “Medium” :sp-5: “Large” :sp-8: “X-Large” :sp-13: “XX-Large” :sp-21:```If the team votes with consensus, move on to the next.  If consensus is not reached on the first vote, ask the outliers why they voted as they did and call for another vote.  Repeat a few times until you reach consensus.  If you can’t get close within three votes, move on and come back at the end (or call an “After Meeting”).To ensure that discussion is structured; the Moderator or the Offering Manager may at any point turn over the egg timer and when it runs out all discussion must cease and another round of poker is played.## Keep a table of completed workAfter a few Sprints, youll have some great examples of completed work and the point values you assigned. Build a table on your wiki and use that as a reference to make your estimation go even faster.| Point Values  | Issue || ------------------- | -------------- || 1                   | [[5479](agile/ongoing-delivery/squads-estimate-story-points#table)] As a Social Coder, I would like to have a description of the project so that I can be productive as quick as possible       || 2                   | [[5977](agile/ongoing-delivery/squads-estimate-story-points#table)] As a CTO, I want to see real-world examples of emerging technology success so that I can better envision how it can help me.        || 3                   | [[3433](agile/ongoing-delivery/squads-estimate-story-points#table)] When importing intents or entities, a line with commas but no data does not return an error in the store          || 5                   | [[8876](agile/ongoing-delivery/squads-estimate-story-points#table)] As a Watson Developer, I want the UI Kit to be consumable via a managed repository so that I can be sure which version my application uses         || 8                   | [[77876](agile/ongoing-delivery/squads-estimate-story-points#table)] As an academic user with an expired Trial account, I need to transition to a new account type so that I can continue Bluemixing          || 13                  | [[5633](agile/ongoing-delivery/squads-estimate-story-points#table)] As a CISO, I need to understand IBMs GDPR is so that I can make informed decisions about how I can help my organization adopt.        || 21                  | [[334](agile/ongoing-delivery/squads-estimate-story-points#table)] As a service owner, I must have a documented and tested DR solution so I can ensure I can recover from catastrophic failures       |> Signs of Success>  Squads that plan continuously, spend less time Planning overall, and there is less guesswork>  Squads that plan consistently become predictable. Predictable Squads are valued higher in the organization",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/play-by-play/squad-backlog-grooming/",
    },
    {
      "title": "Combo",
      "text": "---title: Combo---{% include_relative agile-calendars.md %}{% include_relative daily-standups.md %}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/play-by-play/test/",
    },
    {
      "title": "Whole Team Standup",
      "text": "---title: Whole Team Standup---# THIS IS GITHUB/ZENHUB CENTRIC - NEEDS REWRITE FOR AHA->JIRA->CONFLUENCE->GITHUB> Who: Squad Leaders> When: Every Week15 Minute Daily Standups are key to aligning our Squads and breaking bottlenecks on a daily basis. While Squads must be capable of owning a mission from thought to production, the whole team must come together on a regular cadence to align each of the Squads. This is called the Whole Team Standup and should happen at least once a week (Whole Team Standup is the modern name for a Scrum of Scrums).### Running the session- The Release Manager will typically run the Whole Team Standup- The Release Manager brings up the ZenHub Board and filters by:    - The current Sprint    - The current Squad- Each Squad Leader will then say:    - What closed this week    - What will be done next week    - List the blockers> ProTip: While it might not be obvious, it helps to assign your Epics to the current Sprint so you can use the Filter by this Epic button so you can quickly focus on the the work being done for that Epic. You can also use the Whole Team Standup to keep your board up to date...While your team can elect to have a Whole Team Standup as often as they see fit, once a week should be considered the minimum for anyone in Watson.> Signs of Success>  Squads have the information they need to understand their work.>  Blockers and dependencies are brought to light and can then be worked on.>  Offering Management, Design, and Engineering are on the same page.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/agile/play-by-play/whole-team-standup/",
    },
    {
      "title": "AC Review Action Plansidebar: dev-badbreadcrumb: AC Review Action Plan",
      "text": "---title: AC Review Action Plansidebar: dev-badbreadcrumb: AC Review Action Plan---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/ac-review-action-plan/",
    },
    {
      "title": "AC Review of Contribution Packagesidebar: dev-badbreadcrumb: AC Review of Contribution Package",
      "text": "---title: AC Review of Contribution Packagesidebar: dev-badbreadcrumb: AC Review of Contribution Package---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/ac-review-of-contribution-package/",
    },
    {
      "title": "Add Client Install to Distribution Logsidebar: dev-badbreadcrumb: Add Client Install to Distribution Log",
      "text": "---title: Add Client Install to Distribution Logsidebar: dev-badbreadcrumb: Add Client Install to Distribution Log---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/add-client-install-to-distribution-log/",
    },
    {
      "title": "Add to Service Catalogsidebar: dev-badbreadcrumb: Add to Service Catalog",
      "text": "---title: Add to Service Catalogsidebar: dev-badbreadcrumb: Add to Service Catalog---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/add-to-service-catalog/",
    },
    {
      "title": "Analytics & Informatics Impact Analysis Action Plansidebar: dev-badbreadcrumb: Impact Analysis Action Plan",
      "text": "---title: Analytics & Informatics Impact Analysis Action Plansidebar: dev-badbreadcrumb: Impact Analysis Action Plan---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/analytics-action-plan/",
    },
    {
      "title": "Analytics & Informatics Impact Analysissidebar: dev-badbreadcrumb: Analytics & Informatics Impact Analysis",
      "text": "---title: Analytics & Informatics Impact Analysissidebar: dev-badbreadcrumb: Analytics & Informatics Impact Analysis---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/analytics-and-informatics-impact-analysis/",
    },
    {
      "title": "Analytics and Informatics Initiate Methodology Guide White Papersidebar: dev-badbreadcrumb: Initiate Methodology Guide White Paper",
      "text": "---title: Analytics and Informatics Initiate Methodology Guide White Papersidebar: dev-badbreadcrumb: Initiate Methodology Guide White Paper---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/analytics-and-informatics-initiate-method-guide-white-paper/",
    },
    {
      "title": "Approve Design Inputsidebar: dev-badbreadcrumb: Approve Design Input",
      "text": "---title: Approve Design Inputsidebar: dev-badbreadcrumb: Approve Design Input---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/approve-design-input/",
    },
    {
      "title": "Approve Risk Analysissidebar: dev-badbreadcrumb: Approve Risk Analysis",
      "text": "---title: Approve Risk Analysissidebar: dev-badbreadcrumb: Approve Risk Analysis---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/approve-risk-analysis/",
    },
    {
      "title": "Approve Risk Management Reportsidebar: dev-badbreadcrumb: Approve Risk Management Report",
      "text": "---title: Approve Risk Management Reportsidebar: dev-badbreadcrumb: Approve Risk Management Report---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/approve-risk-management-report/",
    },
    {
      "title": "Architecture Reviewssidebar: dev-badbreadcrumb: Architecture Reviews",
      "text": "---title: Architecture Reviewssidebar: dev-badbreadcrumb: Architecture Reviews---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/architecture-reviews/",
    },
    {
      "title": "CDT ORB Reviewsidebar: dev-badbreadcrumb: CDT ORB Review",
      "text": "---title: CDT ORB Reviewsidebar: dev-badbreadcrumb: CDT ORB Review---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/cdt-orb-review/",
    },
    {
      "title": "Code Reviewssidebar: dev-badbreadcrumb: Code Reviews",
      "text": "---title: Code Reviewssidebar: dev-badbreadcrumb: Code Reviews---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/code-reviews/",
    },
    {
      "title": "Common Services Readiness Reviewsidebar: dev-badbreadcrumb: Common Services Readiness Review",
      "text": "---title: Common Services Readiness Reviewsidebar: dev-badbreadcrumb: Common Services Readiness Review---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/common-services-readiness-review/",
    },
    {
      "title": "Complete Secure Engineering Virus Scans (Each Sprint)sidebar: dev-badbreadcrumb: Secure Engineering Virus Scans (Each Sprint)",
      "text": "---title: Complete Secure Engineering Virus Scans (Each Sprint)sidebar: dev-badbreadcrumb: Secure Engineering Virus Scans (Each Sprint)---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/complete-sec-eng-virus-scans-impl/",
    },
    {
      "title": "Complete Secure Engineering Virus Scans (Staging)sidebar: dev-badbreadcrumb: Complete Secure Engineering Virus Scans (Staging)",
      "text": "---title: Complete Secure Engineering Virus Scans (Staging)sidebar: dev-badbreadcrumb: Complete Secure Engineering Virus Scans (Staging)---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/complete-sec-eng-virus-scans-staging/",
    },
    {
      "title": "Confirm SPRB Review Completedsidebar: dev-badbreadcrumb: Confirm SPRB Review Completed",
      "text": "---title: Confirm SPRB Review Completedsidebar: dev-badbreadcrumb: Confirm SPRB Review Completed---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/confirm-sprb-review-completed/",
    },
    {
      "title": "Create & Groom Stories (Define Design Output)sidebar: dev-badbreadcrumb: Create & Groom Stories",
      "text": "---title: Create & Groom Stories (Define Design Output)sidebar: dev-badbreadcrumb: Create & Groom Stories---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/create-groom-stories-design-output/",
    },
    {
      "title": "Create Risk Management Plansidebar: dev-badbreadcrumb: Risk Management Plan",
      "text": "---title: Create Risk Management Plansidebar: dev-badbreadcrumb: Risk Management Plan---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/create-risk-management-plan/",
    },
    {
      "title": "Database Reviewssidebar: dev-badbreadcrumb: Database Reviews",
      "text": "---title: Database Reviewssidebar: dev-badbreadcrumb: Database Reviews---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/database-reviews/",
    },
    {
      "title": "Demo to Sponsorssidebar: dev-badbreadcrumb: Demo to Sponsors",
      "text": "---title: Demo to Sponsorssidebar: dev-badbreadcrumb: Demo to Sponsors---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/demo-to-sponsors/",
    },
    {
      "title": "Design Input Detailed Requirementssidebar: dev-badbreadcrumb: Design Input Detailed Requirements",
      "text": "---title: Design Input Detailed Requirementssidebar: dev-badbreadcrumb: Design Input Detailed Requirements---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/design-input-detailed-req/",
    },
    {
      "title": "Design Transfer Design Reviewsidebar: dev-badbreadcrumb: Design Transfer Design Review",
      "text": "---title: Design Transfer Design Reviewsidebar: dev-badbreadcrumb: Design Transfer Design Review---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/design-transfer-design-review/",
    },
    {
      "title": "Document & Approve Design History Filesidebar: dev-badbreadcrumb: Document & Approve Design History File",
      "text": "---title: Document & Approve Design History Filesidebar: dev-badbreadcrumb: Document & Approve Design History File---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/doc-and-approve-design-history-file/",
    },
    {
      "title": "Document & Approve Device History Recordsidebar: dev-badbreadcrumb: Document & Approve Device History Record",
      "text": "---title: Document & Approve Device History Recordsidebar: dev-badbreadcrumb: Document & Approve Device History Record---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/doc-and-approve-device-history-record/",
    },
    {
      "title": "Document & Approve Device Master Recordsidebar: dev-badbreadcrumb: Document & Approve Device Master Record",
      "text": "---title: Document & Approve Device Master Recordsidebar: dev-badbreadcrumb: Document & Approve Device Master Record---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/doc-and-approve-device-master-record/",
    },
    {
      "title": "Document & Approve Pre-execution V&V Test Protocolssidebar: dev-badbreadcrumb: Document & Approve Pre-execution V&V Test Protocols",
      "text": "---title: Document & Approve Pre-execution V&V Test Protocolssidebar: dev-badbreadcrumb: Document & Approve Pre-execution V&V Test Protocols---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/doc-and-approve-pre-exe-v-and-v-test-protocols/",
    },
    {
      "title": "Document & Approve Production Build Standardsidebar: dev-badbreadcrumb: Document & Approve Production Build Standard",
      "text": "---title: Document & Approve Production Build Standardsidebar: dev-badbreadcrumb: Document & Approve Production Build Standard---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/doc-and-approve-prod-build-standard/",
    },
    {
      "title": "Document & Approve Servicing Work Instructionssidebar: dev-badbreadcrumb: Document & Approve Servicing Work Instructions",
      "text": "---title: Document & Approve Servicing Work Instructionssidebar: dev-badbreadcrumb: Document & Approve Servicing Work Instructions---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/doc-and-approve-servicing-work-instructions/",
    },
    {
      "title": "Document and Approve Validation Build Standardsidebar: dev-badbreadcrumb: Document and Approve Validation Build Standard",
      "text": "---title: Document and Approve Validation Build Standardsidebar: dev-badbreadcrumb: Document and Approve Validation Build Standard---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/doc-and-approve-validation-build-standard/",
    },
    {
      "title": "Document System Architecture Specificationsidebar: dev-badbreadcrumb: Document System Architecture Specification",
      "text": "---title: Document System Architecture Specificationsidebar: dev-badbreadcrumb: Document System Architecture Specification---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/doc-system-arch-spec/",
    },
    {
      "title": "Document Verification and Validation Plansidebar: dev-badbreadcrumb: Document V&V Plan",
      "text": "---title: Document Verification and Validation Plansidebar: dev-badbreadcrumb: Document V&V Plan---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/doc-v-and-v-plan/",
    },
    {
      "title": "Document V&V Summary Reportsidebar: dev-badbreadcrumb: Document V&V Summary Report",
      "text": "---title: Document V&V Summary Reportsidebar: dev-badbreadcrumb: Document V&V Summary Report---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/doc-v-and-v-summary-report/",
    },
    {
      "title": "Ensure Suppliers are on Approve Suppliers Listsidebar: dev-badbreadcrumb: Ensure Suppliers are on Approve Suppliers List",
      "text": "---title: Ensure Suppliers are on Approve Suppliers Listsidebar: dev-badbreadcrumb: Ensure Suppliers are on Approve Suppliers List---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/ensure-suppliers-are-on-approved-suppliers-list/",
    },
    {
      "title": "Execute Install Verification Testssidebar: dev-badbreadcrumb: Execute Install Verification Tests",
      "text": "---title: Execute Install Verification Testssidebar: dev-badbreadcrumb: Execute Install Verification Tests---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/execute-install-verification-tests/",
    },
    {
      "title": "External (3rd Party) Penetration Testingsidebar: dev-badbreadcrumb: External Penetration Testing",
      "text": "---title: External (3rd Party) Penetration Testingsidebar: dev-badbreadcrumb: External Penetration Testing---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/external-penetration-testing/",
    },
    {
      "title": "Fina Check to ensure all tools are Assessed & Validatedsidebar: dev-badbreadcrumb: Ensure Tools are Assessed and Validated",
      "text": "---title: Fina Check to ensure all tools are Assessed & Validatedsidebar: dev-badbreadcrumb: Ensure Tools are Assessed and Validated---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/final-check-all-tools-assessed-and-validated/",
    },
    {
      "title": "Final Health Check and Vulnerability Scanssidebar: dev-badbreadcrumb: Final Health Check and Vulnerability Scans",
      "text": "---title: Final Health Check and Vulnerability Scanssidebar: dev-badbreadcrumb: Final Health Check and Vulnerability Scans---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/final-health-check-vulnerability-scans/",
    },
    {
      "title": "Final Review & Approval of Install Verification Protocol Execution Recordssidebar: dev-badbreadcrumb: Final Install Verification Record Approval",
      "text": "---title: Final Review & Approval of Install Verification Protocol Execution Recordssidebar: dev-badbreadcrumb: Final Install Verification Record Approval---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/final-review-and-approval-of-install-ver-protocol-exe-records/",
    },
    {
      "title": "Final SRPB Board Reviewsidebar: dev-badbreadcrumb: Final SRPB Review",
      "text": "---title: Final SRPB Board Reviewsidebar: dev-badbreadcrumb: Final SRPB Review---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/final-sprb-board-review/",
    },
    {
      "title": "Gather SecOps Evidencesidebar: dev-badbreadcrumb: Gather SecOps Evidence",
      "text": "---title: Gather SecOps Evidencesidebar: dev-badbreadcrumb: Gather SecOps Evidence---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/gather-sec-ops-evidence/",
    },
    {
      "title": "IBM Cloud Framework Reviewsidebar: dev-badbreadcrumb: IBM Cloud Framework Review",
      "text": "---title: IBM Cloud Framework Reviewsidebar: dev-badbreadcrumb: IBM Cloud Framework Review---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/ibm-cloud-framework-review/",
    },
    {
      "title": "Implement Stories (Begin Sprints)sidebar: dev-badbreadcrumb: Implement Stories",
      "text": "---title: Implement Stories (Begin Sprints)sidebar: dev-badbreadcrumb: Implement Stories---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/implement-stories/",
    },
    {
      "title": "Build and Deliversidebar: dev-badbreadcrumb: Build and Deliver (Dev)",
      "text": "---title: Build and Deliversidebar: dev-badbreadcrumb: Build and Deliver (Dev)---# DRAFT (Coming Soon!)Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Build and Deliver phase tasks relevant to Development_- _Hover OVER the task to see who OWNS the task_- _Tasks marked with a GxP Only label can be skipped for non-regulated offerings_- _Tasks marked with a CS Only label can be skipped for offerings that are NOT common services_                  svg {          background-image: url(https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/flows/vs-build-and-deliver-dev.jpg);          background-size: 100% 100%;          background-repeat: no-repeat;          max-width: 900px;          width: 90%;        }        path {          fill: transparent;          cursor: pointer;          transition: fill 0.2s;        }        svg a:focus,        svg a:hover {          outline: none;        }        svg a:focus path,        svg a:hover path {          fill: rgba(255,255,0, 0.15);          cursor: pointer;       }                            OWNER: Project Manager - Initialize New Analytics Project Charter                                    OWNER: Project Manager - Create Risk Management Plan                                    OWNER: Offering Manager - Submit list of suppliers                                    OWNER: Tools Team - Submit list of tools                                    OWNER: Dev Lead - Start Contribution Package                                    OWNER: Architect - User Requirements Specification                                    OWNER: Offering Manager - Project Kick-Off                                                          OWNER: Offering Manager - See Begin Monthly Reviews                                    OWNER: Architect - WHCT CoC Team Review                                    OWNER: Dev Lead - Confirm SPRB Review Completed                                    OWNER: Dev Lead - CDT ORB Review                                    OWNER: Operations - Create or Provision CDT Environment                                    OWNER: Architect - Design Input Detailed Requirements                                    OWNER: Project Manager - Approve Design Input                                    OWNER: Architect - Send HL-SL-DL to Dev                                    OWNER: Architect - Document System Architecture Specification                                    OWNER: Project Manager - Start Recording Risk Analysis                                    OWNER: Architect - Planning Requirements Design Review                                    OWNER: Test Lead - Document Verification and Validation Plan                                    OWNER Dev Lead - Create-Groom Stories (Define Design Output)                                    OWNER: Dev Lead - Implement Stories                                    OWNER: Architect - Review and Approve Design Output                                    OWNER: Test Lead - Testing                                    OWNER: Dev Lead - Code Reviews                                    OWNER: Security Lead - Complete Secure Engineering Virus Scans (Code Scans)                                    OWNER: Architect - Database Reviews                                    OWNER: Architect - Architecture Reviews                                    OWNER: Test Lead - Document and Approve Validation Build Standard                                    OWNER: Operations - Install Build to Formal V&V                                    OWNER: Test Lead - Review and Approval of Install Verification Protocol Execution Records                                    OWNER: Test Lead - Document and Approve Pre-Execution V&V Test Protocols                                    OWNER: Test Lead - V&V Readiness Design Review                                    OWNER: Test Lead - V&V Test Execution                                    OWNER: Test Lead - Review and Approve V&V Test Protocol Execution Records                                    OWNER: Test Lead - Document V&V Summary Report                                    OWNER: Dev Lead - Analytics and Informatics Impact Analysis                                    OWNER: Project Manager - Analytics and Informatics Impact Analysis Action Plan                                    OWNER: Architect - AC Review of Contribution Package                                    OWNER: Project Manager - AC Review Action Plan                                    OWNER: Dev Lead - Staging ORB Review                                    OWNER: Operations - Promote Offering to Staging                                    OWNER: Dev Lead - Demo to Sponsors                                    OWNER: Project Manager - Lessons Learned Retrospective                                    OWNER: Security Lead - Complete Secure Engineering Virus Scans (Staging Environment)                                    OWNER: Dev Lead - Release Readiness Review                                    OWNER: Test Lead - Integration Testing                                    OWNER: Operations - External Penetration Testing on Staging                                    OWNER: Security Lead - Gather SecOps Evidence                                    OWNER: Security Lead - Final Health Check Vulnerability Scans                                    OWNER: Dev Lead - Support Training (L1 L2 L3)                                    OWNER: Architect - IBM Cloud Framework Review                                    OWNER: Compliance - HIPAA Evidence Closure                                    OWNER: Compliance - GDPR Evidence Closure                                    OWNER: Compliance - Final Validate Information Gov Catalog                                    OWNER: Dev Lead - Analytics and Informatics Initiate Methodology Guide and White Paper                                    OWNER: Compliance - PSRA Evidence Closure                                    OWNER: Dev Lead - Common Services Readiness Review                                    OWNER: Operations - Operational Readiness Checkpoint                                    OWNER: Architect - Final SPRB Review                                    OWNER: Test Lead - Validate all Data Approvals Received                                    OWNER: Project Manager - Approve Risk Analysis                                    OWNER: Project Manager - Approve Risk Management Report                                    OWNER: Tools Team - Update Tools List and Versions                                    OWNER: Projet Manager - Design Transfer Design Review                                    OWNER: Project Manager - Document and Approve Production Build Standard                                    OWNER: Project Manager - Document and Approve Device Master Record                                    OWNER: Test Lead - Final Review and Approval of Install Verification Protocol Execution Records                                    OWNER: Project Manager - Document and Approve Servicing Work Instructions                                    OWNER: Project Manager - Document and Approve Device History Record                                    OWNER: Project Manager - Document and Approve Design History File                                    OWNER: Tools Team - Final Check - Ensure all tools are assessed                                    OWNER: Dev Lead - Release Readiness Design Review                                    OWNER: Project Manager - Add Client Install to Distribution Log                                    OWNER: Project Manager - Product and Document Identified Risks                                    OWNER: Project Manager - Ensure Suppliers are on Approved Suppliers List                                    OWNER: Operations - Release Stories to Production                                    OWNER: Test Lead - Execute Install Verification Tests                                    OWNER: Operations - Add to Service Catalog                                    OWNER: Operations - Refresh Catalog                                    OWNER: Offering Manager - Launch Readiness                                    OWNER: Operations - Release Stories to Customer                                                          Back to main flow                                    OWNER: Offering Manager - Discuss Portfolio                                    OWNER: Offering Manager - Prioritize Detailed Level Requirements                                    OWNER: Offering Manager - 4 week ask-commit process                    ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/index/",
    },
    {
      "title": "Initialize New Analytics Project Chartersidebar: dev-badbreadcrumb: New Analytics Project Charter",
      "text": "---title: Initialize New Analytics Project Chartersidebar: dev-badbreadcrumb: New Analytics Project Charter---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/initialize-new-analytics-project-charter/",
    },
    {
      "title": "Install Build to Formal V&Vsidebar: dev-badbreadcrumb: Install Build to Formal V&V",
      "text": "---title: Install Build to Formal V&Vsidebar: dev-badbreadcrumb: Install Build to Formal V&V---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/install-build-to-formal-v-and-v/",
    },
    {
      "title": "Integration Testingsidebar: dev-badbreadcrumb: Integration Testing",
      "text": "---title: Integration Testingsidebar: dev-badbreadcrumb: Integration Testing---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/integration-testing/",
    },
    {
      "title": "L1, L2 and L3 Support Training sidebar: dev-badbreadcrumb: Support Training",
      "text": "---title: L1, L2 and L3 Support Training sidebar: dev-badbreadcrumb: Support Training---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/l1-l2-l3-training/",
    },
    {
      "title": "Lessons Learned Retrospectivesidebar: dev-badbreadcrumb: Lessons Learned Retrospective",
      "text": "---title: Lessons Learned Retrospectivesidebar: dev-badbreadcrumb: Lessons Learned Retrospective---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/lessons-learned-retrospective/",
    },
    {
      "title": "Operational Readiness Checkpointsidebar: dev-badbreadcrumb: Operational Readiness Checkpoint",
      "text": "---title: Operational Readiness Checkpointsidebar: dev-badbreadcrumb: Operational Readiness Checkpoint---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/operational-readiness-checkpoint/",
    },
    {
      "title": "Planning Requirements Design Reviewsidebar: dev-badbreadcrumb: Planning Requirements Design Review",
      "text": "---title: Planning Requirements Design Reviewsidebar: dev-badbreadcrumb: Planning Requirements Design Review---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/planning-req-design-review/",
    },
    {
      "title": "Product & Document Identified Riskssidebar: dev-badbreadcrumb: Product & Document Identified Risks",
      "text": "---title: Product & Document Identified Riskssidebar: dev-badbreadcrumb: Product & Document Identified Risks---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/product-and-doc-identified-risks/",
    },
    {
      "title": "Promote Offering to Stagingsidebar: dev-badbreadcrumb: Promote Offering to Staging",
      "text": "---title: Promote Offering to Stagingsidebar: dev-badbreadcrumb: Promote Offering to Staging---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/promote-offering-to-staging/",
    },
    {
      "title": "Create and/or Provision CDT Environmentsidebar: dev-badbreadcrumb: Provision CDT Environment",
      "text": "---title: Create and/or Provision CDT Environmentsidebar: dev-badbreadcrumb: Provision CDT Environment---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/provision-cdt-environment/",
    },
    {
      "title": "Refresh Catalogsidebar: dev-badbreadcrumb: Refresh Catalog",
      "text": "---title: Refresh Catalogsidebar: dev-badbreadcrumb: Refresh Catalog---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/refresh-catalog/",
    },
    {
      "title": "Release Readiness Design Reviewsidebar: dev-badbreadcrumb: Release Readiness Design Review",
      "text": "---title: Release Readiness Design Reviewsidebar: dev-badbreadcrumb: Release Readiness Design Review---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/release-readiness-design-review/",
    },
    {
      "title": "Release Readiness Reviewsidebar: dev-badbreadcrumb: Release Readiness Review",
      "text": "---title: Release Readiness Reviewsidebar: dev-badbreadcrumb: Release Readiness Review---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/release-readiness-review/",
    },
    {
      "title": "Release Stories to Customersidebar: dev-badbreadcrumb: Release Stores to Customer",
      "text": "---title: Release Stories to Customersidebar: dev-badbreadcrumb: Release Stores to Customer---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/release-stories-to-customer/",
    },
    {
      "title": "Release Stories to Productionsidebar: dev-badbreadcrumb: Release Stores to Production",
      "text": "---title: Release Stories to Productionsidebar: dev-badbreadcrumb: Release Stores to Production---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/release-stories-to-production/",
    },
    {
      "title": "Review and Approve Design Outputsidebar: dev-badbreadcrumb: Review and Approve Design Output",
      "text": "---title: Review and Approve Design Outputsidebar: dev-badbreadcrumb: Review and Approve Design Output---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/review-and-approve-design-output/",
    },
    {
      "title": "Review & Approve Install Verification Protocol Execution Recordssidebar: dev-badbreadcrumb: Install Verification Record Approval",
      "text": "---title: Review & Approve Install Verification Protocol Execution Recordssidebar: dev-badbreadcrumb: Install Verification Record Approval---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/review-and-approve-install-ver-protocol-exe-records/",
    },
    {
      "title": "Review and Approve V&V Test Protocol Execution Recordssidebar: dev-badbreadcrumb: Review and Approve V&V Test Execution Records",
      "text": "---title: Review and Approve V&V Test Protocol Execution Recordssidebar: dev-badbreadcrumb: Review and Approve V&V Test Execution Records---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/review-and-approve-v-and-v-test-protocol-exe-recs/",
    },
    {
      "title": "Staging ORB Reviewsidebar: dev-badbreadcrumb: Staging ORB Review",
      "text": "---title: Staging ORB Reviewsidebar: dev-badbreadcrumb: Staging ORB Review---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/staging-orb-review/",
    },
    {
      "title": "Start Contribution Packagesidebar: dev-badbreadcrumb: Contribution Package",
      "text": "---title: Start Contribution Packagesidebar: dev-badbreadcrumb: Contribution Package---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/start-contribution-package/",
    },
    {
      "title": "Start Recording Risk Analysissidebar: dev-badbreadcrumb: Start Recording Risk Analysis",
      "text": "---title: Start Recording Risk Analysissidebar: dev-badbreadcrumb: Start Recording Risk Analysis---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/start-recording-risk-analysis/",
    },
    {
      "title": "Submit List of Toolssidebar: dev-badbreadcrumb: Submit List of Tools",
      "text": "---title: Submit List of Toolssidebar: dev-badbreadcrumb: Submit List of Tools---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/submit-list-of-tools/",
    },
    {
      "title": "Testingsidebar: dev-badbreadcrumb: Testing",
      "text": "---title: Testingsidebar: dev-badbreadcrumb: Testing---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/testing/",
    },
    {
      "title": "Update Tools List & Versions used to develop/support offering.sidebar: dev-badbreadcrumb: Tools List Update",
      "text": "---title: Update Tools List & Versions used to develop/support offering.sidebar: dev-badbreadcrumb: Tools List Update---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/update-tools-use-and-versions/",
    },
    {
      "title": "User Requirements Specificationsidebar: dev-badbreadcrumb: User Requirements Specification",
      "text": "---title: User Requirements Specificationsidebar: dev-badbreadcrumb: User Requirements Specification---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/user-requirements-specification/",
    },
    {
      "title": "V&V Readiness Design Reviewsidebar: dev-badbreadcrumb: V&V Readiness Design Review",
      "text": "---title: V&V Readiness Design Reviewsidebar: dev-badbreadcrumb: V&V Readiness Design Review---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/v-and-v-readiness-design-review/",
    },
    {
      "title": "V&V Test Executionsidebar: dev-badbreadcrumb: V&V Test Execution",
      "text": "---title: V&V Test Executionsidebar: dev-badbreadcrumb: V&V Test Execution---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/v-and-v-test-execution/",
    },
    {
      "title": "Validate all Data Approvals Receivedsidebar: dev-badbreadcrumb: Validate all Data Approvals Received",
      "text": "---title: Validate all Data Approvals Receivedsidebar: dev-badbreadcrumb: Validate all Data Approvals Received---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/validate-all-data-approvals-received/",
    },
    {
      "title": "WHCT CoC Team Reviewsidebar: dev-badbreadcrumb: CoC Team Review",
      "text": "---title: WHCT CoC Team Reviewsidebar: dev-badbreadcrumb: CoC Team Review---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/build-and-deliver/whct-coc-team-review/",
    },
    {
      "title": "Watson Health Cloud Transformation CoCbreadcrumb: WH Cloud Trans CoCsidebar: dev",
      "text": "---title: Watson Health Cloud Transformation CoCbreadcrumb: WH Cloud Trans CoCsidebar: dev---This Center of Competence provides members of the various Watson Health market segments with relevant reference materials to help their offerings move to IBM Cloud.Here you will find everything you need to get started and execute the transformation - or native development - of a Watson Health offering on the IBM Cloud.[Link to the WHCT Community](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wa0a1d43ca7a0_4fff_87ff_04006c762969/page/Watson%20Health%20Cloud%20Transformation%20){:target=_blank}For security guidance on Armada and OneCloud deployments, use the following:----------------------------------------------------------------------------[Armada and OneCloud - Creating Secure Solutions](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wa0a1d43ca7a0_4fff_87ff_04006c762969/page/Armada%20and%20OneCloud%20-%20Creating%20Secure%20Solutions%20MUST%20READ){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/cloud-trans-guild/cloud-transformation/",
    },
    {
      "title": "WH Common Services Car Wash Programsidebar: devbreadcrumb: WH Car Wash Program",
      "text": "---title: WH Common Services Car Wash Programsidebar: devbreadcrumb: WH Car Wash Program---This architecture review program has been adapted from the [IBM Cloud Car Wash Program](https://github.ibm.com/ibmcloud/Platform-Architecture/wiki/Car-Wash-Program){:target=_blank}. The purpose of the program is to drive detailed architecture reviews of IBM Watson Health Common Services. Every service whether launching in Beta or GA will be required to produce a standard set of information leading into a Car Wash architecture review to validate that the service is well-designed and implemented, and meets the base requirements of all Common Services.Note The generic non-functional requirements for Watson Health Common Services are [here](non-functional-reqs).  These have been distilled from the [IBM Cloud System Architecture Guardrails](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/){:target=_blank} page.  The reason for the customization is that IBM Cloud Services are true PaaS services, whereas (for the moment) Watson Health Common Services are based on an open source/shared library model.  It is intended that the IBM Cloud guardrails will become the defacto standard when Watson Health Common Services move to a PaaS model.### _Service teams are required to address the following as soon as possible, but at least 6 weeks before launch to ensure sufficient time for your team to address resulting action items:_## Car Wash Architecture Review requirements### Steps:1. Create your own service Car Wash Box folder here: [Location TBD]. Name/rename your Car Wash Box folder with your CRN service-name (unique short name).2. Create a Box note in your folder to include the appropriate table format below, and complete each field/cell.3. Post the requested artifact/material per Beta or GA Release Criteria - see the Minimum Materials Required Leading into a Car Wash Review tables below - in your respective Car Wash Box folder, together with the following information: i) A brief description of your service (i.e., what is it / what is the purpose of the service) - e.g., post your Concept Car; ii) Your target launch date; iii) A link to your Service Onboarding Process (SOP) documentation [TBD Does this apply?] iv) A link to your architecture diagram; v) A link to your network topology diagram; vi) A link to, or evidence of, service availability metrics 4. Ensure that the material you provide shows how you addressed / are compliant with the [Architecture Requirements](non-functional-reqs) for your services current release.5. Pull together a Car Wash summary Box note with your respective [release table template] [Box Location TBD]. In the table, indicate compliance or non-compliance per requirement. Where compliant, include pointers to supporting artifacts/material. Where non-compliant, highlight it in red in the table, and indicate the reason for non-compliance and when/how you plan to be compliant with that requirement.6. [Process around adding your Service to the Review Roadmap - schedule on box, nominated contact point - TBD].7. Ensure that the Architecture Council Review Team  have all been given access to any relevant private Github repos (e.g., to service backlog, code, etc.), Box folders, etc.  [TBD - specifically, who does the reviews?]8. When your material is available for review, a target review completion date will be set based on the status of the service (if cleaner, then shorter review cycle required, etc.).9. The Architecture Council Review Team will then review the material thoroughly either by phone or offline depending on the service. We will post any related notes and resulting action items directly in the Box folder for the service team to address, and will track and follow up with the team as needed.10. All action items prioritized as urgent will need to be addressed before launch. All Car Wash-related action items / issues are tracked in the [TBD - IBM Watson Health CarWash Git Repo].11. Your service team will need to assess and prioritize the Car Wash issues against your existing backlog (preferably stored in Github Enterprise) - add the issues to your own repo, and tag/label with Watson Health Car Wash to indicate Car Wash-related reliability/availability/resiliency issues. Then, copy and paste the link from your repo directly in the issue that we initially opened in our Platform Architecture git repo, so that we can cross-reference your link going forward.12. When the above steps are completed, and the action items addressed accordingly, we will then sign off on the Car Wash architecture review.13. Prescriptive guidance for the Watson and Cloud Platform is provided in the Watson Health Generic Non-functional Requirements wiki page.14. Any questions? Join the [TBD: Watson Health Common Services Carwash Slack channel].## Minimum materials required leading into a Car Wash Architecture Review for a _Beta_ releasePlease copy and paste the tables below into your respective [Car Wash Box folder](https://ibm.box.com/v/CarWash){:target=_blank}. Indicate compliance / non-compliance, and provide the supporting artifacts per release criteria / requirement. Note: Some people have had problems copying and pasting tables from github into a Box note; you can also copy and paste the tables below from the [Car Wash Templates - Tables per Alpha/Experimental, Beta, GA, and Gen2 Box note](https://ibm.box.com/s/l6zgi5khgupphf3c96uo33wlyiveze3o){:target=_blank}.[Architecture Release Criteria](https://pages.github.ibm.com/ibmcloud/Service-Framework/11_architecturedesignrequirements.html){:target=_blank} - Beta | Compliant (Y/N); if No, state why not | Link to supporting material/data showing compliance | Relevant notes--- | --- | --- | ---Post the artifacts/material requested in this Alpha/Experimental release table in your respective Car Wash Box folder, together with the following information and other required artifacts: i) A brief description of your service (i.e., what is it / what is the purpose of the service) - e.g., post your Concept Car; ii) Your target launch date; iii) SOP information [TBD: is this relevant?] iv) A link to your architecture diagram; v) A link to your network topology diagram; vi) A link to, or evidence of, your Service Availability metrics  | | | Note: We also request an architecture diagram and network topology diagram to get a better understanding of how your service is built.ARCH001a.1 Net new services must be designed as cloud native services according to the principles in the [Cloud Native Architecture standards](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/cloud-native.html){:target=_blank}, including Armada (Kubernetes) Container Service as the primary choice of the infrastructure platform for hosting the service components. Alternative choices for infrastructure platforms for hosting the service components MUST be reviewed with the Architecture Guild and MAY be considered according to the guidelines in the [Cloud Native Architecture guidelines](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/cloud-native.html){:target=_blank}. Non-net new services must present an analysis of how their as-is architecture will address all non-functional requirements, and cloud deployment.|  | Talk through how you have addressed the principles [here](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/cloud-native.html){:target=_blank} |Service must define Cloud Resource Names (CRNs) according to the [Naming standards](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/naming.html){:target=_blank} based on the [Cloud Resource Naming \(CRN\) specification](https://github.ibm.com/ibmcloud/builders-guide/blob/master/specifications/crn/CRN.md){:target=_blank} |  | Provide your CRNs |Service must integrate with Identity Access Manager (IAM) for user and services authentication and authorizations according to the [Authentication and Authorizations standards](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/security.html#auth){:target=_blank} |  |  |Service must expose a User Interface integrated into the IBM Cloud Console. Refer to the [IBM Cloud Developers Guide Global Console](https://console.stage1.bluemix.net/docs/developing/console-sdk/global-console.html#bluemix-global-console-overview){:target=_blank} documentation. |  |  |Service must expose application programming interface (API) according to [API standards](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/service_interfaces.html){:target=_blank}; 1) Service must publish public API and UI endpoints using the following rules for assigning DNS domain names [Domain names standards](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/DNS.html){:target=_blank}; 2) APIs to be published in the [external API catalog](https://developer.ibm.com/api/list) with pre-release version identifier |  | Point to published APIs |Service must be designed for high availability at regional level to be resilient in case of planned and unplanned infrastructure and services downtime and failures in one Zone in a Region [High Availability standards](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/availability.html){:target=_blank} |  |  |Service must be designed for data backup and restore and supporting Business Continuity / Disaster Recovery (BC/DR) to different Region in case of major disasters that impact a subset or a complete Region [Business Continuity and Disaster Recovery standards](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/business_continuity__disaster_recovery_targets.html){:target=_blank}. All backup and restore procedure and Business Continuity / Disaster Recovery (BC/DR) plan must be documented and ready to be tested during the Beta phase. |  | Link to your test scenarios and results |Service must be running for at least 30 days with 99.5% or better for both availability of the provisioning/ordering system and consumption/use of the service |  | Link to your [Doctor Scorecard](https://doctor.bluemix.net/#/scorecard){:target=_blank} entry |Ensure that [API Standards](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/service_interfaces.html){:target=_blank} have been met - e.g., reference the API Standards requirements in the above Alpha/Experimental phase - with the final syntax and version identifier planned for GA |  |  |Service must be integrated with the Business Support System (BSS) to publish resource plans in the service catalog, manage and track resource instances, collect resources usage metrics for billing according to [Business Support System standards](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/bss.html){:target=_blank} |  |  |[Monitoring](https://pages.github.ibm.com/CloudEngineering/system_architecture/service_directory/devops/Monitoring.html){:target=_blank} of the resources and dependencies of the service - health checks - must be in place |  | Link to your operations dashboard |Service must be tested for performance and scale scenarios according to [performance and scale standards](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/performance.html){:target=_blank} to gather metrics about load boundaries and verify scale/capacity plans and procedures |  | Link to performance and load data |Service must automate the deployment of new instance or updates to existing instances of the service. The upgrade must be at least weekly and be able to apply security or critical severity issue updates within 24 hours without impacting availability - [DevOps standards](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/devops.html){:target=_blank}. |  | Link to CI/CD runbooks, documentation, Jenkins servers, etc. |_Related track in our Service Framework onboarding guide: [Onboarding to Beta](https://pages.github.ibm.com/ibmcloud/Service-Framework/22_onboardingtobeta.html){:target=_blank}_## Minimum materials required leading into a Car Wash Architecture Review for a _GA_ releasePlease copy and paste the tables below into your respective [Car Wash Box folder](https://ibm.box.com/v/CarWash){:target=_blank}. Indicate compliance / non-compliance, and provide the supporting artifacts per release criteria / requirement. Note: Some people have had problems copying and pasting tables from github into a Box note; you can also copy and paste the tables below from the [Car Wash Templates - Tables per Beta and GA,](https://ibm.box.com/s/l6zgi5khgupphf3c96uo33wlyiveze3o){:target=_blank}.[Architecture Release Criteria](https://pages.github.ibm.com/ibmcloud/Service-Framework/11_architecturedesignrequirements.html){:target=_blank} - GA | Compliant (Y/N); if No, state why not | Link to supporting material/data showing compliance | Relevant notes--- | --- | --- | ---All architecture design requirements for Alpha/Experimental and Beta per above are complete |  | Link to your previous Car Wash Alpha/Experimental and Beta Box folders |Service is running in 3 or more Zones in a Region, or 3 or more Data Centers (if Zones are not yet available in the Region) |  | Link to your architecture diagram |Service is running in all [public regions](https://pages.github.ibm.com/CloudEngineering/system_architecture/regions_zones.html){:target=_blank} |  | Link to your [Doctor Scorecard](https://doctor.bluemix.net/#/scorecard){:target=_blank} entry |Beta service availability experienced by end users must exceed 99.9% for at least 30 consecutive days - a service cannot GA without the Beta phase |  | Link to your [Doctor Scorecard](https://doctor.bluemix.net/#/scorecard){:target=_blank} entry |Evidences that data backup and restore procedures and Business Continuity / Disaster Recovery (BC/DR) recovery plans were tested before GA launch. All the documentation required by BC/DR plan about the test were collected and ready for auditing. |  | Link to your test scenarios and results |Evidence that scale-up procedures were tested and failure simulation tests were run on the beta environment |  | Link to your test scenarios and results |Service must have zero downtime - release/maintenance automation is in place and was tested in Beta |  | Link to CI/CD plan/runbooks |Service must have zero dependencies on Beta or Alpha/Experimental services (for third-party services, must have 24x7 support) |  | List all dependencies and Single Points of Failure (SPoFs) in the service design; architecture diagram could potentially be reused here |24x7 operations plan - including escalations for sev 1 and 2 issues to the business segment owner if not resolved in SLA time |  | Link to ops. plan |Services must have zero open [architecture/availability issues](https://github.ibm.com/ibmcloud/Platform-Architecture/labels/Car%20Wash){:target=_blank} |  | Link to your services Car Wash-related issues |_Related track in Service Framework onboarding guide: [Transitioning from Beta to GA](https://pages.github.ibm.com/ibmcloud/Service-Framework/31_BetaToGA.html){:target=_blank}_---## Descriptions of supporting artifacts listed above Architecture diagram: Include up-to-date implementation details, state management, scale, operations, API itself and user experience of your service. Post both the XML files and screen caps of the diagrams in the Box folder. Ensure that the boxes, flow, etc. are clearly labeled / easy to read. Network topology diagram: Post both the XML files and screen caps of the diagrams in the Box folder. For context, provide a description of the network connectivity of the service, including a full trace of components on the path from the internet into the service (both control plane and instances) and between key dependencies of the service. Single Points of Failure (SPoFs): Identify SPoFs within the service design and how dependency failures are handled gracefully (or not). Rank by blast radius (global impact, regional impact, pod/AZ impact, component impact). Dependency chain or layering of the service implementation: Include internal cross-service dependencies and external dependencies outside of IBM (e.g., Dyn, Akamai, etc.) Data model for the service: Include all storage technologies, databases, and data schema, and include links to data backup and restore procedure runbooks Operations dashboard(s) for the service: E.g., include direct links and/or a screen capture or PDF from each dashboard of week/month/YTD key metrics on service health, provisioning and consumption. Tests executions results and plans: Include failure/destructive testing, load, stress, performance testing, etc. Capacity: It is important to understand your service’s current capacity and future capacity projections. In your capacity planning, include your service’s current headroom and show how you will provide ongoing capacity metrics reporting. Rate limiting: Reference questions asked in the rate limiting survey APIs: Where applicable, provide links to externally published APIs, e.g., in the external API catalog (with pre-release version identifier); reference the APIs guidance## Related linksIf you need access to any of the links below, start [here](https://ibm.box.com/s/7ddr9ctgv8t61bl10bhf7o5qimnz06hb){:target=_blank}. [Car Wash Box folder](https://ibm.box.com/v/CarWash){:target=_blank} [Car Wash Templates - Tables per Alpha/Experimental, Beta, GA, and Gen2 Box note](https://ibm.box.com/s/l6zgi5khgupphf3c96uo33wlyiveze3o){:target=_blank} [Car Wash Reviews Schedule - Gen1 2018](https://ibm.box.com/s/sa4j22iogvcsd9jye5ytivx83ch6qrh3){:target=_blank} [Car Wash Reviews Schedule - Gen2](https://ibm.box.com/s/z65rk0msc2ja13uzrcqd8sb4yzyhu78p){:target=_blank} [Action items resulting from Car Wash reviews - tracked through the Platform Architecture Github repo](https://github.ibm.com/ibmcloud/Platform-Architecture/labels/Car%20Wash){:target=_blank} [Service Framework onboarding guide](https://pages.github.ibm.com/ibmcloud/Service-Framework/){:target=_blank} [Service Framework onboarding guide - Architecture Design Requirements](https://pages.github.ibm.com/ibmcloud/Service-Framework/11_architecturedesignrequirements.html){:target=_blank} [System Architecture Guide](https://pages.github.ibm.com/CloudEngineering/system_architecture/){:target=_blank} [System Architecture Guide - Guardrails & Standards section](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/){:target=_blank} [Cloud Security Review](https://pages.github.ibm.com/ibmcloud/Security/){:target=_blank} [#architecture-carwash Slack channel](https://ibm-cloudplatform.slack.com/messages/architecture-carwash/){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/common-services/common-services-car-wash/",
    },
    {
      "title": "WH Common Services Consumption Phasesidebar: devbreadcrumb: WH CS Consumption Phase",
      "text": "---title: WH Common Services Consumption Phasesidebar: devbreadcrumb: WH CS Consumption Phase---# WH Common Service Process: ConsumptionThe Consumption Process describes the process of enabling a common service from IBM Cloud or WH to be used in WH solutions, applications and other services. This covers (a) the publication and discovery of the service in a catalog together with its documentation, use cases, application starter kits or any the other elements that are needed to efficiently consume the service; (b) the subscription to and billing of the service together with the business artifacts (e.g., price and agreements) and steps to access the service and retrieve the usage; (c) the operation support for a consistent and integrated user experience of the Service Management toolset.##  Table of Contents[1. Consumption of IBM Cloud Services](#1-consumption-of-ibm-cloud-services) [1.1.	Review of an IBM Cloud Service to meet WH MVP Requirements](#11review-of-an-ibm-cloud-service-to-meet-wh-mvp-requirements) [1.2.	WH Process in case of IBM Cloud Service not Meeting the WH MVP Requirements](#12wh-process-in-case-of-ibm-cloud-service-not-meeting-the-wh-mvp-requirements)    1.2.1.	Allow alternative service/solution    1.2.2.	Escalate to IBM Cloud    1.2.3.	Provide guardrails for using partially ready IBM Cloud services in a safe/useful way for WH [1.3.	WH Process in case of IBM Cloud Service Matching the WH MVP Requirements](#13wh-process-in-case-of-ibm-cloud-service-matching-the-wh-mvp-requirements)    1.3.1.	Establish Business Terms with Selected IBM Cloud Services    1.3.2.	Design Patterns and Best Practice for using IBM Cloud Services in WH Applications and Services    1.3.3	List the Approved IBM Cloud Service for WH Consumption    1.3.4.	Discover the IBM Cloud Services approved for WH    1.3.5.	On-board to WH IBM Cloud Accounts and Access the IBM Cloud Services    1.3.6.	Subscribe to IBM Cloud Services from WH IBM Cloud Account    1.3.7.	Migrate from Current WH Service to IBM Cloud Service    1.3.8.	Billing / Charge Back for IBM Cloud Service Usage by WH Solutions[2.	Consumption of WH Services](#2consumption-of-wh-services)    2.1.	Source Distribution    2.2 	Platform As A Service    2.3.	IBM Cloud Developer and Data Scientist Experience[3.	Onboarding WH PaaS Services to IBM Cloud](#3onboarding-wh-paas-services-to-ibm-cloud)[4.	Enabling WH SaaS applications for e-Commerce](#4enabling-wh-saas-applications-for-e-commerce)[5. Operational Services Support (OSS) of the WH IBM Cloud and SL Accounts](#5-operational-services-support-oss-of-the-wh-ibm-cloud-and-sl-accounts)    5.1.	Case management    5.2 	Incident Management    5.3 	Problem Management    5.4 	Change Management    5.5.	Capacity and Quota Management# 1. Consumption of IBM Cloud Services approved for WHThe overall flow of the IBM Cloud consumption process (illustrated below as Workstream 3 or WS3) within WH and the interlock with the definition process (illustrated as Workstream 1 or WS1) is depicted below:![](https://pages.github.ibm.com/watson-health-playbook/resources/images/common-services/WH-ServiceConsumption_IBM%20Cloud%20Svcs.jpg)## 1.1.	Review of an IBM Cloud Service to meet WH MVP Requirements](#11review-of-an-ibm-cloud-service-to-meet-wh-mvp-requirements)The nomination of IBM Cloud services as WH Common Services and their approval for consumption in a WH solution application or another service is governed by the [Common Service Definition Process processes](../../../dev/common-services/definition-process).## 1.2.	WH Process in case of IBM Cloud Service not Meeting the WH MVP RequirementsIn case of IBM Cloud Services not meeting WH MVP Requirements, WH Offering Management will evaluate the following options to provide WH with the required functionality.### 1.2.1.	Allow alternative service/solutionWH Offering Management will contact the WH Reference Architecture Council to approve an exception to use an alternative services or solutions until the IBM Cloud Service will GA the required functionality. For example for IDaaS, until AppID GAs the WH MVP requirements, WH could leverage CIS or UMS services.### 1.2.2.	Escalate to IBM CloudWH Offering Management will escalate at executive level the acceleration of a particular set of WH requirements to be prioritized by the IBM Cloud Services. For example, DSX compliance may the subject of an escalation to accelerate its regulation for meeting WH solutions customer deadlines.### 1.2.3.	Provide guardrails for using partially ready IBM Cloud services in a safe/limited way for WHWH Offering Management will contact the WH Development team to provide guidance in form of guardrails for using a partially ready IBM Cloud service. For instance the guide can detail how to use DSX with no PHI data.Artifacts: [http://ibm.biz/wh-IBMC-guide](http://ibm.biz/wh-IBMC-guide){:target=_blank} contains examples of guides for WP4H on how to use the IBM Cloud Foundational Services. ## 1.3.	WH Process in case of IBM Cloud Service Matching the WH MVP Requirements### 1.3.1.	Establish Business Terms with Approved IBM Cloud ServicesWH Offering Management, upon approval by the WH Reference Architecture Board of an IBM Cloud Service, will proceed with reviewing any updates to the Business Terms with the IBM Cloud.The current agreement is that Watson Health can leverage IBM Cloud IaaS and PaaS services in our solutions and offerings at internal discount rates as follows:|Service | BSS Details||--|--||IBM Cloud Catalog Internal Costs for WH Offerings and Solutions   No DOUs required  | [https://console.bluemix.net/pricing/](https://console.bluemix.net/pricing/){:target=_blank}  	1. Log into the IBM cloud catalog  	2. Configure the solution using the Total Cost of Ownership tool.  	3. Apply 50% internal discount for PaaS, 55% for IaaS ||Watson APIs   DOU and Internal Costs for Watson Health Offerings and Solutions  | [https://tinyurl.com/y9zbswky](https://tinyurl.com/y9zbswky){:target=_blank}   	Discounts range from 40% - 70% off SRP||PaaS internal IBM dev/test accounts |	[https://tinyurl.com/ycmrrcor](https://tinyurl.com/ycmrrcor){:target=_blank} |### 1.3.2.	Design Patterns and Best Practice for using IBM Cloud Services in WH Applications and ServicesThe WH Reference Architecture Counsel in collaboration with the Development Squad shepherding will provide patterns and best practices for integrating the WH services and solutions with the IBM Cloud service.Artifacts: [http://ibm.biz/wh-IBMC-guide](http://ibm.biz/wh-IBMC-guide){:target=_blank} contains examples of guides for WP4H on how to use the IBM Cloud Foundational Services in their various offerings, e.g., Public, Dedicated Next, or Reserved.### 1.3.3.	List the Approved IBM Cloud Service for WH ConsumptionThe IBM Cloud Catalog contains today only services non-complaint for the health industry. Until the IBM Cloud Catalog will include health compliant services, the services approved for consumption in WH will be listed by the shepherding WH Development Squad in the the [Watson Health Services Catalog](https://watsonpow01.rch.stglabs.ibm.com/services/cognitive_catalog/catalog/){:target=_blank} as a pointer to the actual IBM Cloud Services in the IBM Cloud Catalog. Together with the IBM Cloud Services approved for WH, the Watson Health Services Catalog will also list the WH Common Services which we will introduce in Section [2. Consumption of WH Services](#2consumption-of-wh-services).The Watson Health Cognitive Catalog enables the sharing, convergence, and enablement of Watson Health Common Service by allowing teams to (a) publish their own assets, (b) discover assets from other teams to collaborate and re-use, and (c) identify the supported services that can be incorporated into production-level solutions (full offerings or built for a client by implementations).The following diagram describes the structure and the flow the of the [Watson Health Services Catalog site](https://watsonpow01.rch.stglabs.ibm.com/services/cognitive_catalog/catalog/){:target=_blank}.![](https://pages.github.ibm.com/watson-health-playbook/resources/images/common-services/WH-ServiceConsumption_WHCognitiveCatalog%201.jpg)### 1.3.4.	Discover the IBM Cloud Services approved for WHWH developers can discover the WH approved IBM Cloud Service by browsing the [Watson Health Services Catalog](https://watsonpow01.rch.stglabs.ibm.com/services/cognitive_catalog/catalog/){:target=_blank}.The current view of the filter with WH Services available in Production lists the WH GxP Services, the WH Cognitive Services and the WH Standard Platform Services as illustrated in the figure below. Once approved by the WH Reference Architecture Counsel, the IBM Cloud Services will be displayed as well.![](https://pages.github.ibm.com/watson-health-playbook/resources/images/common-services/WH-ServiceConsumption_WHCognitiveCatalog%202.jpg)### 1.3.5.	On-board to WH IBM Cloud Accounts and Access the IBM Cloud ServicesA.	1Q2018 TACTICAL PROCESS for the WH IBM Cloud Account (SDT only)Solution teams and IBM PaaS users already on-boarded to [WH BPM Process Portal](https://sbybz221073.cloud.dst.ibm.com:9443/ProcessPortal/login.jsp){:target=_blank} can proceed with on-boarding to WH SDT IBM Cloud Account via ticket in the [RTC SDT triage](https://nsjazz.raleigh.ibm.com:8050/ccm/web/projects/Watson%20Health%20Cloud%20(Development)#action=com.ibm.team.dashboard.viewDashboard&team=WHC%20CommOps/WHC%20SDT-PDT-QDT%20Triage&tab=_2){:target=_blank}.To open a ticket: Select as area IBM Cloud Select issue as access Use the following template in the ticket body:“ACCESS REQUEST TO IBM CLOUD in SDT:[_One time only for Solution Team request_] The solution team _solutionTeamName_as_in_BPM_ requests to be on-boarded to the IBM Cloud account in SDT under the org OrgSDT__pillarName_. (e.g., OrgSDT_GHHS, OrgSDT_VBC, OrgSDT_Imaging, OrgSDT_Oncology, OrgSDT_WP4H etc).Solution Team needs individual charge back, select one: oYES   o NO[_For each user request_] The team members below need the following access to the Space SpaceSDT__solutionTeamName_as_in_BPM_|User Name	| User Role 	| Role Description | Need user NameSpace in the Solution Team container cluster  (Y or N) || ------------- | ------------- |--------------| ------------- ||Name1@ibm.com	|Organization manager	|The tasks that an organization manager is responsible for includes creating spaces, distributing the quota between the spaces, inviting team members and optionally granting them specific roles, and defining custom domains.|                   ||Name2@ibm.com	|Organization auditor	|The organization Auditor role can monitor the quota, the resource usage, and the team members for all of the spaces in an organization. The auditors can then report on the organization efficiency and highlight any potential problems. • When you adopt a multi-organization architecture, you might want to grant the auditor role to the same team members for every organization that is part of the account. Then, these team members can monitor the quota across all of the organizations in your cloud environment and obtain a global view of the account. • When you adopt a single-organization architecture, grant the auditor role to the team members with the responsibility for monitoring the quota usage and overall efficiency of the organization.|          ||Name3@ibm.com	|Organization billing manager	|The team members with the Billing Manager role can monitor the costs of an organization. • When you adopt a multi-organization architecture, you might want to grant the billing role to the same set of team members for every organization that is part of the account. Then, these team members can then monitor the cost of each organization and obtain a global view of the account. • In a single-organization architecture, identify the users that are responsible for monitoring the cost. This role is appointed by recommendation from the WH Offering Management.|Name4@ibm.com	|Space manager	|The space Manager is responsible for any work that is done within the space that they manage and control. The space manager can perform the following tasks:    - Monitoring the quota that is allocated to the space.    - Requesting additional resources to the organization manager.    - Notifying the organization manager of resources that are not required.    - Addind team members to the space with the Developer role.    - Optionally, assigning the space Manager role to a team member to act as a deputy space manager in their absence.| ||Name5@ibm.com	|Space developer	|A space developer can do the following tasks:    - Manage Cloud Foundry applications.    - Provision and configure IBM Cloud services.    - Associate domains to applications.| ||Name6@ibm.com	|Space auditor	|For every space, you might want to grant the space Auditor role to the same team members with the organization Auditor role. In your enterprise, this role might have to be granted to a specific set of users.|The team members below need the following access to the IAM-managed resources (e.g., containers):|User Name	| User Role 	| Role Description | Need user NameSpace in the Solution Team container cluster (Y or N) || ------------- | ------------- |--------------| ------------- ||Name7@ibm.com	|Administrator	|As an administrator, you can perform all platform actions based on the resource this role is being assigned, including assigning access policies to other users.| ||Name8@ibm.com	|Editor	|As an editor, you can perform all platform actions except for managing the account and assigning access policies.| ||Name9@ibm.com	|Operator | As an operator, you can perform platform actions required to configure and operate service instances, such as viewing a services dashboard. | ||Name10@ibm.com	|Viewer |  As a viewer, you can view service instances, but you cant modify them.| |Thank you “Ted Bauer and the SDT operational team upon receiving the RTC request will create for the WH pillars and solution teams under the corresponding (SDT) IBM Cloud Account IBM Cloud orgs, spaces, clusters and name spaces as follows:-	Each WH pillar will own a separate org: OrgSDT_GHHS, OrgSDT_VBC, OrgSDT_Imaging, OrgSDT_Oncology, OrgSDT_WP4H etc-	Each WH solution team (representing an offering or a client) belonging to a pillar will own a separate space under that pillar org: SpaceSDT_WHC, SpaceSDT_WHCS, SpaceSDT_RWE, SpaceSDT_AnalyticsCore, SpaceSDT_Medtronic, SpaceSDT_Explorys, etc-	Each WH solution team requesting individual charge back will own a separate container cluster-	WH solution teams charged back collectively at org level will own a namespace in the shared  container cluster of the organization.     ◦ For personal namespace we will generate the name like user-notesID, eg, user-ghagi     ◦ For team namespace we will generate the name like ns_SoluitonTeamName, eg, ns-WHC, ns-WHCS, ns-RWE-	For IBM Cloud Dedicated, you request a set of resources from IBM, and then you can distribute them between the different organizations in your IBM Cloud Dedicated environment. You can request additional resources from IBM.-	Managing and monitoring quota - You manage and monitor the quota of an account by space and by infrastructure. Any resource that is provisioned in a space and is then used by the deployed application consumes a portion of the quota available to the organization.     o	For more information about how to view and manage the quota of an organization in IBM Cloud Public, see [Managing quota](https://console.bluemix.net/docs/account/manageorg.html#managequota){:target=_blank}.     o	For more information about how to view and manage the quota of an organization in IBM Cloud Dedicated or Bluemix Local, see [Viewing usage and reports](https://console.bluemix.net/docs/hybrid/index.html#oc_resource){:target=_blank}.B.	STRATEGIC PROCESS for the WH IBM Cloud AccountsThe solution teams and users will on-boarded to WH IBM Cloud Accounts via the WH BPM Process Portal. The on-barding via BPM will automatically create the corresponding orgs, spaces and add users with the selected role(s).### 1.3.6.	Subscription to IBM Cloud Services from WH IBM Cloud AccountA.	1Q2018 TACTICAL PROCESS for the WH IBM Cloud Account (SDT only)Once the solution team got access via the on-boarding process in section 1.1 to the IBM Cloud Catalog, the users given Space Developer role can provision the selected services (pending vetting from WH Reference Architecture) indicated in the [WH IBM Cloud Guide wiki](http://ibm.biz/wh-IBMC-guide){:target=_blank}.The wiki page details the subscription process and WH best practices for each IBM Cloud Service. Additional network configurations may be required to allow the communication between the WH SL Account and the IBM Cloud Service instance. If the end point is marked “per instance” in the wiki page, the developer must request network access to be open via ticket in the [RTC SDT triage](https://nsjazz.raleigh.ibm.com:8050/ccm/web/projects/Watson%20Health%20Cloud%20(Development)#action=com.ibm.team.dashboard.viewDashboard&team=WHC%20CommOps/WHC%20SDT-PDT-QDT%20Triage&tab=_2){:target=_blank}.To open a ticket: Select as area IBM Cloud Select issue as access Use the following template in the ticket body:“REQUEST for NETWORK ACCESS TO the IBM Cloud _Service_Name_ in WH _SL Account_Name_ (e.g., SDT)Please open access for _Service_Name_FROM SOURCE IP:TO DESTINATION IP/PORT:PROTOCOL:Thank you! “Each IBM Cloud service WH wiki page allows the users to enter new requirements for the respective IBM Cloud Service. Follow the process indicated in the wiki page to follow up on the requirement request.B.	STRATEGIC PROCESS for the WH IBM Cloud AccountsThe subscription process in a Dedicated =Next environment.### 1.3.7.	Migrate from Current WH Service to IBM Cloud ServiceEach WH service which is to be migrated to an equivalent IBM Cloud Service will have guidance for teams on the best approach to migrate content and configuration where applicable. The requirements will be gathered in consultation with the solution/service teams who use the service. The level of detail will depend on the service to be migrated and the effort required to migrate, so services that have minimal requirements such as stateless services where the connection details and some basic configuration will be effected will have less migration support than statefull services where the solution team doesnt have access to the data store which may require migration tooling as well as documentation. This will be documented on the [WH Developer Guide to IBM Cloud services wiki pages](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/Wa82025236eb9_4217_a434_ca40a0820057/page/Rel%203.0%20Refactoring%20to%20IBM%20Cloud){:target=_blank}. The current services will remain available for a period of time to allow the solutions and services which depend them time to migrate across to the new service.The main steps of the migration to an IBM Cloud Service are:  Gather solution team requirements for migration to common IBM Service  Identify updates to the configuration and code based on the Consumption Process and IBM Cloud service capabilities  Define the new solution and go through the Definition Process (thinking GxP re-approval)  Validate the control points migration compliance  Continue with the Contribution Process and Consumption Process### 1.3.8.	Billing / Charge Back for IBM Cloud Service Usage by WH SolutionsIBM Cloud Infrastructure (ex-Soft Layer) is charged at VM / BM level.IBM Cloud Container Service is charged at the cluster level.IBM Cloud Services are charged at the Space level.# 2.	Consumption of WH Common ServicesThe nomination of WH services as Common Services and their recommendation for consumption in a WH solution application or another service is governed by the [Common Service Definition Process](../../../dev/common-services/definition-process). Once approved, a WH service follows the [Common Service Contribution Process](../../../dev/common-services/contribution-process) and gets published for consumption in one of the following catalogs:1. [Watson Health Services Catalog](https://watsonpow01.rch.stglabs.ibm.com/services/cognitive_catalog/catalog/){:target=_blank}2. [IBM Cloud Catalog](bluemix.net)The consumption of a WH Service from these catalogs engages different procedures as illustrated in the next Sections.## 2.1.	Source Distribution![](https://pages.github.ibm.com/watson-health-playbook/resources/images/common-services/WH-ServiceSourceConsumption.jpg)## 2.2.	Platform As A Service![](https://pages.github.ibm.com/watson-health-playbook/resources/images/common-services/WH-ServicePaaSConsumption.jpg?raw=true)Artifacts: The [Watson Health Developer Wiki for Virtual Machine Deployments](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/Wa82025236eb9_4217_a434_ca40a0820057/page/WHC%20v.Next%20Release.%20API%20Platform%20integration%20with%20Bluemix){:target=_blank} instructs on how to use the WH API-Platform to enable WH Services APIs for publication to IBM CLoud (Bluemix) catalog from a classic VM based architecture.The [Watson Health Developer Wiki for Kubernetes Deployments](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/Wa82025236eb9_4217_a434_ca40a0820057/page/Open%20Service%20Broker){:target=_blank} details how to use the WH API-Platform to enable WH Services APIs for publication to IBM CLoud (Bluemix) catalog from a cloud native Kubernetes based architecture.## 2.3.	IBM Cloud Developer ExperienceIBM Cloud UX kits allow the implementation of industry standard developer experience on top of PaaS services.![](https://pages.github.ibm.com/watson-health-playbook/resources/images/common-services/WH-ServiceSaaSConsumption.jpg)# 3.	Onboarding WH PaaS Services to IBM Cloud[Detailed onboarding process to IBM Cloud](https://console.stage1.bluemix.net/docs/developing/get-coding/new_service.html#onboarding-a-new-service-into-ibm-cloud){:target=_blank}# 4.	Enabling WH SaaS applications for e-Commerce[E-commerce routes to market: This is an overview of the e-commerce selling routes we support](https://ibm.box.com/s/iu4udugampb9117oz1cgdymvsc4xhk7f){:target=_blank}![](https://pages.github.ibm.com/watson-health-playbook/resources/images/common-services/WH-ServiceConsumption_MarketPlace.jpg)E-commerce on-boarding: This is a summary overview of the steps required to on-board, its angled towards self service purchasing on ibm.com, but these steps are foundational to any of the e-commerce routes to market above.https://www.ibm.com/blogs/digital/resources/offerings/buy/Landing pages: General landing page where product information, marketing content, live chat, public pricing + purchase, etc is available, there are several options available. The link below is a template-driven product page, there are more elaborate options too depending on what the WH digital marketing team want to do.https://www.ibm.com/blogs/digital/resources/offerings/basic/Approaches for Provisioning (1) Consider adopting the new Open Service Broker provisioning engine - thats unified with IBM Cloud - to automate subscription lifecycle managementhttps://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wa8a95a65c19c_4421_bcd4_56f9ee9f5efb/page/Provisioning%202.0%20(Next%20Gen%20Provisioning)(2) Build any division level endpoint with both SaaS and PaaS in mind. With IBM Cloud and SaaS unified under the same provisioning protocol, you can share one endpoint instead of two(3) Reuse your endpoint, aiming to avoid multiple SaaS services within the same division build an endpoint per offerings which means increased build cost, maintenance and landscape.# 5. Operational Services Support (OSS) of the WH IBM Cloud and SL AccountsThe Watson Health Playbook, in alignment with the Watson and IBM Cloud Platform Playbook, introduces the following Operational Support Systems (OSS) mission to ensure that all WH services adopt the OSS platform to provide a consistent experience for our customers by utilizing a common integrated Service Management toolset. The OSS scope includes defining technology, workflows and tooling for the various Standard Operation Procedures (SoPs) that comprise a Service Management platform.The current IBM Cloud SoPs are not qualified for HIPPA nor GxP usage, hence they can be used only by the WH services and solutions not required to support health compliance, this is the WH Tier 1 solutions.As the IBM Cloud SoPs become qualified for HIPPA and GxP usage, the WH Commercial Operations are preparing to provide their expertise and lessons learned from the production field, particularly in the areas of FDA audit automation and efficient SoP qualification. The IBM Cloud Standard Operation Procedures (SoPs) will be invited for shadowing the WH Commercial Operations on the field in view of an effective alignment of the qualified WH SoPs with those of the IBM Cloud.The main SoPs are [Case Management](#case-management), [Incident Management](#incident-management), [Problem Management](#problem-management), [Change Management](#change-management) and [Capacity and Quota Management](#capacity-and-quota-management).## 5.1. Case managementAll services are required to use ServiceNow as the case management tool. The Bluemix console will be updated to invoke ServiceNow APIs to get tickets created in the ServiceNow repository. The global support team will work case tickets in ServiceNow and if they need additional assistance, support will initiate a sync to GitHub to engage development/L3. This is a bi-directional sync.## 5.2 Incident ManagementServiceNow is the platform to be used for Incident Management. ServiceNow will have integrations in place with the Event Management System (Netcool) critical for managing incidents. With the integration between Netcool and ServiceNow, incident records will be automatically created for correlated events in Netcool.Any actions taken by the TOC/GRE/SRE/Tribes will have to be recorded in the incident record. ServiceNow will also be integrated with PagerDuty so that escalations or notifications can occur from the incident record.## 5.3 Problem ManagementProblem management workflow resides in ServiceNow. Upon closure of an incident, a problem record will be created and assigned to the service / Root Cause Analysis (RCA) owner. The RCA owner will perform the RCA (coordinated by AVM). Problem tasks (action items) are listed as part of the problem record. See the [RCA Policy](https://ibm.box.com/s/lv8h6ks1c58d86g48qelfxxee6pkxzg4){:target=_blank} and [RCA Process and Guidance](https://ibm.box.com/s/m7y1xrohb6mzlsro7gysqu9dbepc494z){:target=_blank} for more details. These tasks are sync’d up with GitHub so that developers can take action (without having to get a ServiceNow license).## 5.4 Change ManagementRTC or ServiceNow are the only platforms to be used for Change Management. Change Requests created in either of these tools will be displayed on the Global Change Calendar that is accessed through ServiceNow. ServiceNow gets the RTC Change Calendar information by way of BlueMix Doctor and inherently from ServiceNow. The Change Calendars from both tools are then aggregated to the ServiceNow Global Change Calendar.  See [Change Management Details](developer-guide/operational-support-systems/Change-Management-Details){:target=_blank} for more information.## 5.5. Capacity and Quota ManagementYou manage and monitor the quota of an account by space and by infrastructure. Any resource that is provisioned in a space and is then used by the deployed application consumes a portion of the quota available to the organization.            o For more information about how to view and manage the quota of an organization in IBM Cloud Public, see [Managing quota](https://console.bluemix.net/docs/account/manageorg.html#managequota){:target=_blank}.            o For more information about how to view and manage the quota of an organization in IBM Cloud Dedicated or Bluemix Local, see [Viewing usage and reports](https://console.bluemix.net/docs/hybrid/index.html#oc_resource){:target=_blank}.## Service ContractWH is prioritizing stability and reliability within its Service catalog. To assist Services inthe journey of improving availability, the Reference Architecture Board has been created to provide a roadmap ofincreasing maturity for Services to follow.## EU CloudThe OSS team is committed to supporting IBMs European Cloud initiatives as discussed in the recent [EU Cloud Announcement](https://www.ibm.com/blogs/cloud-computing/2017/11/ibm-cloud-europe-control-data/){:target=_blank}.  In this announcement it was outlined that clients will have the ability to review and approve all non-EU access requests to their content if an instance requires support or access from a non-EU based employee.  Details of the EU exception are outlined in the [EU Exception Process Requirements](../../../dev/developer-guide/operational-support-systems/EU-Cloud-Exception-Process-Requirements)## ELKELK is the OSS implementation of ELK (Elasticsearch, Logstash, and Kibana).  In real-time ELK is loaded with all alert data processed through the OSS Netcool instance to ServiceNow.  The instance is open to tribes so they can see both real-time and historical alert data processed by OSS.  The link below is the OSS Git repository where you can learn more about ELK, ask questions or raise an issue.[The ELK Project](https://github.ibm.com/sosat/elk-help){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/common-services/consumption-process/",
    },
    {
      "title": "WH Common Services Contribution Phasesidebar: devbreadcrumb: WH CS Contribution Phase",
      "text": "---title: WH Common Services Contribution Phasesidebar: devbreadcrumb: WH CS Contribution Phase---# IntroductionThe Contribution Process describes the process of building a common service and making it available to other teams once it is complete. This covers the distribution of the documentation as well as the service itself, along with the other elements that need to be complete before the service is made available.It is assumed that any candidate service has completed the [Common Service Definition Process](../../../dev/common-services/definition-process) prior to being considered for this process. This included the assumption that all the documentation/artifacts needed to exit the definition process are available.![Common Service Lifecycle](https://pages.github.ibm.com/watson-health-playbook/resources/images/common-services/image1.jpg)There are three main phases to the process: Pre-Development Development Making the Service Available[Section I Pre-Development](#section-i-pre-development) aims to describe the activities that need to be completed prior to starting developmentDevelopment of the service is documented separately in the [Watson Health Playbook](https://pages.github.ibm.com/watson-health-playbook/), and hence is not covered here.Finally, [Section II Making the Service Available](#section-ii-making-the-service-available) aims to describe the activities that need to be completed to make the common service available to other teams.There is an additional section [Common Services and Code Contribution](#common-services-and-code-contribution) which discusses the process for another team to contribute features (or defect fixes) to a common service.Note that it is not enough to assume a Common Service can be made common after it has been released - they need to have been designed, developed and implemented to specific common service standards (as discussed below).# Section I Pre-DevelopmentThis section covers the key activities that are specific to common service contribution, that need to be completed prior to development starting. This covers:1. [Architecture Council Review](#architecture-council-review)2. [Consideration of Generic Non-Functional Requirements](#consideration-of-generic-non-functional-requirements)## Architecture Council ReviewThe review(s) during the Common Service Contribution Process aim to ensure the development process and elaborated designs continue to address the functional & non-functional requirements for the service. There are two points in the Common Service development process where reviews are required: At the end of the [Common Service Definition Process](../../../dev/common-services/definition-process), and As soon as practical in the development phaseThe specifics of the Watson Health Common Services Car Wash Program is documented [here](../../../dev/common-services/common-services-car-wash).Where a service that has been previously developed is being contributed as a Common Service, the questions/concerns raised by the review process (as defined above) will still need to be addressed. However, it may well be the case that some items can be deferred to later releases on the basis that the service as is is sufficient in the first instance for the use case(s) being proposed.This will ensure that we define a single review processes, that covers the requirements at Common Services level, Watson Health level and IBM Cloud level, and ensure there is no redundancy/overlap. The artifacts required for the review process should also be synchronized with those required for compliance.## Consideration of Generic Non-functional RequirementsIn addition to the functional requirements for the specific service there are generic non-functional that all Watson Health common services need to meet.  Regardless of the service distribution model chosen for common services, development teams will both have to test for and prove their adherence to a range of base requirements prior to the service being released.Where these requirements are passed through to consumers of the service, or there are specific constraints passed on to consumers in order to meet these requirements, these need to be included in the documentation.For more details on these see [Generic Non-Functional Requirements](../../../dev/common-services/non-functional-reqs)# Section II Making the Service AvailableThis section covers the activities required to make a service available once it has been developed.  The default approach is Source Distribution. There are two other possible models that can be applied to this step, which are documented later in this document: [Platform As A Service](#alternative-distribution-model-platform-as-a-service) [Binary Distribution](#alternative-distribution-model-container-distribution)It is important to note that there are a number of key concerns when proceeding with Source Distribution, these are documented as [Source Distribution Considerations](#source-distribution-considerations). Not withstanding the fact that Source Distribution is the default approach any common service using Source Distribution must address these concerns.## Source DistributionThe distribution of the common services as source artifacts.  In this model, common services are developed to a particular standard, based on a set of common requirements subject to Watson health-wide governance, and subject to architecture council design reviews.  They will then be made available as source to consumers via appropriate repositories, with the consuming team having complete responsibility for deploying and hosting the service.If this distribution method is used, its important that decisions are made in advance about how source modification by consumers is handled (be that forks, a contribution model, etc).Not withstanding the availability of source artifacts, it is assumed that for deployment a [Binary Distribution](#alternative-distribution-model-container-distribution) will also be made available to allow the consumers of the common service to leverage the value of using a know version of the common service.### Source Distribution ConsiderationsThere are a number of aspects to this distribution method which need to be borne in mind by development teams: Common Services development squads will need to support multiple versions of these services - the support strategy for these will need to be decided and documented here. Common Services versions will need to be backward compatible by design.  A non-breaking API evolution strategy will need to be defined and employed.  This is to lay the groundwork for a future PaaS model for such services. Where Common Services persist data, and representations of such data change over versions, automation to upgrade such data between versions has to be provided by the common service If a shared instance of a common service is required for two or more solutions, that the solutions will need to manage the sharing of the common service themselves.  This will create a higher cost for the consumers of the common services and leaves open questions on how upgrades can be managed, what happens when out of date versions remain in use... However, it makes it substantially cheaper for the developers of the service. Consideration will need to be given to large-scale changes and their potential impact on down-stream customers from an upgrade perspective Consideration will need to be given to the release cadence of the common service, and the impact this decision has on customer uptake, upgrade effort, and minimizing the likelihood of customers just cloning the code without upgrading in the future. This model lends itself to Code Contribution (see below) but this needs careful planning within a regulated environment, and also to maintain common service quality. Note: we should mandate [IBM Cloud DevOps Guardrails](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/devops.html) - whereas these are DevOps mandates which strictly speaking apply to Hosted services (rather than binary distributed services), they are a sensible mandate if we are ever going to evolve to a PaaS environment.## Service PublicationThis section will document and mandate the following aspects of common service distribution The process for contributing a Common Service to a catalog:     Source/Binary distributed Services should be documented in the [Watson Health Services Catalog](https://watsonpow01.rch.stglabs.ibm.com/services/cognitive_catalog/catalog/){:target=_blank} - The documentation requirements are described in [Common Service Documentation](#common-service-documentation) below   The process for [Onboarding WH PaaS Services to IBM Cloud](../../../dev/common-services/consumption-process#3onboarding-wh-paas-services-to-ibm-cloud) is documented as part of the [Common Service Consumption Process](../../../dev/common-services/consumption-process) Note that initially, common services will be for internal Watson Health use only. However, teams must document any decisions that could limit common service usage by external parties. Life-cycle for Watson Health Common Services:     [The IBM Cloud Service Framework](https://pages.github.ibm.com/ibmcloud/Service-Framework/11_architecturedesignrequirements.html){:target=_blank} defines four stages in the service life-cycle: Alpha, Beta, GA, and Gen-2     At least initially, two of these directly apply to Watson Health Common Services:         Beta: A service which can be made available to Watson Health consumers for development or testing purposes, but which is not yet appropriate for use by customers in a production environment         GA: A service which is available to internal customers, and which can be used and deployed in customer solutions in production     In future Alpha may be used to advertise that a common service is being worked on. Decide whether consumers need to sign up for the service and mechanism for doing this     Would help track usage, adoption, etc.## Common Service DocumentationThe documentation of the service needs to cover the functionality provided by the service, how to consume the service and how to operate the service. In particular: Service Name Description Use Case(s) Basic Service Flow Images of provisioned service Code examples (service equivalent of _Hello World_) Author, Published date, Service, Location   If distributed as source or container, link to GitHub project Pricing Plans (Placeholder - no charging currently) API Reference/Swagger documentation Further Documentation, if needed   Training   Getting Started Tutorial   Video/ Demo   Detailed Documentation If possible, API instance demo (on demand). Help/Release Notes## Service SupportSquads who own Common Services will need to define: Service Level Agreements (should there be a standard one for all common services)? Common service release cadence Responsiveness of support Version support strategy - number of versions/time/etc. Tooling for Enhancement, Defect Tracking, Reporting, etc.## Alternative Distribution Model: Platform as a ServiceIn a true Platform as a Service Watson Health environment, common services would be developed and run centrally.  Consumers would interact with such services via well-defined APIs, and to agreed SLAs.  Consumers would not have to know anything about the implementation, hosting, scaling of these services, nor a range of other non-functional concerns.  Business applications consuming such services could concentrate on doing what they do best - business functionality - rather than have to worry about the non-functionals of their component services.  They also would seamlessly use whatever version the common services teams roll out, confident in the knowledge that the upgrades will be non-impactful.Note: The publication of a service in IBM Cloud requires the implementation of bss interfaces for provisioning and metering. These interfaces have been implemented as  services in WH API- Platform and are detailed as follows: The [Watson Health Transformation Wiki - Lift and Shift](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wa0a1d43ca7a0_4fff_87ff_04006c762969/page/LIFT%20%26%20SHIFT){:target=_blank} instructs on how to use the WH API-Platform to enable WH Services APIs for publication to IBM CLoud (Bluemix) catalog from a classic VM based architecture. The [Watson Health Transformation Wiki - Cloud Native](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wa0a1d43ca7a0_4fff_87ff_04006c762969/page/CLOUD-NATIVE){:target=_blank} details how to use the WH API-Platform to enable WH Services APIs for publication to IBM Cloud (Bluemix) catalog from a cloud native Kubernetes based architecture.## Alternative Distribution Model: Container DistributionThe distribution of the common services as binary artifacts.  In this model, common services are developed to a particular standard, based on a set of common requirements subject to Watson health-wide governance, and subject to architecture council design reviews.  They will then be made available in Binary format to consumers via appropriate repositories, in a manner suitable for hosting.The technical form of the binary artifacts will vary based on the technologies - it can include compiled artifacts such as `jar` and `lib` files, or text files in a release form such as minified `js` files or a packed application such as an `ear` file.# Common Services and Code ContributionThis is a model for the evolution of the common service rather than its distribution, however, it makes sense to describe this in the context of the service distribution as both are interrelated.This is the process for another team to contribute features (or defect fixes) to a common service. (Effectively a governance model - as described [by OSS Watch](http://oss-watch.ac.uk/resources/governancemodels){:target=_blank})Each service (component) must have an assigned architect & OM (could be one person) who effectively controls the backlog (in whatever tooling - generally visible) and anyone looking to contribute, can do so based on a backlog item (enhancement or defect) - but you can’t contribute something that isn’t on the backlog, but you can work with the service architect/OM to get your requirements on the backlog and prioritised.If you have requirements that the service architect/OM wont consider, then youre left with two possible routes forward:1. Develop your requirements locally as part of your own project.2. Approach the Architecture Council to accept your requirements as the basis for a new common service.While the general WH contribution model will be defined in the playbook. It is reasonable to assume that the teams owning common services may decide to implement more restrictive processes, e.g. Review Then Commit (RTC). [_Open source software peer review practices: A case study of the Apache Server_](http://se.inf.ethz.ch/old/teaching/2010-S/0276/slides/baenziger.pdf){:target=_blank} gives an overview of both and some comparison across projectsThere is an expectation that the requirements for those making code contribution will differ based the service distribution method selected for the service.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/common-services/contribution-process/",
    },
    {
      "title": "WH Common Services Definition Processsidebar: devbreadcrumb: WH CS Definition Phase",
      "text": "---title: WH Common Services Definition Processsidebar: devbreadcrumb: WH CS Definition Phase---Service and their health industry considerations------------------------------------------------Services fall into two categories: Common or Application SpecificCommon services are high-value services, providing an integrated capability that is usable by many other applications or services (e.g. a Master Patient Index Service). There are many considerations that surround these services that will impact their general usefulness or complexity, but a few of the bigger ones are:-   Does the service need/supply PII/PHI?-   Does the service integrate with medical devices? Or is used by applications that do?    -   Is this Service part of a regulated platform?-   Will this Service be used outside of the United States?A service which requires PII/PHI is subject to HIPAA regulations, and therefore there are security and privacy regulations that must be considered when integrating with such a service.A service which integrates with regulated medical devices, or is part of a system that does, will be subject to QMS controls.A service which will be used across national borders will need to support whatever data regulations required in the country which uses the service (e.g. GDPR for the European Union).Application Specific services will still need to consider all the same things as common services do, but usually they are specific to a solution, and may not need to accommodate all the above restrictions.### How do we define and identify a common service?A Common Service can be defined as a service which has functionality that is developed once but expected to be reused by multiple solutions inside and outside of Watson Health to reduce the cost of redeveloping the functionality. Any \common service\ should be consumable by any component with minimal time and effort.-   A key consideration for common services must also be it is multi-tenant or allow creation of multiple dedicated instances of such service.-   A service may / may not be an offering - could be internal for use into solutions.-   Every common service must have accompanying documentation stating the operation of the service and accessible APIs.-   Solutions who want to deviate are required to obtain approval from the [Architecture Council](#architecture-council) (AC)-   If there are multiple \common services\ serving the same purpose today, they must be reconciled by the respective architects to form a single consumable    -   OM to provide coordination of evaluation criterion with architects. Helps with selection of the service to be promoted to the common service and plan to address functionality deltas with other similar services.    -   Convergence process for bringing together these multiple services (modeled under the Cognitive Services one, currently being piloted)    -   Architectural committee provides the final sign off### Common Services Identification, Concept and MVP Process FlowThe following diagram identifies a set of parallel flows to act as guide through the effort of conceptualizing a common service, identifying common services that may already exist, normalizing duplication efforts, governance, and final promotion/adoption.![Common Service Lifecycle](https://pages.github.ibm.com/watson-health-playbook/resources/images/common-services/image1.jpg)In the above diagram, shapes are color-coded to match their phase of the process:-   Green: Common Service Definition Process steps-   Blue: Common Service Contribution Process steps-   Orange: Common Service Consumption Process stepsStep 1: Identify-   Leadership teams flag priority services based on Anchor Offerings-   New Common Services Proposal-   Inventory of Current Technology (Common Services Catalog)    -   Watson Health services and code    -   IBM Cloud servicesStep 2: Evaluate-   [Common Services Definition Squad](#common-services-definition-squads) evaluates proposals and creates Definition Package    -   Evaluates requirements and inventory.    -   Evaluates [architecture](#high-level-architecture) available    -   For new proposals, creates [Definition Package](#definition-package-content)    -   For existing services, works with development team to create/evaluate [Definition Package](#definition-package-content)-   [Requirement Gathering](#requirements-identification-and-specification)    -   Survey teams that need the capability (consumers)-   [Define Service Squad Alignment on MVP](#assumptions-for-common-service-identification-and-evaluation)    -   Alignment with Strategic Imperatives    -   Best use of Skill, Talent and organization    -   Roadmap pragmatics    -   Evaluation methodologyStep 3: Propose and Review-   [Architecture Council](#architecture-council) Definition and Contribution Part 1 package reviews-   Platform MMT Review (Business Review)-   [Architecture Council](#architecture-council) Contribution Part 2 package reviewStep 4: Develop-   [Contribution Process Package Part 1: Architecture](../../../dev/common-services/contribution-process)-   [Pre-Development](../../../dev/common-services/contribution-process#section-i-pre-development)-   Develop & Document Common Service (Using [Watson Health Playbook](../../../dev/planning-and-tracking-work/release-planning/))-   [Complete Contribution Package Part 2](../../../dev/common-services/contribution-process)Step 5: Disposition-   Rejection    -   Rejection could be for many reasons, but usually it will be because the service business proposal isnt well defined, or the technical architecture needs work.    -   A complete rejection will be decided if the service does not meet a high-value, cross-pillar business or technical need.-   [Approve Service and Make Available](../../../dev/common-services/contribution-process#section-ii-making-the-service-available)    -   AC assigns teams based on recommendation    -   AC approves exemptions    -   Service is promoted in Service Catalog as a common service across pillars.Step 6: Consume-   [Service Discovery and Use](../../../dev/common-services/consumption-process)Step 7: Support-   [Operations and Maintenance](../../../dev/common-services/consumption-process#5-operational-services-support-oss-of-the-wh-ibm-cloud-and-sl-accounts)The following diagram shows the Rejection/Update/re-submit path![Rejection and Feedback Flows](https://pages.github.ibm.com/watson-health-playbook/resources/images/common-services/image2.jpg)### Vetting Common Services and Requirements with Pillar teamsTo accommodate cross-market visibility and identification of services, there are two teams that will work together to identify and recommend common services:#### Architecture CouncilThe Architecture Council is made up of key architecture and development leaders who have the skills and background to assess recommendations for common services and are ultimately the responsible for the final disposition of whether a service should be made into a common service.Team members are comprised of executive leadership from the different offerings, compliance, security and delivery. At the technical level, each of the development functional organizations have a representative on the AC.#### Common Services Definition SquadsSupporting the AC, are a series of squads that are divided by functional area, for example:-   Customer and Data Onboarding-   Developer Experience-   Cognitive-   Analytics and BI-   Health Data Platform-   Security and Data Governance-   Foundation Services-   Operational Resilience and PSIRT-   InfrastructureEach squad has membership from each of the Pillars and Functional Leadership (e.g. Platform, Imaging, Life Sciences, Oncology, VBC, etc\...)The primary purpose of these Common Services Definition Squads is to evaluate existing services that are candidates to become common services, examine proposed requirements for new common services, and ultimately propose a common service for approval by the AC.Proposals are made through the creation of a Definition Package, which will contain all the content needed by the MMT to make business decisions about the common service proposal.By distributing the evaluation of common services in this fashion, the AC will be able to focus on the business decisions related to approving a new common services effort or promoting a service.##### Definition Package ContentThe Definition Package is a checklist of input documentation, requirements and other artifacts needed by the Common Services Definition Process as part of the minimum set of information needed to successfully complete a review of the viability and business need of a service.To begin the process of Definition Package evaluation, please follow the [Submitting a Common Service Proposal for Evaluation](https://watsonhealth.aha.io/products/WHXSEG/pages/WHXSEG-N-1){:target=_blank} process. This will show you how to create an idea in Aha! and attach your Definition Package to it and initiate the evaluation process.#### Assumptions for common service identification and evaluationGiven That:-   All Services across WH are in a Watson Health Services Catalog, visible to all Markets (Pillars)-   Common services identification is an integral part of the main grooming of all services-   There exists a [Common Services Definition Squad](#common-services-definition-squads) per functional area responsible for evaluating services and providing a recommendation to the AC for promotion.-   There exists a [Architecture Council](#architecture-council) responsible for final approval and promoting them to Common ServicesThen if a common service is identified:1.  A Squad will be assigned - this can be a new or existing Squad (for example, a service has an existing squad, it may be preferable to have the same squad continue development of the common service).2.  Service gets flagged in the catalog and metadata includes all solutions using it, etc.3.  MVP is socialized and vetted with the [Architecture Council](#architecture-council)    a.  MVP must be driven by the Must Have of Market using the Common Service    b.  The solution must be sufficiently inter-operable (does it become part of a Platform offering?)Based on outcome of the investigation with IBM Cloud and WH teams, the answer will be:-   Yes -- Feature exists in the service    -   Update MVP to show work to integrate with IBM Cloud service-   No -- Feature does not exist in the service-   Future -- Feature is committed in the service roadmap-   Partial - Feature is partially implemented in the service but improvements are still needed-   Also notate if feature already exists in another service (i.e. composite service)Requirements Identification and Specification---------------------------------------------To keep requirements consistent between Unregulated and Regulated projects, the same traceability metamodel should be utilized when defining functional and nonfunctional requirements:![Metamodel](https://pages.github.ibm.com/watson-health-playbook/resources/images/common-services/image3.jpg)### Requirements Definition AssumptionsThere are two workflows that govern how requirements and design are captured and documented. These are Regulated and Unregulated.To prevent future issues with an unregulated service becoming regulated, or integrating with regulated projects, it is required that the same quality-based approaches should be used for both. The main difference between the two workflow approaches is that in an Unregulated project, it is not required to formally approve and sign the requirements before development can begin. As requirements for a service become approved and assigned to releases and given points, Work Packages can immediately be created for tracking and development can begin. This means that a more iterative and agile based approach can be taken to requirements gathering, definition and implementation.Requirements can also evolve without the need for formal change history approvals. Making use of a requirement management tool that can track the change history of requirements directly or using change records, will greatly help in documenting the running history of all changes can be maintained.The Watson Health Playbook provides guidance on requirements definition for [planning and tracking work for ongoing delivery](../../../dev/planning-and-tracking-work/ongoing-delivery/).In general, Hills, Epics and Stories can be defined as:-   Hill: The big goal. Contains a who, what, and wow factor.-   Epic: A collection of customer value centered on a common theme.-   Story: A chunk of customer, or team, value that can be completed in a single sprint.### Capturing Requirements (Functional and Non-Functional)Incorporate [Common Requirements for Common Services](../../../dev/common-services/non-functional-reqs) into your requirements plan.Gather requirements / un-prioritized-   Talk to internal and external clients-   Collect initial solution validation criterion-   Identify WH assets, if any, that could be leveraged-   Include any cross-service dependency#### Requirements Review and CommunicationThe Watson Health Playbook provides general guidance around [holding regular grooming sessions](../../../dev/planning-and-tracking-work/ongoing-delivery/) as well as the [general process for defining and reviewing requirements](../../../dev/planning-and-tracking-work/ongoing-delivery/), however the following reinforces the key considerations for these reviews along with additional actions for common services.Communicating and reviewing candidate requirements shall be handled through the Offering Management Operational Model:-   Socialize MVP with stakeholders    -   internal teams / OT-   Make sure the Architecture Council has approved-   Each user story must be reviewed and accepted by majority stakeholders. If applicable, sponsor user validation needs to be part of this stage.-   Majority stakeholders include:    -   Offering management    -   Development management    -   Component lead    -   Architect    -   Security    -   Compliance    -   IT/Comm Ops    -   Design (if applicable)    -   Sales (if applicable)    -   Consulting (if applicable-   Approved requirements are included in the next \release train\. Number of requirements included is based on each team\s velocity.-   PB0 / Commitment Pitch at OT/MMT - requires:    -   Sizing of MVP from development (dev / test / ID / build / deploy / etc)    -   Dev team\s velocity - to determine iteration / \release train\    -   Identification of how many iterations are needed to do a \release train\-   MMT approval -\> move to Build and Deliver phase#### Requirements Management ToolingThe Watson Health Playbook also sets the [required tooling to be used for non-regulated projects](../../../dev/planning-and-tracking-work/getting-organized/), however there is ongoing work that needs to be finalized around the regulated project tooling. Regulated projects have validated tooling that will continue to be used until a documented path in the playbook can be solidified for regulated projects and offerings.The single most important requirement for our tooling is that they support our regulatory and non-regulatory requirements definition and development processes. Therefore, care must be taken with tooling since there are considerations that need to be made with respect to GxP projects that are already underway. Validation of tooling is also a requirement for tools that participate in QMS projects. Nevertheless, common tooling for backlog grooming by Offering Management, with an eye on the future of validated tooling, is possible.In general:-   Aha! Will be used to collect, refine, publish and track requirements prior to development.    -   These requirements may be for a non-regulated, GxP or may become GxP since there is no notion of the technology or design.    -   Like we currently do with RDNG, a corresponding RTC work item will be created for development to work on at the beginning of a development iteration.-   In Aha! We need to track:    -   Requirement    -   Requester: Customer/Pillar/Solution (helps identify Common Services)    -   Prioritization score.    -   Validation Criterion    -   Business Justification - Revenue, Customer Satisfaction, Service dependency, Security / Compliance    -   RTC\# (work item to be created after MMT approval of Commitment Pitch)    -   Does it exist in another solution or is one under construction?#### The Requirements Refinement LifecycleFor non-regulated offerings, refer to the [Watson Health Playbook for requirement refinement on Hills, Epics and Stories](../../../dev/planning-and-tracking-work/getting-organized/). It is important that we maintain the traceability outlined in Requirements Identification and Specification section of this page.For regulated offerings, please see [Regulatory Considerations](../../../compliance/regulatory-considerations/)As changes are made to requirements, change history should be documented through Change Requests, or other change tracking mechanisms should be maintained for historical purposes.Offering Management and Architecture should work together to define meaningful business level Hills and Epics whereas Development, Architecture and OM should work together to decompose Epics into meaningful Stories and Acceptance Criteria that are testable and unambiguous.Release Planning----------------Please refer to the [Release Planning](../../../dev/planning-and-tracking-work/release-planning/) section of the Watson Health Playbook for general details, however the following section outlines key considerations for release planning on common services as well as regulated common services.Offering Management will have a prioritized list of requirements, a subset of which will make up the MVP. Each of the squads will know what their velocity for each iteration is. Each team will need to determine which of the MVP requirements apply to them and which ones can be completed in each iteration based on historical velocity.The velocity will determine how many iterations are needed to complete the MVP. Each iteration should be considered a potential shipping release for non-GxP. The total number of iterations which are needed to complete MVP should be considered as a release train for GxP. Once teams have reached the last iteration of the release train, that release train is forked and enters V&V for GxP while development continues on the next iteration for the next release train/non-GxP iteration.High Level Architecture-----------------------Please review how to create an [Initial High-Level Architecture](../../define-and-prove/initial-hl-architecture) for the [Watson Health Development Process](../../../dev/index).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/common-services/definition-process/",
    },
    {
      "title": "WH Common Services Processsidebar: devbreadcrumb: WH Common Services Process",
      "text": "---title: WH Common Services Processsidebar: devbreadcrumb: WH Common Services Process---Common services are high-value services, providing an integrated capability that is usable by many other applications or services (e.g. a Master Patient Index Service). Watson Healths approach on the IBM Cloud is to provide common Health specific services and APIs, realized as configurations, extensions, data models, algorithms and cognitive services on the IBM Cloud.The following process flows and guidance have been developed to facilitate the definition, identification, consumption and the possibility to contribute to a Common Service. The processes shown below are designed to be executed in the order shown:1. [Definition](../definition-process): How to identify a common service and define the MVP requirements2. [Contribution](../contribution-process): How a common service should be designed, implemented, and made available3. [Consumption](../consumption-process): How a common service is discovered and used",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/common-services/index/",
    },
    {
      "title": "Generic Non Functional Requirementssidebar: devbreadcrumb: NFRs",
      "text": "---title: Generic Non Functional Requirementssidebar: devbreadcrumb: NFRs---In addition to the functional requirements for the specific service there are generic non-functional that all Watson Health common services need to meet.# Development Standards Coding Standards - [Coding Standards for Watson Health](../../../dev/developer-guide/coding-standards-basics) will be defined via the Watson Health Playbook, and must be adhered to for new development. All Common Services should be accessible only through RESTful APIs, and [IBM Cloud API Standards](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/service_interfaces.html){:target=_blank} standards must be adhered to. All Common Services need to be designed to work on IBM Cloud, and net new services must be built as [Cloud Native Services](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/cloud-native.html){:target=_blank}.     Repackaged services (i.e. common services based on pre-existing assets) do not necessarily have to adhere to this standard, but they must document their performance, scale-out and cost requirements, and show how their proposed architecture meets/will meet these requirements (if this is not cloud native).# Security Common Services must comply with the [IBM Cloud Security Standards](https://pages.github.ibm.com/ibmcloud/Security/) Common services must adhere to [IBM Cloud Secure Engineering Guidelines](../../../dev/developer-guide/secure-engineering/). Common Services source code control needs to adhere to IBM Cloud guidelines - [IBM Cloud Guidelines for Source Code Control](../../../dev/developer-guide/source-code-security/).     Note that this is documented here for reference, but really secure engineering should be a baseline requirement for all Watson Health development, so strictly speaking this should be stated in the Watson Health Playbook. [Security Review Board](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W3297bceb61fe_416f_b06d_a43c88f099dd/page/SRB%20-%20Security%20Review%20Board){:target=_blank} process, signoff and ongoing engagement is a requirement. Common Services need to adhere to the standards from [IBM Cloud Security Guardrails](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/security.html){:target=_blank} - the tooling used to meet/support the standards can vary. Common Services need to use the [Watson Health Service Release Checklist](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W1f78252d0a71_452e_8074_5006a1ad5857/page/Security%20and%20Compliance){:target=_blank}.# Logging, Monitoring and Alerting Common Services must conform to the standards from [IBM Cloud Guardrails for Logging and Monitoring](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/logging_monitoring.html){:target=_blank} - the tooling used to meet/support the standards can vary.# Accessibility Common Services with user interfaces need to conform to [IBM Accessibility Mandates](http://w3-03.ibm.com/able/devtest/index.html){:target=_blank}.# Globalisation All Common Services must be architected and designed as global components.  Watson Health operates in many countries worldwide, and as such Common Services must do so also. Watson Health Common Services must abide by the standards in [IBM Cloud Guardrails for Internationalization](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/internationalization_and_localization.html){:target=_blank} - the tooling used to meet/support the standards can vary.# Regulation & Compliance Note that it is assumed (assumption to be verified!) that another team is worrying about the documentation of Watson Health development to appropriate standards (GxP, HIPAA, GDPR).  This is because such standards apply to all Watson Health development - not just to that of Watson Health Common Services. Common Services should operate from a common codebase for all levels of compliance. Services should support all required compliance standards.# Multi-tenancy Watson Health Common Services are cloud native services.  As such, they are assumed to not only scale, but also be cost-effective. It is assumed that application-level multi-tenancy is therefore a requirement for Watson Health Common Services. It is understood that this level of multi-tenancy may not be an absolute requirement for some services (for example, for some lightweight/stateless/short-lived/container-based services, and teams are free to propose an alternate approach to scaling/cost-effectiveness as part of the architecture council review process.# Performance Common Services must conform to standards in [IBM Cloud Performance Guardrails](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/performance.html){:target=_blank} - the tooling used to meet/support the standards can vary. Note that this is a mandatory requirement independent of whether services are developed and operated by the common services team (PaaS), or are distributed as source or binary.  Regardless - it is a requirement for common services teams to abide by these guardrails.# Availability Common Services must confirm to the standards in [IBM Cloud Availability Guardrails](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/availability.html){:target=_blank} - the tooling used to meet/support the standards can vary. Note that this is a mandatory requirement independent of whether services are developed and operated by the common services team (PaaS), or are distributed as source or binary.  Regardless - it is a requirement for common services teams to abide by these guardrails.# Business Continuity/Disaster Recovery Common Services must conform to the standards in [IBM Cloud Guardrails on Business Continuity](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/business_continuity__disaster_recovery_targets.html){:target=_blank} - the tooling used to meet/support the standards can vary. Note that this is a mandatory requirement independent of whether services are developed and operated by the common services team (PaaS), or are distributed as source or binary.  Regardless - it is a requirement for common services teams to abide by these guardrails.# Open Source Open Source to be packaged/re-used in common services needs to be approved as per the [OSSC Process](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/affae2b2-83dc-4445-ac01-ccd6e4947d79/page/OSSC%20Process){:target=_blank}, also see [Open Source @IBM](https://w3.ibm.com/developer/opensource/){:target=_blank}.# Architecture Requirements## Architecture design requirements for Beta services ARCH001b.1 [PaaS only - does not apply to source distribution] A Beta service cannot offer SLAs to customers (end users). Per the IBM Cloud terms of service, end user SLAs can only be offered under contract, once a service is Generally Available. In lieu of this contract, a service must meet the set availability target under Beta and should continue to work on meeting or exceeding the planned end user SLA. ARCH001b.2 [TBD - Region/Zone info not relevant for Source Distribution, but need guidance on this for WH consumers of common services. Design is required.] Service must be designed for high availability at regional level to be resilient in case of planned and unplanned infrastructure, and services downtime and failures in one Zone in a Region. Service must be running in 2 or more Zones of 2 Regions (if they are available). Reference High Availability standards. ARCH001b.3 [TBD - Region/Zone info not relevant for Source Distribution, but need guidance on this for WH consumers of common services.  Design is required.] Service must be designed for data backup and restore to enable Business Continuity / Disaster Recovery (BC/DR), up to and including failover to a different Region in case of major disasters that impact a subset or a complete Region. The services BC/DR plan, including backup and restore procedures, must be documented and ready to be tested during the Beta phase. Reference Business Continuity and Disaster Recovery standards. ARCH001b.4 Service must be running for at least 30 days with 99.5% or better for both availability of the consumption/use of the service. ARCH001b.5 Ensure that API Standards have been met - e.g., reference the API Standards requirements in the above Beta phase - with the final syntax and version identifier planned for GA. ARCH001b.6 [PaaS only, does not apply to Source distributed services] Service must be integrated with the Business Support System (BSS) to publish resource plans in the service catalog, manage and track resource instances, collect resources usage metrics for billing according to the Business Support System standards. ARCH001b.7 [TBD - guidance on instrumentation for Monitoring of Common Services - actual monitoring will be an exercise for the caller] Monitoring of the resources and dependencies of the service - health checks - must be in place. Teams should have a comprehensive monitoring/alerting strategy for operating their service. If teams do not currently have a monitoring solution, then the guidance is to use New Relic. ARCH001b.8 Service must be tested for performance and scale scenarios according to Performance and Scale standards to gather metrics about load boundaries, and verify scale/capacity plans and procedures. ARCH001b.9 [Paas only, does not apply to Source distributed services (a single automation approach that supports all Watson Health infrastructure does not exist)]  Service must automate the deployment of new instances or updates to existing instances of the service. The upgrade must be at least weekly and be able to apply security or critical severity issue updates within 24 hours without impacting availability. Reference DevOps standards.---## Architecture design requirements for General Availability (GA)All architecture design requirements for Beta per above must already be addressed. ARCH001ga.1 Service is running in 3 or more Zones in a Region, or 3 or more Data Centers (if Zones are not yet available in the Region). ARCH001ga.2 Service is running in all public regions: Dallas, Washington DC, Frankfurt, London, Sydney, and Tokyo (Chengdu delivered via Wanda). Important: Currently, for Gen2 alignment, all services are required to deploy in the Dallas MZR - in the 3 Availability Zones (AZs), DAL10, DAL12, and DAL13 - while we wait for all MZRs to roll out. ARCH001ga.3 Beta service availability experienced by end users must exceed 99.9% for at least 30 consecutive days - a service cannot GA without the Beta phase. ARCH001ga.4 Evidence that data backup and restore procedures and Business Continuity and Disaster Recovery recovery plans were tested before GA launch. All of the documentation required by the BC/DR plan regarding the tests should be collected and ready for auditing. ARCH001ga.5 Evidence that scale-up procedures were tested and failure simulation tests were run on the Beta environment. ARCH001ga.6 Evidence that the service has zero downtime during release/maintenance deployment, that automation is in place and was tested in Beta. ARCH001ga.7 Service must have zero dependencies on Beta or Alpha/Experimental services (for third-party services, must have 24x7 support). ARCH001ga.8 24x7 operations plan - including escalations for sev 1 and 2 issues to the business segment owner if not resolved in SLA time.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/common-services/non-functional-reqs/",
    },
    {
      "title": "WH Common Services Change Managementsidebar: devbreadcrumb: WH CS Change Management",
      "text": "---title: WH Common Services Change Managementsidebar: devbreadcrumb: WH CS Change Management---Change Management Problem Statement-----------------------------------As we move towards a model of sharing/re-using services across Watson Health offerings, we need to enable rapid development of updates and deployment of changes to the services while ensuring that the quality, security, and safety of the offering applications that consume these services not adversely effected.Process Flow------------### Assumptions-   Services are tracked and registered in the [IBM Cloud Catalog](https://console.bluemix.net/){:target=_blank} and [BSS capabilities](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wa0a1d43ca7a0_4fff_87ff_04006c762969/page/Onboard%20a%20PaaS%20Service%20to%20IBM%20Cloud%20Catalog){:target=_blank}.-   The [Common Services Process](../../../../dev/common-services/index/) and the Watson Health Development process were followed previously (e.g. this is an assumption that common core documentation exists for the service already). This also means that during a Change Request should leverage existing documentation and show what needs to change in that documentation, for example, an Architecture Overview document should show the differences between current state, and future state.-   Regulated Consumers are responsible for validating and verifying against a specific Common Service Version.-   Offering Management will always initiate a Change Request for a common service. This includes all changes that would result in a new version of the common service (changes to user features, performance, defects, technical debt additions)-   Consumers will be notified of all types of changes (any new version) automatically through the use of the [IBM Cloud Catalog](https://console.bluemix.net/){:target=_blank} and [BSS functionality](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wa0a1d43ca7a0_4fff_87ff_04006c762969/page/Onboard%20a%20PaaS%20Service%20to%20IBM%20Cloud%20Catalog){:target=_blank}.-   IBM Cloud services will also allow for the calling of a specific version of a service.-   All Common Services follow the same development and change management process (e.g. the Watson Health Development process)-   Service Consumers must register to use the service through the [IBM Cloud BSS capability](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wa0a1d43ca7a0_4fff_87ff_04006c762969/page/Onboard%20a%20PaaS%20Service%20to%20IBM%20Cloud%20Catalog){:target=_blank}.-   Services that are going through the Watson Health Development process for the first time will be [Dark Launched](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wa0a1d43ca7a0_4fff_87ff_04006c762969/page/Dark%20Launching%20a%20service){:target=_blank}, in order to provide early access to for testing and getting feedback on a new service.### What does it mean to Dark Launch a common service?[Dark Launching](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wa0a1d43ca7a0_4fff_87ff_04006c762969/page/Dark%20Launching%20a%20service){:target=_blank} a common service is a means of making a service available in the IBM Cloud for a small number of white-listed consumers. Generally this is done for testing purposes, or to allow Regulated Consumers to decide if the version being released issomething they can use. Additionally, [Dark Launching](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wa0a1d43ca7a0_4fff_87ff_04006c762969/page/Dark%20Launching%20a%20service){:target=_blank} provides a gated approach to get quality feedback from select consumers in order to ensure that something catastrophic will not occur before the new version of the service is made generally available.### Change Management Process Flow![Common Services Change Management Flow](https://pages.github.ibm.com/watson-health-playbook/resources/images/common-services/CM_Flow.jpg)#### Flow Assertions1.  Given that all assumptions above are true    -   When a Common Services Change Request is opened    -   Then a simple Change Request review is performed    -   And all documentation related to architectural changes are confirmed    -   And clear documentation on change is clear2.  Given that the Change Request is valid    -   When the Architectural Risk is evaluated    -   And the Risk that the change would have to cross-market services is determined to be acceptable    -   Then the Change Request will be approved    -   But otherwise, too high of a risk will force it to be rejected.3.  Given that the Change Request is accepted    -   When the Change Request is understood    -   And the Change Request is well documented    -   And a Deployment / Version plan is created for the change    -   Then all Consumers of the Change will be notified of the change    -   And all Consumers will be given details of what the future change will be.4.  Given that the Change in question has NOT been implemented    -   When development resources are available    -   Then the Change will begin the Watson Health Development Process in order to implement the change5.  Given that the Change has been implemented    -   When the change has been assessed as ready for testing    -   Then the Change will be Dark Launched (See previous section) for a predetermined period of time    -   And select service consumers and formal testers will evaluate the change.6.  Given that the Change has been tested    -   When the quality of the change is acceptable    -   Then the change will be deployed as a LIVE version.    -   But otherwise, it will be rejected    -   And a new Change Request with modified requirements will need to be created.### Regulated and Non-Regulated Release SchedulesIt is important to realize that for regulated consumers of a service that require that a particular version of a service be validated and verified, short release schedules may not be possible. Additionally, more releases of a service may need to be running simultaneously to accommodate such V&V processes. This is illustrated in the diagram below:![Regulated Release Version Instances](https://pages.github.ibm.com/watson-health-playbook/resources/images/common-services/dl-reg.jpg)This is not the case for non-regulated services, which can support shorter release schedules, and therefore do not need to keep more than one live instance running the most recent version:![Non-Regulated Release Version Instances](https://pages.github.ibm.com/watson-health-playbook/resources/images/common-services/dl-non-reg.jpg)### Examples to consider:1.  Service data output is modified:    1.  The Watson for Oncology application provides treatment recommendations to oncologists based on cancer patient attributes, recommendations from Memorial Sloan Kettering, and publicly available clinical literature. Suppose in a future state, WFO is running on the IBM cloud and consuming 2 common services: 1) Data De-ID as-a-service and 2) FHIR data ingestion service.        1.  A code change is made in the FHIR data ingestion service to change the format of the output of the patient date of birth attribute from dd/mm/yyyy to mm-dd-yyyy.        2.  The De-ID service calls to the FHIR service to retrieve patient date of birth in order to convert date of birth (PHI) into age (non PHI), but the De-ID service was not aware of the change in the FHIR service format so cannot properly convert the attribute.        3.  Potential outcomes in the WFO application:            1.  Severity 1 example (quality): De-ID service sends an error to the WFO application that the patients information cannot be retrieved from the electronic medical record. The oncologist must manually enter the patients information, resulting in wasted time and a poor NPS score for WFO.            2.  Severity 2 example (security): The De-ID service cannot convert the new date of birth format, therefore sends the raw data directly to the WFO application. The WFO application now displays/stores PHI which it was not enabled for and a privacy violation occurs.            3.  Severity 3 example(safety): The De-ID service is not equipped to error handle the date of birth attribute that it does not recognize, therefore it sends the persisting patient age attribute from the last patient. The oncologist receives treatment recommendations in WFO for the incorrect patient age bracket and a misdiagnoses occurs.2.  Service processing algorithms are modified (no API change)    1.  The Watson for Clinical Trial Matching application provides recommendations for clinical trials that cancer patients may be eligible for/benefit from based on cancer patient attributes, publicly available clinical literature, and clinicaltrials.gov databases. Suppose in a future state, CTM is running on the IBM cloud and obtains clinical literature from 1) the Medical Insights common service which uses 2) the NLP common service.        1.  A code change is made in the NLP service to improve the accuracy. The inputs/outputs of the NLP service are unchanged, but the internal processing algorithms are modified and show improved accuracy at the same speed when testing the standalone service.        2.  The Medical Insights service calls to the NLP service to identify words in a corpus of literature to extract the most relevant articles that provide evidence for the clinical trial match.        3.  Potential outcomes in the CTM application:            1.  Severity 1 example (quality): The Medical Insights service was not aware of the change to the NLP service to which it calls to and has not increased its performance speeds accordingly. The Medical Insights service takes 5 times as long to identify literature due to the larger set of structured data to process from the NLP service. The physician using the CTM application experiences a 20 minute delay in retrieving a clinical trail match for their patient, resulting in a poor NPS score for CTM.#### Considerations:1.  Regulated offerings must prove that all design changes (to code, infrastructure, services) have been successfully tested in a production-equivalent environment before releasing to production.2.  WH must be able to re-create a snapshot of a regulated offering (including versions of underlying services and infrastructure) in the case that an adverse patient safety event is reported and needs to be re-created for investigation.#### Questions to answer:1.  Will all common services be deployed via APIs that are called to by applications or will any common services be consumed by applications by pulling in the code into their own applications?    -   What are the advantages/disadvantages to each model?Potential solutions to consider (assuming a model is enforced that common services must be deployed via APIs (contracts) rather than shared code bases):1.  Default standard process- all consumers will automatically get the newest version of services- services will have automated API tests. If a new attribute is added to the API in a new version of the service, backwards compatibility is maintained and communication of additional features is published through release notes.    1.  Con: Does not address concerns for regulated offerings2.  Potential additional process for regulated offerings- services could keep publishing the same older version without invisibly upgrading teams without warning- it would be up to the offering team to specify which production version they will test against and use    1.  A regulated offering would want to be tied to a version of the service.    2.  Service would need to provide a deprecation schedule- Version 2 will be deprecated 12 months from today (or however long would need it to be maintained for adverse event re-creation and investigation).    3.  Con: Slows down innovation3.  Potential policies to enforce:    1.  API updates must maintain backwards compatibility (good API hygiene)    2.  Enforce strict testing requirements on the services testing to their APIs, rather than testing all offerings/other services.    3.  Anytime services are updated, the API is updated to contain a new version identifier.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/common-services/change-management/index/",
    },
    {
      "title": "Watson Health CI/CD Guidelinesbreadcrumb: CI-CD Guidelinessidebar: dev",
      "text": "---title: Watson Health CI/CD Guidelinesbreadcrumb: CI-CD Guidelinessidebar: dev---Our products help healthcare professionals save lives.  In turn, medical outcomes of their patients depend to an extent on the reliability of our systems.  The adoption of DevOps principles has helped us to maintain software development agility without sacrificing quality, reliability, and regulatory compliance.  We strive to practice continuous integration and delivery.Continuous Integration is a practice by which developers frequently integrate their code into version control, triggering an automated build and test process.  This provides near real-time feedback for developers regarding how their changes will interact with those of their teammates.Continuous Delivery is a practice by which automated builds and tests validate your software so that it can be automatically released into production.  By deploying to production more frequently and in an automated fashion, the risk of introducing breaking changes with any given deployment is greatly reduced.  When breaking changes do occur, the automation process allows easy rollback to a previous known-good version.The diagram below illustrates the standard template for a Watson Health CI/CD pipeline, agnostic of project-specific tooling and technologies.  Each phase of the pipeline will be described in more detail later.  Note that this is merely a template.  Individual projects may require more or fewer phases based on the level of regulation and acceptable risk.Due to the high level of tooling and automation required to achieve this, IBM and Watson Health provide a [common set of tools](../../tools/index/) and implementation patterns to assist project teams on the path to CI/CD.  The goal is for all development teams within WH to use these same tools and patterns.  However, the DevOps transformation process can take time, especially for more mature legacy applications.  Teams managing such software should work with their offering manager to plan incremental improvements.### Local DevelopmentDevelopers iterate on their work locally until ready for integration testing.  Teams should have guidance around which tools (IDE, unit testing framework, linters, etc.) should be used based on the programming stack.  Developers are responsible for unit testing their own code and ensuring adherence to the team’s [coding guidelines](../../developer-guide/coding-standards-basics/).  Once the new code has been unit tested and checked for style, the developer pushes the local branch to a central repository (i.e. [GitHub](../../tools/github/00-getting-started/)).### IntegrationThe integration environment is ideally a sandbox containing all the external components that the software-under-test will interact with.  Integration tests execute against the components in the sandbox to ensure that the software interoperates as designed.  In addition, security/vulnerability scans and performance tests may be executed based on project requirements.  The sandbox may not exactly replicate the production environment setting, it need only host the services to be integrated in isolation.  See the [Data Fabric API Devops Case Study](../case-studies/data-fabric-api/) for a reference implementation of integration sandboxes using Kubernetes namespaces.The advantage of the automated integration sandbox is that developers can work on their branches and receive quick feedback after pushing changes about integration-related regressions.  If the sandbox environments are not feasible due to project-specific constraints, a single integration environment should be constructed for testing branches one at a time prior to merging to master.### AcceptanceThe acceptance environment runs the latest build of the master branch, and provides a target for both manual and automated acceptance testing.  This environment should be as close to production as possible, though likely will not include production data artifacts.In addition to acceptance tests, security/vulnerability scans and performance tests may be executed based on project requirements.### StagingThe staging, pre-production, or release candidate environment is a near-perfect clone of the production environment.  Its purpose is to provide final validation that the software deployment process will run smoothly on the production environment, tests execute successfully, and performance and security match expectations.  For some projects, the staging environment may be alternated with production in a prod/off-prod or blue/green deployment strategy.  For projects complying with Watson Health QMS standards, functional verification tests and user need validation tests must be performed prior to release and must each trace back to functional requirements.### ProductionThe production environment serves the product to the customer.  Deployment to production should be automated to the greatest extent possible to eliminate human error and inconsistencies.  After a successful deployment, a subset of “production-safe” integration tests or “smoke tests” should be executed to ensure operation.  These tests should be executed periodically, and failures should alert an on-call operator.  If integration or smoke testing fails, the last known good state is deployed to production, staging, and acceptance.  This ensures all three environments remain in sync.Highly regulated products likely cannot achieve this level of automation through to production.  However, full automation up to production still provides many of the same benefits.  Teams can still achieve continuous integration during development, and continuous delivery should proceed to the latest possible environment, stopping short of production.  While a manual change control process may be required to trigger the deployment to production, the deployment process itself should be automated and identical to that used for deployment to Staging.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/continuous-delivery/index/",
    },
    {
      "title": "CI Case Study - Data Fabric APIbreadcrumb: Data Fabric APIsidebar: dev",
      "text": "---title: CI Case Study - Data Fabric APIbreadcrumb: Data Fabric APIsidebar: dev---## Coming Soon!",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/continuous-delivery/case-studies/data-fabric-api/",
    },
    {
      "title": "Common Services Architecture Council Reviewsidebar: dev-dapbreadcrumb: AC Review",
      "text": "---title: Common Services Architecture Council Reviewsidebar: dev-dapbreadcrumb: AC Review---## What is the Architecture Council?[The Architecture Council](../../common-services/definition-process/#architecture-council) is made up of key architecture and development leaders who have the skills and background to assess recommendations for Watson Health Common Services and are ultimately the responsible for the final disposition of whether a service should be made into a common service.## How do I get started?In order for the Architecture Council to effectively review a service for technical viability as a WH Common Service, it is imperative that the [WH Common Services Process](../../common-services/index/) be reviewed, and that an [Initial High-Level Architecture](../initial-hl-architecture/), which is an earlier step in the Define and Prove phase of the WH Development Process.The high-level architecture, among other key aspects needed for the Architecture Council to perform a review, need to be documented by the Offering Manager in a [Definition Package](../../../om/define-and-prove/start-cs-def-package/), which should have also been started earlier in this phase of the WH Development Process.Steps 1 through 6 below should have been completed in previous process flow steps in the WH Development Process. However they are documented below since these steps are of particular relevance to the AC Review.### Step by step1. Collect all current architectural design documentation:    1. [Initial High-Level Architecture](../initial-hl-architecture/)    2. Key Use Cases should have been documented as part of the [Solution Architecture](../begin-sol-arch/) task.2. Collect any documented [Technical Foundation](../doc-tech-foundation) and other [operational](../op-hello-world/) material.3. Collect any [Wireframes](../../../design/define-and-prove/design-wireframe-prototype/) and [Design Experience Architecture](../../../design/define-and-prove/doc-exp-arch/).4. Collect any documented requirements such as [Hills](../../../om/define-and-prove/create-new-hills/) and [Epics](../../../om/define-and-prove/develop-epics-groom-backlog/).5. Collect any regulatory and compliance assessment results (e.g. [GDPR](../../../compliance/define-and-prove/gdpr-triage/), [HIPAA](../../../compliance/define-and-prove/hipaa-assessment/), [PSRA](../../../compliance/define-and-prove/psra-assessment/)) and the result of a [GxP Architectural Assessment](../assess-hl-arch-gxp/)6. Incorporate all of the above into the [Definition Package](../../../om/define-and-prove/start-cs-def-package/).7. Request an Architectural Council Review, and provide the Definition Package.    1. The AC Review will evaluate if the required documentation is sufficient to give a picture of the architectural risks, operational issues, changes needed to an existing solution, and so on that will be required to either develop a new WH Common Service, or refactor an existing service to become a WH Common Service.    2. The AC Review could determine that the risks are too high to proceed as a WH Common Service, in which case a suitable alternate deployment and usage scenario should be suggested that will not incur significant financial risk.8. The outcome of the AC Review should be documented and recorded in Jira and Confluence (_VIDEO_)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/define-and-prove/ac-review/",
    },
    {
      "title": "Apply for slot in CDT Sandbox Environmentsidebar: dev-dapbreadcrumb: Apply for Sandbox",
      "text": "---title: Apply for slot in CDT Sandbox Environmentsidebar: dev-dapbreadcrumb: Apply for Sandbox---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/define-and-prove/apply-for-sandbox/",
    },
    {
      "title": "Begin Solution Architecturesidebar: dev-dap-archbreadcrumb: Begin Solution Architecture",
      "text": "---title: Begin Solution Architecturesidebar: dev-dap-archbreadcrumb: Begin Solution Architecture---## How do I get started?Continuing from the [initial high-level architecture](../initial-hl-architecture/), increasing the level of detail, iterating on the Architectural Overview and Use Cases defined in [Cognitive Architect](../../../tools/ca/), as well as beginning a component and operational model are important next steps in detailing out the Solution Architecture.- _Note: [Cognitive Architect](../../../tools/ca/) contains a way to capture Functional and Non-Functional Requirements. You can use CA to initially capture your requirements there, especially any Non-Functional requirements pertaining to the technical Architecture. However, once the [high-level Epics have been decomposed and approved in Aha!](../../planning-and-tracking-work/ongoing-delivery), be sure to work with Offering Management to align any technical requirements with high-level Hills and Epics, since they will be what defines the scope of the offering. Additionally, once the corresponding requirements have been [created in Jira](../../../tools/jira/jira_decomposing_hl_requirements), the requirements you have documented in Cognitive Architect will need to be used to guide decomposition of the high-level Epics into [System Level requirements](../../../tools/jira/jira_decomposing_hl_to_sl) and [Detailed Level requirements](../../../tools/jira/jira_decomposing_sl_to_dl) (also in Jira)._The [DEVELOP phase of Team Solution Design](http://method.ibm.com/rmchtml_teamsd/index.htm#process.tech.teamsd.base-ibm_int/deliveryprocesses/develop_and_agree_to_client_solution_54C3D910.html?proc=_r0U7sb1HEdyrVscmNb_pGw&path=_r0U7sb1HEdyrVscmNb_pGw,_VuARsI8lEd2tn4QxorRg1Q,_f4FaYekLEd-IPpFA2ds-HA){:target=_blank} contains guidance on the creation of the High Level Component Model, Operational Models.While the Architect is the primary role that finishes the above, the Development Lead will generally take a larger role at this point and start filling in any technical details with the Architect, elaborating on Use Cases, Operational and Component models to better define the needs of the offering.In addition, the Development Lead will also start detailing out any behavioral and static diagrams such as Collaboration, Activity, and Class diagrams. Cognitive Architect has the ability to do Collaboration diagrams, which are useful for Component interactions, however you will likely need to use a different tool such as Rational Software Architect, or Visio to do Activity, Class or other detailed UML diagrams.Iterating on the [System Architecture template](https://lsgrcoe-csfe-1.ibmcloud.com/OTCS/cs.exe?func=ll&objaction=overview&objid=10344960){:target=_blank} which was started in the [initial high-level architecture task](../initial-hl-architecture/), the above diagrams should be incorporated into a more detailed and complete version of the document in progress.### Step by step1. Working in [Cognitive Architect](http://ibm.biz/cogarch-app){:target=_blank}, continue elaborating on the high-level architecture to provide more detail (_VIDEO_)    1. Capture any technical requirements in Cognitive Architect that could be useful down the road during the detailed requirement grooming and decomposition tasks in [Build and Deliver](../../build-and-deliver/index/).    2. Create Component and Operational Models.2. Begin working with the Development Lead on the technical static and behavioral diagrams (e.g. Class, Object Interaction, Activity...)3. Update the Sytem Architecture document with the detail above and keep iterating until all sections are accounted for in the template.4. Create a new version of the document and [upload it to Confluence](../../../tools/confluence/). (_VIDEO_)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/define-and-prove/begin-sol-arch/",
    },
    {
      "title": "Conditional Commit Release Plansidebar: dev-dapbreadcrumb: Conditional Commit Release Plan",
      "text": "---title: Conditional Commit Release Plansidebar: dev-dapbreadcrumb: Conditional Commit Release Plan---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/define-and-prove/cond-commit-rel-plan/",
    },
    {
      "title": "Create Design Planning Reviewsidebar: dev-dapbreadcrumb: Create Design Planning Review",
      "text": "---title: Create Design Planning Reviewsidebar: dev-dapbreadcrumb: Create Design Planning Review---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/define-and-prove/create-design-planning-review/",
    },
    {
      "title": "Create Project Development Plansidebar: dev-dapbreadcrumb: Create Project Development Plan",
      "text": "---title: Create Project Development Plansidebar: dev-dapbreadcrumb: Create Project Development Plan---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/define-and-prove/create-proj-dev-plan/",
    },
    {
      "title": "Document Technical Foundationsidebar: dev-dap-tfbreadcrumb: Document Technical Foundation",
      "text": "---title: Document Technical Foundationsidebar: dev-dap-tfbreadcrumb: Document Technical Foundation---## Technical Foundation Hills and EpicsTechnical Foundation are Non-Functional Hills and Epics that define qualities of a service such as performance targets, security, data requirements, and so forth. These Technical Foundation requirements are generally documented by the Development Leads and the Architect.## How do I get started?During the [initial high-level architecture task](../initial-hl-architecture/) task, [Cognitive Architect](../../../tools/ca/) was used to start capturing architectural concepts and diagrams. During the high-level architecture tasks, [Cognitive Architect](../../../tools/ca/) should have been used to also start capturing Non-Functional requirements is response to the high-level architecture work. Continue to iterate on the high-level architecture and capture NFRs in this fashion. Then, use these NFRs to create Technical Foundation Hills and Epics in [Aha!](../../../tools/aha/).### Step by step1. Refine Technical Foundation (NFR) Hills and Epics in [Cognitive Architect](../../../tools/ca/) as Non-Functional Requirements until you are satisfied you have a good cross-section of the required non-functional focus.2. Examine any Architectural Decisions that may produce further Technical Foundation requirements.3. Define, in [Aha!](../../../tools/aha/), Hills and Epics that represent the NFRs documented in [Cognitive Architect](../../../tools/ca/).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/define-and-prove/doc-tech-foundation/",
    },
    {
      "title": "Ensure Development Tools are Identified (Draft)sidebar: dev-dapbreadcrumb: Ensure Dev Tools are Identified",
      "text": "---title: Ensure Development Tools are Identified (Draft)sidebar: dev-dapbreadcrumb: Ensure Dev Tools are Identified---## Development Tools Listed in the Product Development Plan (PDP)Per the GxP assessment (WH_QMS_SOP_0005 v3.0), an Offerings tools must listed in the PDP for all Offerings at WH.These tools, per Design Control SOP (WH_QMS_SOP_0002), are all automated/computerized system tools used to design, run  tests, document evidence of control, sign electronically, and aid any other processes  shall be subject to assessment per the Master Regulatory Asset Planning SOP WH_QMS_SOP_0023.There is no difference in the rigor or level of detail of the tools listed in the PDPs for Offerings that are:GxP:  Subject to GxP regulations (WH_QMS_SOP_0005; see section 6.2.3)- For MRAP: The tools listed in PDPs for Offerings are added to the MRAP for inventory purposes. Each tool will be GxP  Assessed. Validation, as applicable, will be performed to ensure the tool operates as intended.GxPLite:  May become subject to GxP regulations (WH_QMS_SOP_0005; see section 6.2.4)- For MRAP:  The tools listed in PDPs for Offerings are added to the MRAP for inventory purposes. Each tool will be GxP Assessed. Validation, as applicable, will not be actioned at this point of time, unless needed.Non-GxP:  Not subject to GxP regulations (WH_QMS_SOP_0005; see section 6.2.5)- For MRAP:  For Offerings that are not subject to GxP regulations, there is no requirement to add tools to MRAP.### Step by step1. MRAP (Master Regulatory Asset Plan) is the the process used by the tools validation team to record, track and report tool inventory within Watson Health.2. MRAP relies on the PDP (Product development plan) as the true source of tools used against a regulated offering.3. The author of the PDP must check [MRAP inventory](https://ibmwh.clm.ibmcloud.com/ccm/web/projects/WH%20Master%20Regulatory%20Asset%20Planning#action=com.ibm.team.dashboard.viewDashboard&tab=_28){:target=_blank} to ensure tools defined in the PDP document are in [MRAP inventory](https://ibmwh.clm.ibmcloud.com/ccm/web/projects/WH%20Master%20Regulatory%20Asset%20Planning#action=com.ibm.team.dashboard.viewDashboard&tab=_28){:target=_blank}4. Tools which are marked active available in MRAP have been assessed and validated (as applicable) and are available for use.5. Where a tool listed on the PDP is not in MRAP, has delta in version or intended use, a tool request is required to [submit tool to inventory](https://ibmwh.clm.ibmcloud.com/ccm/web/projects/WH%20Master%20Regulatory%20Asset%20Planning#action=com.ibm.team.workitem.newWorkItem&type=com.wh.team.workitem.workitemType.mrapAsset&ts=15451326540040){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/define-and-prove/ensure-dev-tools-identified/",
    },
    {
      "title": "Define and Provesidebar: dev-dapbreadcrumb: Define And Prove (Dev)",
      "text": "---title: Define and Provesidebar: dev-dapbreadcrumb: Define And Prove (Dev)---# DRAFT (Coming Soon!)Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Define and Prove phase tasks relevant to Development_- _Hover OVER the task to see who OWNS the task_- _Tasks marked with a GxP Only label can be skipped for non-regulated offerings_- _Tasks marked with a CS Only label can be skipped for offerings that are NOT common services_<!--                                                                                                                                        -->                  svg {          background-image: url(https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/flows/vs-define-and-prove-dev.jpg);          background-size: 100% 100%;          background-repeat: no-repeat;          max-width: 900px;          width: 90%;        }        path {          fill: transparent;          cursor: pointer;          transition: fill 0.2s;        }        svg a:focus,        svg a:hover {          outline: none;        }        svg a:focus path,        svg a:hover path {          fill: rgba(255,255,0, 0.15);          cursor: pointer;       }                            OWNER: Project Manager - Create Project Development Plan                                    OWNER: Architect - Initial High Level Architecture                                    OWNER: Offering Manager - Start Common Services Definition Package                                    OWNER: Offering Manager - Create New Hills                                    OWNER: Operations - Operational Hello World                                    OWNER: Dev Lead - Document Technical Foundation                                    OWNER: Designer - Document Experience Architecture                                    OWNER: Dev Lead - Apply for slot in CDT Sandbox Environment                                    OWNER: Architect - Begin Solution Architecture                                    OWNER: Offering Manager - Determine Development Tool List                                    OWNER: Designer - Design Wireframe Prototype                                    OWNER: Offering Manager - GDPR Triage                                    OWNER: Offering Manager - Data Access Compliance Board                                    OWNER: Offering Manager - Content Governance Review                                    OWNER: Offering Manager - Data Governance Review                                    OWNER: Offering Manager - HIPAA Assessment                                    OWNER: Offering Manager - Privacy and Security Risk Assessment                                    OWNER: Offering Manager - GDPR Assessment                                    OWNER: Designer - Usability Study and Validate Prototype                                    OWNER: Offering Manager - Finish GxP Assessment                                    OWNER: DQA - Appropriate GxP Level Training                                    OWNER: Offering Manager - Ensure Data Governances is Understood                                    OWNER: Tools V&V Team - Ensure Development Tools are Identified                                    OWNER: Offering Manager - Conduct Tool GxP Assessment                                    OWNER: Offering Manager - Review and Approve Hills                                    OWNER: Offering Manager - Develop Epics and Groom Backlog                                    OWNER: Offering Manager - Refine Epics                                    OWNER: Architect - AC Review                                    OWNER: Release Manager - SRB Engagement Request                                    OWNER: Project Manager - Create Design Planning Review                                    OWNER: Offering Manager - Create Release Ask                                    OWNER: Release Manager - Conditional Commit Release Plan                                    OWNER: Offering Manager -Create Commitment Pitch                                    OWNER: Offering Manager - Playback 0                                    OWNER: Offering Manager - Commitment Pitch Playback                    ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/define-and-prove/index/",
    },
    {
      "title": "Initial High Level Architecturesidebar: dev-dap-archbreadcrumb: High Level Architecture",
      "text": "---title: Initial High Level Architecturesidebar: dev-dap-archbreadcrumb: High Level Architecture---In an Unregulated environment, Architecture should follow the same templates as the Regulated projects, however formal sign off is not required (see: [Step by Step](#step-by-step) section below)For regulated offerings, please see [Regulatory Considerations](../../../compliance/regulatory-considerations/)### Method Inputs to System Architecture documentsThe following artifacts should be created early in order to gain a better understanding and visualize the requirements scope, API needs, key stakeholders, and components. Many of the following can also be found as part of [MethodWeb](https://w3-01.ibm.com/services/methodweb/MethodWebUMF/index#/home){:target=_blank} in the following processes:-   [Application Development 2.0 UMF delivery process](http://method.ibm.com/rmchtml_ad_20/index.htm#core.default.nav_view.extend-ibm_lic/guidances/supportingmaterials/welcome_umf_B16D0AC2.html){:target=_blank}-   [Team Solution Design](http://method.ibm.com/rmchtml_teamsd/index.htm#core.default.nav_view.extend-ibm_lic/guidances/supportingmaterials/welcome_umf_B16D0AC2.html){:target=_blank}Regardless of whether the project is Regulated or Unregulated, there are a series of architectural diagrams that should be produced as part of Architectural Modeling and included as part of the System Architecture document:-   System Context    -   The System Context is one of the most important diagrams that can be produced in conjunction with the Architectural Overview. The System Context provides a concise way to describe how the Service will fit with all other applications and system that will interact with it. The System Context, if maintained, can always be used to summarize the interactions that are expected of the Service.-   Architectural Overview Diagrams    -   The Architectural Overview is a living diagram that provides various component viewpoints on what the Service is made up of. Used in conjunction with the System Context, it provides a solid view of what the architecture of the Service is. Usually, an Architectural Overview describes three main viewpoints (however it does not need to be limited to these):        -   Logical Component View            -   The Logical Component View represents a conceptual decomposition of the architecture. It answers the question, What are the big capabilities that the Service needs to do in order to meet its requirements and interaction contracts?            -   The Logical Component View can also be used to show how information could flow through the system.-   Use Cases    -   Generally, Use Cases are one of the first things created after the System Context. They are simple stories told from the perspective of an User/Actor (Human or System). Use Cases shouldnt be overly detailed but provide enough information to describe how the system could be used.    -   Use Cases also can be used as a solid basis for further decomposition of high-level requirements into detailed level requirements which then can be tied to real work breakdown tasks.    -   Use Cases are also good tools to help further develop the Logical, Physical and Deployment Architectural Viewpoints.-   Behavioral Diagrams    -   System Sequence Diagrams        -   Once a solid understanding of Physical Component View exists, System Sequence diagrams can be used to further detail the data flows between the physical components.    -   Component Interaction Diagrams        -   At the Logical Level, Component Interaction Diagrams should be used to sketch out the possible logical data interactions. This will be input to System Sequence Diagrams.    -   Activity Diagrams        -   Activity Diagrams are extremely useful for understanding processes within a component without specifying how it should be implemented.## How do I get started?All of the diagrams above along with capturing key architectural documentation should be done in the [Cognitive Architect](../../../tools/ca/) on-line architecture tool. This will ensure that teams can share architectural diagrams easily as well as provide a way for teams to access the architectural model on-line. The architectural model can be exported as power-point presentation.Once the [EXPLORE phase of Team Solution Design](http://method.ibm.com/rmchtml_teamsd/index.htm#process.tech.teamsd.base-ibm_int/deliveryprocesses/explore_options_and_approach_FAAACAF1.html?proc=_r0U7sb1HEdyrVscmNb_pGw&path=_r0U7sb1HEdyrVscmNb_pGw,_VuARsI8lEd2tn4QxorRg1Q,_e9hPkekLEd-IPpFA2ds-HA){:target=_blank} has been sufficiently documented, there should be enough architectural fidelity where further detailed design can begin.If this Architecture is for a Common Service, please refer to the [WH Common Services Process](../../common-services/index/) for architectural considerations that will affect this architecture.### Step by step1. Create a architectural model for the solution in [Cognitive Architect](http://ibm.biz/cogarch-app){:target=_blank} (_VIDEO_)2. Create a System Context, a set of Architectural Overview diagrams, Use Cases for key scenarios, Logical Component Diagram, and any behavioral diagrams needed. (_VIDEO_)3. Additionally, document any Architectural Decisions that will dramatically affect the architecture (if they are known).4. Once the high level architecture is completed in Cognitive Architect, download the official [System Architecture template](https://lsgrcoe-csfe-1.ibmcloud.com/OTCS/cs.exe?func=ll&objaction=overview&objid=10344960){:target=_blank} and copy the completed diagrams and content into the standard template.    - The standard System Architecture template contains a large number of sections that cover high level as well as detailed level design. Only focus on what is needed for high-level architectural design, as you will return to this template to iteratively update it as you progress through the development process.5. Once an initial version of the template has been filled out, [upload it to Confluence](../../../tools/confluence/). (_VIDEO_)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/define-and-prove/initial-hl-architecture/",
    },
    {
      "title": "Operational Hello Worldsidebar: dev-dap-opsbreadcrumb: Operational Hello World",
      "text": "---title: Operational Hello Worldsidebar: dev-dap-opsbreadcrumb: Operational Hello World---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/define-and-prove/op-hello-world/",
    },
    {
      "title": "Security Review Board Engagement Requestsidebar: dev-dapbreadcrumb: SRB Engagement Request",
      "text": "---title: Security Review Board Engagement Requestsidebar: dev-dapbreadcrumb: SRB Engagement Request---## Security Review Board - Request for ReviewAt this point, it is necessary to formally request a review by the Security Review Board in order to review the architectural choices as well as help to identify any security issues early in the design process. The Release Manager is responsible for downloading all templates, filling them out, and posting them back to the correct location to initiate the SRB Process.## How do I get started?For a detailed understanding on the steps required for engaging the Security Review Board, please refer to [WH_SUPP_SOP_0001](https://lsgrcoe-csfe-1.ibmcloud.com/OTCS/cs.exe?func=ll&objaction=overview&objid=6863464){:target=_blank}. Additionally, for instructions for engaging the SRB and templates required when performing a security review, please see the [SRB page on the WH Security Community](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W2aa54e019361_46c3_83ac_131c80045388/page/SRB%20-%20Security%20Review%20Board){:target=_blank}.### Step by step1. Download and read [WH_SUPP_SOP_0001](https://lsgrcoe-csfe-1.ibmcloud.com/OTCS/cs.exe?func=ll&objaction=overview&objid=6863464){:target=_blank}2. Visit the [SRB page on the WH Security Community](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W2aa54e019361_46c3_83ac_131c80045388/page/SRB%20-%20Security%20Review%20Board){:target=_blank}, read the section on _How the SRB Process Works_3. Complete any required templates listed in #2 above, then follow the instructions to post the completed templates.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/define-and-prove/srb-request/",
    },
    {
      "title": "Armada for Watsonbreadcrumb: Armadasidebar: dev",
      "text": "---title: Armada for Watsonbreadcrumb: Armadasidebar: dev---This site contains documentation about Watsons use of Armada (Kubernetes managed by IBM Cloud team).This is NOT meant to replace the Armada teams documentation, but to document Watsons usage conventions and details about our cluster(s).## Frequently Asked Questions [FAQ About Watsons Armada Configuration/Administration](https://ibm.enterprise.slack.com/files/seharris/F53KR8B6H/Frequently_Answered_Questions/){:target=_blank}## Overview NOTE: Armada for Watson varies slightly from the Armada retail version. See the [Armada for Watson](armada-watson/) section for details. [Armada Architecture Overview](https://ibm.ent.box.com/notes/112926922958){:target=_blank} [Armada Architecture Details](https://github.ibm.com/alchemy-containers/armada/blob/master/architecture/architecture.md){:target=_blank} [Armada Internal User Documentation](https://console.stage1.ng.bluemix.net/docs/containers/cs_internal.html){:target=_blank} [Armada for Watson](armada-watson/) [Watson HA on Armada](armada-watson#ha)## General Kubernetes Links (Suggestions welcome here) [Kubernete Main Site](https://kubernetes.io/){:target=_blank} [Kubernetes Gets a Children’s Book](https://thenewstack.io/kubernetes-gets-childrens-book/){:target=_blank} [Local Kubernetes Setup with simulated Dev and Production](https://thenewstack.io/tutorial-configuring-ultimate-development-environment-kubernetes/){:target=_blank}## Guidance [Shared Cluster](armada-watson/guidance) [Base Images]armada-watson/(guidance#base-images) [Example Code (aka Hello World/)](armada-watson/guidance#examples) [Logging](armada-watson/guidance#logging) [Metrics](armada-watson/guidance#metrics) [Building Images and Promoting Them](armada-watson/guidance#image-build-and-promotion) [Persistent Storage](armada-watson/guidance#persistent-storage)## Collaboration [Slack](armada-watson/collaboration#slack) [Daily Standup](armada-watson/collaboration#daily-scrums) [GHE](armada-watson/collaboration#ghe-repos) [Support](armada-watson/collaboration#support)## Environments [Clusters](armada-watson/environments/)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/armada-watson/",
    },
    {
      "title": "Behavior Driven Development (BDD) with Cucumber in Javabreadcrumb: BDDsidebar: dev",
      "text": "---title: Behavior Driven Development (BDD) with Cucumber in Javabreadcrumb: BDDsidebar: dev---## Overview[Cucumber](https://cucumber.io){:target=_blank} is a commonly used tool used to facilitate Behavior Driven Development (aka BDD).  BDD is a pattern-based practice that provides an agreed-upon contract between not only developers and testers, but among the whole team. Everyone can look to the expected behavior and understand what must be delivered.Cucumber takes plain english written in the [Gherkin syntax](https://github.com/cucumber/cucumber/wiki/Gherkin){:target=_blank} and generates code stubs. You can then code to the BDD and your passing automated tests become the proof that youve built what we need to be built.> ProTip: While examples on this page are provided in Java, Cucumber is available for nearly every language. The [Gherkin syntax](https://github.com/cucumber/cucumber/wiki/Gherkin){:target=_blank} is the same no matter what language you work in.## Project setup (Java)If youre going to get up and running with Cucumber, you will want to have your project properly laid out.  This will save headaches in the future.  For sanity sake, projects using Cucumber should start adopting the [standard Maven project layout](http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html){:target=_blank}```bashsrc/main/java - Java Applicationsrc/main/webapp - Webapp (jsp, html, js, web.xml, etc)src/main/resources - Java Application resourcessrc/test/java - JUnit / Functional testssrc/test/resources - JUnit / Functional test resourcessrc/it/java - Integration Tests (this is where Cucumber implementation will live)src/it/resources - Integration Test resources (this is where the Cucumber/Gherkin .feature files will live)```## Maven pom.xml Changes (Java)If you want to start using Cucumber, you will need to add the following dependencies to your Maven projects pom.xml```xml            info.cukes        cucumber-junit        1.2.2        test                    info.cukes        cucumber-guice        1.2.2        test                  com.google.inject        guice        3.0                  junit      junit      4.11      test      ```For more advanced usage (i.e. if you want to start a web server and stop a web server, before and after integration test runs), you can do something along the lines of [this article](http://www.weblogism.com/item/334/integration-tests-with-cucumber-jvm-selenium-and-maven){:target=_blank}## Creating a Feature file and defining ScenariosWe are going to use an Authentication scenario as an example here.Create the following file:```src/it/resources/com.ibm.watson.bdd.example/authentication.feature```Example of a Gherkin Feature file (with Scenarios)``` gherkinFeature: Authentication and authorization    As a developers    I want to ensure that users are authenticated before using a service    so that I know that all actions are securedScenario Outline: Unauthenticated User    Given an unauthenticated user    And a request to feature     When the user submits the request    Then the request will be deniedExamples:| feature       || create      || get_status  || classify    || list        || delete      |Scenario Outline: Unauthorized User    Given an authenticated user    And a request to feature     And the user is not authorized to access the requested pipeline    When the user submits the request    Then the request will be deniedExamples:| feature       || create      || get_status  || classify    || list        || delete      |```## Creating a Cucumber RunnerCreate a new class file: ```src/it/java/com.ibm.watson.bdd.example/ITApp.java``````javapackage com.ibm.watson.bdd.example;import org.junit.runner.RunWith;import cucumber.api.junit.Cucumber;@RunWith(Cucumber.class)public class ITApp {}```This class is simple.  There are some other annotations that you can make, such as @CucumberOptions() where you can define which tags this test will run (if you want to setup multiple JUnit runners) or formatting and output locations for reports.## Running Integration TestsIf using eclipse, you can run ITApp as a JUnit test and you will see the output results.  If you are running maven, you will have to do some extra configuration.  When this is configured you can run via the command line with ```mvn verify``` on the project, you will see a similar console output.You should realize at this point that we havent defined any code to implement any of our integration tests yet.  Cucumber has generated stubs that we can use.  We will use those in our next steps.## Defining StepsCreate a new class file: ```src/it/java/com.ibm.watson.bdd.example/AuthenticationSteps.java```In this file we will take the stubs and copy them into the source.  You should get some errors about missing imports, fix them and re-run the tests.  This time, JUnit will still be green (unless you are running Cucumber in strict mode), but you will see output with TODO warnings about implementing the methods.  If you look at each individual step in the JUnit view, you will see that they are still marked out, so youre not quite done.Your file should look something like this:```javapublic class AuthenticationSteps {    @Given(^an unauthenticated user$)    public void an_unauthenticated_user() throws Throwable {        // Write code here that turns the phrase above into concrete actions        throw new PendingException();    }    @Given(^a request to feature \(.?)\$)    public void a_request_to_feature(String arg1) throws Throwable {        // Write code here that turns the phrase above into concrete actions        throw new PendingException();    }    @When(^the user submits the request$)    public void the_user_submits_the_request() throws Throwable {        // Write code here that turns the phrase above into concrete actions        throw new PendingException();    }    @Then(^the request will be denied$)    public void the_request_will_be_denied() throws Throwable {        // Write code here that turns the phrase above into concrete actions        throw new PendingException();    }    @Given(^an authenticated user$)    public void an_authenticated_user() throws Throwable {        // Write code here that turns the phrase above into concrete actions        throw new PendingException();    }    @Given(^the user is not authorized to access the requested pipeline$)    public void the_user_is_not_authorized_to_access_the_requested_pipeline() throws Throwable {        // Write code here that turns the phrase above into concrete actions        throw new PendingException();    }}```At this point, you will start to stub out and define behavior for each of these methods.  The example below is one way that you might go about defining/stubbing out these steps.  In practice, take these one step at a time, but for the sake of this example we will stub out most of the details.  If you run this example with JUnit, everything will be green and all of your tests will be passing!  Except, youre still not done - this example is just a simple form of the outline of your behavior.  This is where you start to refactor your code.```javapublic class AuthenticationSteps {    Pipeline pipeline;    User user;    Request request;    RequestResult result;    @Before    public void before(){        pipeline = new Pipeline();    }    @Given(^a request to feature \(.?)\$)    public void a_request_to_feature(String feature) throws Throwable {        request = new Request(feature);    }    @Given(^the user is not authorized to access the requested pipeline$)    public void the_user_is_not_authorized_to_access_the_requested_pipeline() throws Throwable {        assertFalse(pipeline.isAuthorized(user));    }    @When(^the user submits the request$)    public void the_user_submits_the_request() throws Throwable {        result = request.submit(pipeline, user);    }    @Then(^the request will be denied$)    public void the_request_will_be_denied() throws Throwable {        assertTrue(result.isDenied());    }    @Given(^an unauthenticated user$)    public void an_unauthenticated_user() throws Throwable {        user = new User();    }    @Given(^an authenticated user$)    public void an_authenticated_user() throws Throwable {        user = new User();        user.authenicate();    }    class Pipeline {        boolean isAuthorized(User user){            return false;        }    }    class User {        boolean authenticated = false;        public void authenicate(){            authenticated = true;        }        public boolean isAuthenticated() {            return authenticated;        }    }    class Request {        String feature;        public Request(String feature){            this.feature = feature;        }        public RequestResult submit(Pipeline pipeline, User user){            return new RequestResult();        }    }    class RequestResult {        boolean isDenied(){            return true;        }    }}```## Refactor & IterateAt this point, you would start to refactor and move out things that should exist in actual application logic.  Things like Pipeline and User might be moved into their own classes in src/main/java and the implementation of the methods would be filled in.  Maybe Request and RequestResult are switched over to a standard REST framework (such as REST Assured, Apache Wink, or Apache HTTP Client) and those details get filled in.  You will continue to break code by filling in implementation details, the tests will fail, then you will fix them and turn the tests green again.  Try to keep thing simple and move one method or behavior at a time.  Iterate over these details until your integration test and application details are fully e-mailed.## What happens when you want to share common steps?Now were going to introduce another wrinkle into this - we have another feature or set of features and they all want to authenticate a user and be able to send out requests.  It doesnt make sense to keep all of these items in AuthenticationSteps - since theyre shared.  What are some potential solutions?Abstract Class - if we have a bunch of API requests that are going to be using Users, Requests, RequestResults, and Pipelines, maybe we refactor AuthenticationSteps to be AbstractApiSteps.  Then we have unique API steps (for example create, get, delete, update) and each of those is an extension of this class.  What happens?  Cucumber wont allow this, because when it finds the steps for Given an authenticated user or When the user submits the request as examples, the Cucumber Container wont know which instance to use (create, get, delete, update?) and will throw an error, since each of those instances technically has a mapping for that step.Dependency and Delegation (Manually) - You could define singleton classes or factory/registry objects for tracking between steps so that you know that objects are being passed between functions the way you intend.  This would be akin to what is below.  Then, suddenly youre finding yourself coding up registries and factories for each of your objects.  You also have to deal with thread safety - what happens when Cucumber is running multiple scenarios at once?  What other bugs might pop up in your code?  How are you going to handle configuration?```javapublic class CommonObject {    static CommonObject getInstance(Context context){ ... }}public class Steps1 {   CommonObject common;   public Steps2(){      common = CommonObject.getInstance(someScenarioContext);   }    @When(^the first thing happens$)    public void the_first_thing_happens(){          doSomething(common);    }}public class Steps2 {   CommonObject common;   public Steps2(){      common = CommonObject.getInstance(someScenarioContext);   }    @When(^the other thing happens$)    public void the_other_thing_happens(){          doSomethingElse(common);    }}```Dependency Injection - Were going to change things over to using Google Guice as our dependency injection framework (it was set to use Pico Container in a previous version of this wiki, double check that your Maven pom.xml reflects the dependencies listed above).  Cucumber already knows how to handle Dependency Injection and its actually a pretty decent pattern and development practice to use - and will make designing for tests a little easier with less code to get up and running.```javapublic class CommonObject {    ....}@ScenarioScoped <-- This means that Steps1 will have a new instance created for each Scenario that gets runpublic class Steps1 {   @Inject CommonObject common;   @When(^the first thing happens$)    public void the_first_thing_happens(){          doSomething(common);    }}@Singleton <-- This means that Steps2 will have one instance created that is shared during EVERY scenario runpublic class Steps2 {   CommonObject common;   @Inject   public Steps2(CommonObject common){      common = CommonObject.getInstance(someScenarioContext);   }    @When(^the other thing happens$)    public void the_other_thing_happens(){          doSomethingElse(common);    }}```This is essentially two different ways of doing the same thing, minus the @ScenarioScoped and @Singleton annotations on the classes.  What the DI (Dependency Injection) container will do here is pass or create an instance of CommonObject.  The objects are scoped and handled for you.  On the Step classes, if you dont supply an annotation, it will assume that for each test step (i.e. When the first thing happens, When the other thing happens) a new instance of the class containing the steps should be created.If you are trying to share state between calls to steps in the same class, this can be problematic:```javapublic class BadSteps {  @Inject CommonObject common;   <--- Lets assume that a new CommonObject has a field name, with a default value of old name@When(^update common object$)    public void update_common_object(){          assertEquals(common.getName(), old name);  <!-- remember, were assuming this is true          common.setName(new name);  <--- the state will be updated on this CommonObject    }@Then(^check common object was updated properly$)    public void check_common_object_was_updated_properly(){         assertEquals(common.getName(), new name);  <--- this will actually be a completely new CommonObject and wont be true, because the state was only set on the previously used CommonObject    }}```If you can keep the scope of the objects in mind, you shouldnt have problems running within the framework and youll have a better understanding of the states your tests are in.---### Best PracticesKeeping Sanity- Use annotations to restrict trying to create/define the steps of one feature at a time (based on tags)- Use tags in your feature files...Steps/Glue Code & DRYOrganize your steps in an OO fashion - this is made much simpler by using the DI framework listed aboveEx: you have Create, Update, Delete, List featuresAll features have request related actions to an APIPull those request related actions into a RequestSteps classYou might find step definitions (i.e. the user requests a pipeline and the user asks for a pipeline) that show up in different feature files, but should be collapsed into a single definition and actionAbstraction & YAGNIStart with stubs, only code the MINIMUM possible neededDont get ahead of yourself and try to start refactoring anticipating what is comingYou will start to see common themes - avoid Analysis ParalysisRefactor based on those themes and code smellsBy keeping things OO and high level, you will see what is needed across all iterations of your testing (i.e. Network [REST Assured] or UI [Selenium]) that might be describing the SAME behaviorStart filling in implementation details around those shells and turn things that need multiple variations into Interfaces or Abstract Classes## Dependency Injection and Abstraction - How to Design for Test and maximum ReusabilityIf you follow the best practices, eventually you might get to a point where you need to support multiple ways of running integration tests or even have an application that needs to support some level of abstraction.  Lets take the User class that we had defined earlier and use that as an example.  Were going to add some credentials to the user while were at it.```javapublic class User {        String userId;        String password;        public User(String userId, String password){            this.userId = userId;            this.password = password;        }        boolean authenticated = false;        public void authenicate(){            authenticated = true;        }        public boolean isAuthenticated() {            return authenticated;        } }```This works fine for a stubbed out test.  But, what if something actually needs to happen during the authentication process?  One such way to deal with this is doing the following:```javapublic abstract class User {        ....        public void authenicate() throws Throwable{            authenticateInner();            authenticated = true;        }        public abstract void authenticateInner() throws Throwable;        .... }```What sort of impact does this have steps we previously defined?  For one, we now have to have a concrete implementation of User that wasnt necessary before.  We also have to deal with updating our step definitions to support things.  Lets take for example that we want to be able to support using a Dummy implementation and some Remote request implementation for handling user authentication.```javapublic class DummyUser {      public DummyUser(String userId, String password){            super(userId, password);      }      @Override      public void authenticateInner() throws Throwable {      }}public class RemoteUser {      public RemoteUser(String userId, String password){            super(userId, password);      }      @Override      public void authenticateInner() throws Throwable {            submitRemoteAuthRequest(user, password);  // <-- this will be implementation specific      }}```So now we have to deal with our step definitions.  If we were using @Inject annotations next to User instances, youre going to get a complaint that nothing is being mapped to a User.  You also dont want to have to write in logic for switching between which user type you want to use in every step definition file where youre using a User.  How do you get around this without having to write a bunch of code for explicitly handling things?  The most flexible way is to take advantage of Guices Assisted Injection - the short story is that you can create factories without explicitly having to write factory code and everything will be auto wired together at runtime.To do that, you will have to create a factory interface:```javapublic interface UserFactory {  public User create(@Assisted(userId) String userId, @Assisted(password) String password) throws Throwable;}```The reason the @Assisted annotations are needed in the factory is because you have two arguments that are of the same type.  If you had different argument types or only one String in the constructor, you wouldnt need the annotation.  You also have the ability to take injected elements in a constructor that arent part of the factorys create method.  Now make the following modifications to your user classes so that they can be wired together:```javapublic class DummyUser {      public DummyUser(@Assisted(userId) String userId, @Assisted(password) String password){            super(userId, password);      }      @Override      public void authenticateInner() throws Throwable {      }}public class RemoteUser {      public RemoteUser(@Assisted(userId) String userId, @Assisted(password) String password){            super(userId, password);      }      @Override      public void authenticateInner() throws Throwable {            submitRemoteAuthRequest(user, password);  // <-- this will be implementation specific      }}```Now, you can continue to use @Inject User user in code and all you have to do is configure the factory, which is shown below:```javapublic class ExampleDummyModule extends AbstractModule {    @Override    protected void configure() {        install(new FactoryModuleBuilder().implement(User.class, DummyUser.class).build(UserFactory.class));        bind(User.class).toInstance(new DummyUser(,));  // <- this will map the instance to @Inject User user where a factory isnt used    }// You will also want to create another Module for your Remote instances}public class ExampleInjectionSource implements InjectorSource {    @Override    public Injector getInjector() {        return Guice.createInjector(Stage.PRODUCTION, CucumberModules.SCENARIO, new ExampleDummyModule());  //if you want to switch between Dummy and Remote you can configure the injector here    }}```You will also need a file src/it/resources/cucumber-guice.properties with the contents guice.injector-source=package.that.contains.ExampleInjectionSourceIf you want to explicitly use the factory to create new instances of something in your code, you can do the following:```java    @Inject UserFactory userFactory;    @Given(^a user$)    public void a_user_that_is_not_authorized_to_that_pipeline() throws Throwable {        user = userFactory.create(non-accessable, good password);    }```Using these methods, you can follow the BDD principles to create only what needs to be created.  Once you have reached a point that something needs to be done, that is when you make the change and abstract out the logic via Interfaces or Abstract Classes.  It will prevent you from over-generalizing too soon and potentially creating code that isnt necessary.  Now you have flexibility in how you want to run your integration tests without having to explicitly change step definition code to match a specific implementation.You can find more details on using Google Guice and Dependency Injection online.  These are some of the basic principles that will allow you to get through the majority of the problems you will encounter.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/bdd-with-cucumber/",
    },
    {
      "title": "Branching (DRAFT 3)breadcrumb: Branchingsidebar: dev",
      "text": "---title: Branching (DRAFT 3)breadcrumb: Branchingsidebar: dev---Teams in Watson follow [GitHub Flow](https://guides.github.com/introduction/flow/){:target=_blank} when delivering code. Fork & Clone > Branch > Commit > Pull Request. Pull Requests are reviewed [and merged](merging) by another Squad Member so we can ensure we comply with [separation of duties](https://en.wikipedia.org/wiki/Separation_of_duties){:target=_blank} rules.This page will focus on organizational Best Practices around the second part of the flow: Branching and [GitHub Releases](https://help.github.com/articles/creating-releases/){:target=_blank}## Overall StrategyNow that we need to deal with different deployment targets, we must be very clear about how we manage branching. As Product / Service Teams target IBM Cloud Public as their default, we need a strategy for how to deal with IBM Cloud Private (for those Product / Service Teams that deliver there). We collected data about how others deal with similar challenges. Were taking a page out of GitHubs own Playbook for our strategy.- IBM Cloud Public is the default deployment and updated weekly (at a minimum)- IBM Cloud Private deployable images are made available Quarterly (at a minimum)- Emergencies are deployed to all targets in lock step - full deploys, no patching- [GitHub Releases](https://help.github.com/articles/creating-releases/){:target=_blank} are used when we release so we can always get back to a point in time (to deal with Security Updates). [Semantic Versioning](https://semver.org){:target=_blank} should be used for all GitHub ReleasesThis strategy follows the spirit of the (Almost) Single Source with Dual Packaging declaration from the [Watson on ICP Manifesto](https://ibm.ent.box.com/s/eocled9gh4jl927hitkoorj57b62i49u){:target=_blank}.> Note: All diagrams should be _scaled_ to match the release cadence of your Product. They depict a Weekly Release Train for Public and a Quarterly Release Train for Private.## Required Branches### IBM Cloud Public#### Master- The As Is. For all of our teams, `master` should be whats currently deployed in IBM Cloud Public.- All Tests Must Pass. Your `master` branch must be deployable at all times- For those teams using a Weekly Release Train model, `master` is updated from `develop` every Wednesdayor- For those teams practicing Continuous Delivery, `master` is updated from `develop` continuosly#### Develop- If `master` is the As Is, `develop` is the To Be, `develop` is what will be deployed next to IBM Cloud Public- All Tests Must Pass. Your `develop` branch must be deployable at all times- For those teams using a Weekly Release Train model, push `develop` to `master` on Wednesdays. Never deploy on Fridays.- For those teams practicing Continuous Delivery, push `develop` to `master` when all tests have passed.#### Weekly Release Train Model![Branching - Update master from develop every Wednesday](https://pages.github.ibm.com/watson-health-playbook/resources/images/developer-guide/branching/develop-to-master-weekly.png)#### Fork & Branch- Squad Members fork off `develop` and create short-lived branches and follow [GitHub Flow](https://guides.github.com/introduction/flow/){:target=_blank}![Branching - Squad Members follow GitHub Flow - image from github.com](https://pages.github.ibm.com/watson-health-playbook/resources/images/developer-guide/branching/github-flow.png)> ProTip: Short term means short term. According to some of the [best industry books](https://www.safaribooksonline.com/library/view/continuous-delivery-reliable/9780321670250/){:target=_blank} (and some of our [favorite colleagues right here at IBM](http://w3.blueprint.sby.ibm.com/b_dir/blueprint.nsf/url/AB291383?OpenDocument){:target=_blank}), those that excel at this are committing many times a day, having each (tiny) commit reviewed quickly, and opening a PR with all of the commits every day...#### Aspirational Goals for branchingIf we were to directly copy how GitHub works, then we wouldnt even have a `develop` branch. All changes would go in `master` and `master` would be deployed on every change. We recognize this is _aspirational_ for many product teams today, this is how they work at GitHub, and its what all teams should be aspiring to achieve...### IBM Cloud PrivateFor those Products / Services / Solutions that are delivering deployable content to IBM Cloud Private, we will follow the industry standard pattern that GitHub uses for updating GitHub Enterprise from the GitHub Public codebase.> At least once a quarter, IBM Cloud Private will be updated with the latest codebase thats already deployed in IBM Cloud Public. [GitHub Releases](https://help.github.com/articles/creating-releases/){:target=_blank} will be used to tag each update so that teams can get back to that point if needed (for security updates).#### Quarterly Release Train Model#### icp-master- On the last Tuesday (of the last full week) of the Quarter, `icp-staging` is pushed to `icp-master`- For all of our teams, `icp-master` should equal the latest release for IBM Cloud Private- All Tests Must Pass. Your `icp-master` branches should be deployable at all times- Create a GitHub release for `icp-master` (note: your CI/CD automation may do this for you)#### icp-staging- On Wednesdays, `icp-staging` is updated from `master`    - Two full weeks before the end of the Quarter, updates to `icp-staging` are switched off- All Tests Must Pass. Your `icp-staging` branch should be deployable at all times- All Teams should merge `icp-staging` to `icp-master` on a quarterly basis (at a minimum)    - For those Products releasing on a quarterly basis, Releases are expected at the end of the Quarter![Branching - Update icp-staging from master every Wednesday and update icp-master every quarter](https://pages.github.ibm.com/watson-health-playbook/resources/images/developer-guide/branching/public-to-private-quarterly.png)### Security Vulnerabilities (IBM Cloud Public)- For those teams following the Weekly Wednesday Release Train model, most security vulnerabilities can be patched during the Release Trains- Code Blue Vulnerabilities must be merged in this order:    - `master` then `develop`    - This allows us to fix the emergency in IBM Cloud Public immediately and ensure that it will be included in the next Weekly Wednesday Release Train- For those teams practicing Continuous Delivery, just commit the security update to `develop` and then it will flow into `master` and into Production### Security Vulnerabilities (IBM Cloud Private)#### Security Updates for the Quarterly Pattern- Most customers will expect monthly updates where security vulnerabilities can be patched. New features are not allowed during monthly security updates    - Set your `icp-master` branch to the last GitHub Release Tag.    - Monthly security updates must be merged into `icp-master` after automated validation    - Create a GitHub release for `icp-master` (note: your CI/CD automation may do this for you)- `icp-staging` will be fed from `master` every week, so security updates delivered to `master` will automatically flow in.> Note: Code Blue Vulnerabilities follow the exact same pattern thats used for monthly security updates.Yes, this means that security vulnerabilties must be committed to multiple branches. To deal with this, all Teams should use pull requests and have a small group of committers for `icp-master`### Small Group of Committers- Each Team must restrict who can merge commits to `icp-staging` and `icp-master`- This ensures that we dont accidentally deploy new features into IBM Cloud Private mid-quarter (for those Teams releasing Quarterly)- `icp-staging` is almost exclusively used as a shakedown branch. Human beings should not be committing changes to `icp-staging`#### Aspirational Goals for ICP ReleasingAt least one of our Service Teams already out on IBM Cloud Private is updating Monthly and they aspire to move to bi-weekly. We recognize that this is aspiration for many of our Product Teams (and customer wishes). Please understand that you may have flexibility with your release cadence. Work with your Offering Manager to understand what boundaries you have...## N-3What does N-3 even mean in this new world?The answer is, unfortunately, _it depends_.For most Product Teams, were asserting that this means that we allow customers to upgrade to the latest release from N-3 releases back (instead of having to upgrade to each release as it comes out).We are not commiting to providing security updates for older Releases. If you want security updates, you must upgrade.The current thinking is to to use git tags (or GitHub Releases) to mark each release to IBM Cloud Private (Quarterly and any periodic updates for security updates).Where does _it depends_ come into play? We dont yet know. Based on our collective experience, weve all been in situations where a customer was promised something special.To keep things as simple as possible, the preference is to minimize branches and solve for the main use cases, rather than the edge cases.This use case will likely be the most contentious one. We welcome your comments and ideas...## IBM Cloud Dedicated- Dedicated Deployments should be updated in lock step with IBM Cloud Public.- Dedicated Deployments are deployed from `master`## Watson CI/CDTo ease the burden on Product Teams, unattended automated deployments are an absolute requirement. Get started with [Conan the Deployer here](ci-cd).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/branching/",
    },
    {
      "title": "Coding Standardsbreadcrumb: Coding Standardssidebar: dev",
      "text": "---title: Coding Standardsbreadcrumb: Coding Standardssidebar: dev---To ensure quality and consistency throughout our source code, keep these in mind as you are working: All tests must pass All features or bug fixes must be tested by one or more unit tests. Added code should have close to 100% test coverage for statements, branches, functions, and lines. Some projects may use automated mechanisms to prevent commits with sufficient test coverage. Follow the project specific coding rules. These are often found in `CONTRIBUTING.md` for each repository Run a full build, including linters, unit tests and coverage reports, using the gulp command and verify that all tests pass.# Style Guides Each language should have a general style guide and automated style checker. Do your best to adhere to these.  - Java - follow the [Java Coding Style Guide](../java-coding-style-guide).  - Javascript - there isnt an internal style _yet_. Please to try to be consistent with the rest of the code. [IBM Hackademy](https://pages.github.ibm.com/hackademy/resources/),  [FED@IBM](http://ibm.biz/fed-homeschool){:target=_blank} and [Codestyle.co AngularJS Style Guide](http://www.codestyle.co/Guidelines/angularjs){:target=_blank} are good references.  - Python - attempt to follow [PEP8](https://www.python.org/dev/peps/pep-0008/){:target=_blank} where practical. Where PEP8 is unclear, defer to the [Google Python Style Guide](https://google.github.io/styleguide/pyguide.html){:target=_blank}  - Scala - follow the [Scala Coding Style Guide](scala-coding-style-guide).  - Go - follow [Effective Go](https://golang.org/doc/effective_go.html){:target=_blank} - run `gofmt` before checking in code. When in doubt, please ask a member of your Squad.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/coding-standards-basics/",
    },
    {
      "title": "GitHub Flow - fork+branch+commit+pullbreadcrumb: GitHub Flowsidebar: dev",
      "text": "---title: GitHub Flow - fork+branch+commit+pullbreadcrumb: GitHub Flowsidebar: dev---Most teams in Watson follow [GitHub Flow](https://guides.github.com/introduction/flow/){:target=_blank} when delivering code. There are a great many sites on the internet that overcomplicate a model that really just has four main steps.This document attempts to describe the process used to build and develop software within the Watson Conversation team. It is largely based off [the Gitflow branching and merging strategy](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow){:target=_blank} and large portions of this document have been lifted from the [wea-conversational-ui CONTRIBUTING.md document](https://github.ibm.com/watson-engagement-advisor/wea-conversational-ui/blob/develop/CONTRIBUTING.md){:target=_blank} (restricted access, apologies).## OverviewWatson Conversation endeavors to ship high quality reliable code frequently. This requires that all of the teams work together and that team members can easily move between different projects. A key mechanism to enable this is a high quality software development process. Our team has chosen a variation of Gitflow for our process.There are numerous writeups out there that make Gitflow more complicated than it needs to be. We recommend checking out the [Gitflow tutorials from GitHub](https://guides.github.com/introduction/flow/) and [Atlassian](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow){:target=_blank} for common sense references. We have a couple of modifications that weve adopted to keep our options that we use to keep our code clean that will be discussed in this document.## Development BasicsDevelopment should be set up so project repositories have two long lived branches `master` and `develop`. We should endeavor at all times to have `master` represent code that is, or is currently on its way to, production. `develop` is where all changes except hot-fixes should originate. Over time, as we improve our ability for continuous delivery, the delta between `master` and `develop` will shrink.Teams should use a fork/branch/code/rebase/squash/pull-request process for accepting contributions. In short this process has the following steps:1. Fork: The developer first forks the repository that they wish contribute to by using the GitHub Fork function. This gives each developer their own space they can work in create test branches without polluting the main repository. In most cases this only needs to be done once.2. Branch: Within that fork, the developer creates a branch off the `develop` branch of the code. This helps to keep the changes isolated within that branch of code.3. Code: Fix that bug or build out your great new feature and test it out with unit tests.4. Rebase: It is the responsibility of the developer writing the code to ensure that their code is up to date against the current `develop` branch of the upstream repository. When there are changes to the upstream `develop` branch the developer should run a `git rebase` command to place their changes at the end of the history.5. Squash: In most cases, branches should be squashed down to a single commit using the `git rebase -i` command. There may be exceptions for very large branches, but those are exceptions.6. Pull Request: After rebaseing, squashing, and pushing the code back to your fork, the developer should issue a pull request to have it merged into the `develop` branch of the upstream project.> ProTip: [Install and configure GitHub Desktop](../tools/github/00-getting-started/) before you start...##  Step 1: Fork the RepositoryWe try to keep the main source tree for our projects clean. This means that all developers working on a project should fork a project before beginning work. You can do this by clicking on the fork button in the upper right of the project page.To make things well use the notation of the remote called `origin` to point to your fork and the remote called `upstream` to point to the canonical repository. After youve checked out your fork you can create the `upstream` remote using the following command:  ```bash  git remote add upstream git@github.ibm.com/watson-engagement-advisor/wea-conversational-ui.git  ```You can get the URL by clicking on the Clone or Download ButtonIn most writeups of Gitflow, youll see that creating a branch is optional. If youve contributed to an open source project on GitHub, you likely had to create a branch because you didnt have repository write access. For consistency across all projects and just as a practice of keeping our repositories clean, we recommend that all developers work off their own fork.## Step 2: Create a BranchIn most cases, unless it is a _truly_ trivial change, you should [create or select an issue in wea-backlog](https://github.ibm.com/watson-engagement-advisor/wea-backlog){:target=_blank} before starting your work. This helps us to track and manage all of the work going on across the team.Create a new git branch off of `develop`. For clarity across projects, we try to work with a [standard branch naming system](#-branch-naming-scheme) that helps us out when looking at pull requests, if you adhere to it youll get brownie points.  ```bash  git checkout -b fix/ISSUENUMBER-short-description develop  ```## Step 3: Code! Make your changes, including appropriate test cases. Added code should have close to 100% test coverage for statements, branches, functions, and lines. Some projects may use automated mechanisms to prevent commits with sufficient test coverage. Follow the project specific coding rules. These are often found in `CONTRIBUTING.md` Run a full build, including linters, unit tests and coverage reports, using the `gulp` command and verify that all tests pass. Commit your changes using a descriptive commit message that follows our  [commit message conventions](#commit). Adherence to these conventions  is necessary because release notes are automatically generated from these messages.  ```bash  git commit -a  ```  Note: the optional commit `-a` command line option will automatically add and rm edited files.## Step 4: Rebase Your CodeEnsure that your branch is based on the latest from the base repository:  ```bash  git fetch upstream  git rebase upstream/develop  ```  Note: the second command is only necessary if the first command retrieves an update on the `develop` branch.Functionally what this does is it makes it so all of your commits appear sequentially in history in project history, which makes it easier to understand diffs and also to parse out the commit log.## Step 5: Squash Your CodeIf you have made multiple commits, squash your changes into one commit (unless it is important to separate the changes):  ```bash  git rebase -i HEAD~#  ```Note: Replace `#` with the number of commits on the branch. This will enter an interactive mode which will allow you to squash your commits into one. See [squashing][squashing] to learn more.Functionally this operation compresses your set of commits into a single commit, which, unless your doing massive changes to the system, is exactly what you want. If youre doing many changes to the system, consider squashing sets of common changes together to make it easier to understand your commit history.## Step 6: Submit a Pull Request (PR) Push your branch to GitHub:  ```bash  git push -u origin fix/ISSUENUMBER-short-description  ```  Note: the optional `-u` flag enables tracking of your local branch with the new remote branch. In GitHub, send a pull request to the upstream projects `develop` branch, for example, `wea-conversational-ui:develop`. If changes are suggested then:   Make the required updates and commit them.   Re-run the test suite to ensure tests are still passing.   Squash your commits into one and force push to your GitHub repository (this will update your Pull Request):  ```bash  git rebase -i HEAD~#  git push -f  ```  Note: See above or [squashing][squashing] for more information on how to squash interactively. In most cases the person who is merging the code will want to use the `Squash and Merge` setting of GitHub. This avoids creating needless numbers of merge commits in the project history and generally simplifies the development process.## Branch Naming SchemeThe Watson Conversation team tries to adhere to a fairly standard branch namingscheme. This scheme is general in the form of:    BRANCHTYPE/ISSUENUMBER-short-descriptionThe `BRANCHTYPE` can be one of the following, which mirror [the `type` field inour commit message format][commit-format-type-field]. feat: A new feature fix: A bug fix docs: Documentation only changes style: Changes that do not affect the meaning of the code (white-space,  formatting, missing semi-colons, etc) refactor: A code change that neither fixes a bug nor adds a feature perf: A code change that improves performance test: Adding missing tests chore: Changes to the build process or auxiliary tools and libraries such  as documentation generationThe `ISSUENUMBER` should be the issue number from [the DevEnv issuesarchive][devenvissues].The `short-description` should be the general topic of the branch broken upinto a few words and separated by dashes; preferably it is all lower case.Heres a few example of branch names: A fix tied to issue 32 to correct to rotation of `bunyan.log` files:  `fix/32-bunyan-log-rotation` A new feature tied to issue 93 to introduce RVM: `feat/93-add-rvm` A minor documentation change to correct typos in `CONTRIBUTING.md` without an  issue: `docs/contributing-md-typos`Were not super strict on this, but it does help us understand what branches wehave on our local system and, we believe, speeds up overall development.## After your pull request is mergedAfter your pull request is merged, you can safely delete your branch and pull the changesfrom the main (upstream) repository: Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:    ```bash    git push origin --delete my-fix-branch    ``` Check out the `develop` branch:    ```bash    git checkout develop -f    ``` Delete the local branch:    ```bash    git branch -D my-fix-branch    ``` Update your `develop` with the latest upstream version:    ```bash    git pull --ff upstream develop    ```---### Patterns...Most teams use a number of patterns when delivering to GitHub. Check with your Squad to see which of these you use...## Commit Message FormatEach commit message consists of a header, a body and a footer. The header has a special format that includes a type, a scope and a subject:``` bash(): ```The header is mandatory and the scope of the header is optional.The goal of the commit message is to be human readable across a wide variety of devices and interfaces. Any line of the commit message cannot be longer 80 characters and [should preferably wrap at 72characters](http://stackoverflow.com/q/2290016/57626){:target=_blank}.Where possible try to keep the bulk of the first line of the commit under 50 characters, however we realize this can be hard with the `():` prefix. This allows the message to be easier to read onGitHub as well as in various git tools.We allow a very minimal use of markdown within our commit messages. Primarily this relates to thefollowing elements: Bulleted lists. This should be obvious as the markdown version of such lists is very readable. Bold characters. Using `` or `` around a word for emphasis can helpful, although it should be done sparingly. Monospace characters. When embedded a identifier, such as a variable name, inside of prose, it may be more readable to use backticks ( ` ) around the identifier.## RevertIf the commit reverts a previous commit, it should begin with `revert:`, followed by the header of the reverted commit.In the body it should say: `This reverts commit .`, where the hash is the SHA of the commit being reverted.## TypeMust be one of the following: feat: A new feature fix: A bug fix docs: Documentation only changes style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) refactor: A code change that neither fixes a bug nor adds a feature perf: A code change that improves performance test: Adding missing tests chore: Changes to the build process or auxiliary tools and libraries such as documentation generation## ScopeThe scope could be anything specifying place of the commit change. For example `Training`, `StatusPage`, etc.## SubjectThe subject contains succinct description of the change: Use the present tense (Add server side CSV export vs Added server side CSV export) Use the imperative (Add server side CSV export vs Add CSV export to server) Capitalize the first word in your commit after the (): identifier A title is not a sentence – dont close it with a period Assume that your commit message will be rendered as plain text - dont use markdownWhere possible the subject should be under 50 characters. This isnt a hard and fast rule, but its a general guideline that allows support for as many tools as possible.## BodyJust as in the subject, use the imperative, present tense: change not changed nor changes.The body should include the motivation for the change and contrast this with previous behavior.## FooterThe footer should contain any information about Breaking Changes and is also the place to reference GitHub issues that this commit Closes. If youre working on a larger issue that spans multiplecommits its safe to refer to the issue in the footer, but you may want to squash the history before submitting your pull request.Breaking Changes should start with the word `BREAKING CHANGE:` with a space or two newlines. The rest of the commit message is then used for this.A detailed explanation can be found in the [AngularJS Git Commit Message Conventions][commit-message-format], which we largely inherit.## Developer Certificate of OriginAll contributions to IBM Watson&trade; Offerings must be accompanied by acknowledgment of, and agreement to, the [Developer Certificate of Origin](http://elinux.org/Developer_Certificate_Of_Origin){:target=_blank}, reproducedbelow. Acknowledgment of and agreement to the Developer Certificate of Origin _must_ be included in the comment section of each contribution and _must_ take the form of:``` bashDCO 1.1 Signed-off-by: {Full Name} ```Contributions without this acknowledgment will be required to add it before being accepted. If a contributor is unable or unwilling to agree to the Developer Certificate of Origin, their contribution will notbe included.```bashDeveloper Certificate of OriginVersion 1.1Copyright (C) 2004, 2006 The Linux Foundation and its contributors.660 York Street, Suite 102,San Francisco, CA 94110 USAEveryone is permitted to copy and distribute verbatim copies of thislicense document, but changing it is not allowed.Developers Certificate of Origin 1.1By making a contribution to this project, I certify that:(a) The contribution was created in whole or in part by me and I    have the right to submit it under the open source license    indicated in the file; or(b) The contribution is based upon previous work that, to the best    of my knowledge, is covered under an appropriate open source    license and I have the right under that license to submit that    work with modifications, whether created in whole or in part    by me, under the same open source license (unless I am    permitted to submit under a different license), as indicated    in the file; or(c) The contribution was provided directly to me by some other    person who certified (a), (b) or (c) and I have not modified    it.(d) I understand and agree that this project and the contribution    are public and that a record of the contribution (including all    personal information I submit with it, including my sign-off) is    maintained indefinitely and may be redistributed consistent with      this project or the open source license(s) involved.```### Example Commit MessageHeres a sample commit message that adheres to our commit message guidelines:```bash(doc): Add GitHub Flow to the Developer GuideAdd GitHub Flow to the Developer Guide using GitHub Desktop so that the flow is as easy to understand as possible for users that are new to GitHub. Incorporates content from the Conversation Team’s commandline GitHub Flow document.Closes watson/transformation-tracker#273DCO 1.1 Signed-off-by: George Champlin-Scharff ```> ProTip: adding closes or fixes in a commit message followed by the org/repo#issue-number will automatically close the issue once the Pull Request has been merged.### Frequently Asked QuestionsQ: Why do I need to have the `DCO 1.1 Signed-off-by` line in my commit message? The project isnt open source.A: Youre correct, right now most of these projects arent open source, but some may be in the future. When you put the line `DCO 1.1 Signed-off-by` in your commit youre making an assertion that you wrote the code. This make it easier for us to track down this information the future.Q: Is there an easier way to remember the commit format?A: Yes! You can [create your own `.gitmessage` template](https://robots.thoughtbot.com/better-commit-messages-with-a-gitmessage-template){:target=_blank} that you can populate when you do a commit.## Helpful links- [commit-message-format](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#){:target=_blank}- [angularcontributing](https://github.com/angular/angular/blob/master/CONTRIBUTING.md){:target=_blank}- [fork](https://help.github.com/articles/fork-a-repo/){:target=_blank}- [squashing](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages){:target=_blank}## CreditsThis document is based on one created for the Watson Conversation Team by Patrick Wagstrom (who based _that_ document on the contributing standards from [Angular](https://github.com/angular/angular/blob/master/CONTRIBUTING.md){:target=_blank}). We are thankful for their work in setting up good standards and norms of software development.The GitHub Flow image at the top of this page is a modified version of the one from [here](https://desktop.github.com){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/delivering-code-command-line/",
    },
    {
      "title": "Commit Patternsbreadcrumb: Commit Patternssidebar: dev",
      "text": "---title: Commit Patternsbreadcrumb: Commit Patternssidebar: dev---## Patterns...Most teams use a number of patterns when delivering to GitHub. Check with your Squad to see which of these you use...# Commit Message FormatEach commit message consists of a header, a body and a footer. The header has a special format that includes a type, a scope and a subject:``` bash(): ```The header is mandatory and the scope of the header is optional.The goal of the commit message is to be human readable across a wide variety of devices and interfaces. Any line of the commit message cannot be longer 80 characters and [should preferably wrap at 72 characters](http://stackoverflow.com/q/2290016/57626){:target=_blank}.Where possible try to keep the bulk of the first line of the commit under 50 characters, however we realize this can be hard with the `():` prefix. This allows the message to be easier to read on GitHub as well as in various git tools.We allow a very minimal use of markdown within our commit messages. Primarily this relates to thefollowing elements: Bulleted lists. This should be obvious as the markdown version of such lists is very readable. Bold characters. Using `` or `` around a word for emphasis can helpful, although it should be done sparingly. Monospace characters. When embedded a identifier, such as a variable name, inside of prose, it may be more readable to use backticks ( ` ) around the identifier.# RevertIf the commit reverts a previous commit, it should begin with `revert: `, followed by the header of the reverted commit.In the body it should say: `This reverts commit .`, where the hash is the SHA of the commit being reverted.# TypeMust be one of the following: feat: A new feature fix: A bug fix docs: Documentation only changes style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) refactor: A code change that neither fixes a bug nor adds a feature perf: A code change that improves performance test: Adding missing tests chore: Changes to the build process or auxiliary tools and libraries such as documentation generation# ScopeThe scope could be anything specifying place of the commit change. For example `Training`, `StatusPage`, etc.# SubjectThe subject contains succinct description of the change: Use the present tense (Add server side CSV export vs Added server side CSV export) Use the imperative (Add server side CSV export vs Add CSV export to server) Capitalize the first word in your commit after the (): identifier A title is not a sentence – dont close it with a period Assume that your commit message will be rendered as plain text - dont use markdownWhere possible the subject should be under 50 characters. This isnt a hard and fast rule, but its a general guideline that allows support for as many tools as possible.# BodyJust as in the subject, use the imperative, present tense: change not changed nor changes.The body should include the motivation for the change and contrast this with previous behavior.#  FooterThe footer should contain any information about Breaking Changes and is also the place to reference GitHub issues that this commit Closes. If youre working on a larger issue that spans multiple commits its safe to refer to the issue in the footer, but you may want to squash the history before submitting your pull request.Breaking Changes should start with the word `BREAKING CHANGE:` with a space or two newlines. The rest of the commit message is then used for this.A detailed explanation can be found in the [AngularJS Git Commit Message Conventions][commit-message-format], which we largely inherit.# Developer Certificate of OriginAll contributions to IBM Watson&trade; Offerings must be accompanied by acknowledgment of, and agreement to, the [Developer Certificate of Origin](http://elinux.org/Developer_Certificate_Of_Origin){:target=_blank}, reproduced below. Acknowledgment of and agreement to the Developer Certificate of Origin _must_ be included in the comment section of each contribution and _must_ take the form of:``` bashDCO 1.1 Signed-off-by: {Full Name} ```Contributions without this acknowledgment will be required to add it before being accepted. If a contributor is unable or unwilling to agree to the Developer Certificate of Origin, their contribution will not be included.```Developer Certificate of OriginVersion 1.1Copyright (C) 2004, 2006 The Linux Foundation and its contributors.660 York Street, Suite 102,San Francisco, CA 94110 USAEveryone is permitted to copy and distribute verbatim copies of thislicense document, but changing it is not allowed.Developers Certificate of Origin 1.1By making a contribution to this project, I certify that:(a) The contribution was created in whole or in part by me and I    have the right to submit it under the open source license    indicated in the file; or(b) The contribution is based upon previous work that, to the best    of my knowledge, is covered under an appropriate open source    license and I have the right under that license to submit that    work with modifications, whether created in whole or in part    by me, under the same open source license (unless I am    permitted to submit under a different license), as indicated    in the file; or(c) The contribution was provided directly to me by some other    person who certified (a), (b) or (c) and I have not modified    it.(d) I understand and agree that this project and the contribution    are public and that a record of the contribution (including all    personal information I submit with it, including my sign-off) is    maintained indefinitely and may be redistributed consistent with    this project or the open source license(s) involved.```### Example Commit MessageHeres a sample commit message that adheres to our commit message guidelines:```(doc): Add GitHub Flow to the Developer GuideAdd GitHub Flow to the Developer Guide using GitHub Desktop so that the flow is as easy to understand as possible for users that are new to GitHub. Incorporates content from the Conversation Team’s command line GitHub Flow document.Closes watson/transformation-tracker#273DCO 1.1 Signed-off-by: George Champlin-Scharff ```> ProTip: adding closes or fixes in a commit message followed by the org/repo#issue-number will automatically close the issue once the Pull Request has been merged.## Frequently Asked QuestionsQ: Why do I need to have the `DCO 1.1 Signed-off-by` line in my commit message? The project isnt open source.A: Youre correct, right now most of these projects arent open source, but some may be in the future. When you put the line `DCO 1.1 Signed-off-by` in your commit youre making an assertion that you wrote the code. This make it easier for us to track down this information the future.Q: Is there an easier way to remember the commit format?A: Yes! You can [create your own `.gitmessage` template](https://robots.thoughtbot.com/better-commit-messages-with-a-gitmessage-template){:target=_blank} that you can populate when you do a commit.# Helpful links[commit-message-format](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#){:target=_blank}[angularcontributing](https://github.com/angular/angular/blob/master/CONTRIBUTING.md){:target=_blank}[fork](https://help.github.com/articles/fork-a-repo/){:target=_blank}[squashing](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages){:target=_blank}# CreditsThis document is based off the contributing standards from [Angular](https://github.com/angular/angular/blob/master/CONTRIBUTING.md){:target=_blank}. We are thankful for their work in setting up good standards and norms of software development.The GitHub Flow image at the top of this page is a modified version of the one from [here](https://desktop.github.com){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/delivering-code-patterns/",
    },
    {
      "title": "GitHub Flow - fork+branch+commit+pullbreadcrumb: GitHub Flowsidebar: dev",
      "text": "---title: GitHub Flow - fork+branch+commit+pullbreadcrumb: GitHub Flowsidebar: dev---Most teams in Watson follow [GitHub Flow](https://guides.github.com/introduction/flow/){:target=_blank} when delivering code. There are a great many sites on the internet that overcomplicate a model that really just has four main steps.Heres how it all works with the [GitHub Desktop](https://desktop.github.com) application (which automates many steps for you). If you prefer, theres a [command line version of this page](delivering-code-command-line).> ProTip: [Install and configure GitHub Desktop](../tools/github/00-getting-started/) before you start...___## Fork & CloneThis will create a personal copy of the repository on github.ibm.com and download it to your laptop...- In your web browser, go to a projects repository and click - Youll be asked where to fork the project (pick your username).- Once the fork has been created, click the green Clone or download button, then click Open in DesktopAs long as GitHub Desktop is set up properly youll soon have a local copy of your fork. Shiny.___## BranchThis will create a branch of the repository that you can work in without making changes directly to your `develop` branch (or `master` branch if your team doesnt use a `develop` branch)- Click the Add a branch button and enter a good name (most teams use the pattern: type/issue-number-plus-a-description-of-what-you-are-changing)The branch is created locally on your laptop. Want to get it to your space on github.ibm.com? Click the Sync button in GitHub Desktop.Thats it. Now you can safely start making changes. Sweet.___## CommitAs you start to make changes to code on your laptop, youll see your changed files automagically show up in the list view of the GitHub Desktop application.- To commit your changes, enter a Summary, a Description, then click Commit to _your-branch-name_> ProTip: Make sure you follow the patterns used by your Squad. See the patterns section at the bottom of this page for details...This commit has been done _locally_ on your laptop. To get it into your user space on github.ibm.com, click the Sync Button.> ProTip: To automatically sync after committing, select Edit -> Automatically Sync after Committing.You can commit multiple times to the same branch.> ProTip: Before you open a Pull Request, click that Update from `develop` button to make sure you are in sync with the rest of the project...When youre done, youre just a button click away from getting your changes into the code review process. Nice.___## Pull RequestCreating a pull request starts the code review process and (eventually) ends with your code being merged into the project.- Click the Pull Request button.> ProTip: If you see a nice big friendly green icon show up, your pull request can be automatically merged. Nice job keeping your branch up to date.- Click the Send Pull Request button.At this point, the collaborative code review process starts. As you get feedback, youll probably need to make additional changes. When you do, just repeat the Commit steps, GitHub will automagically keep your commits funneling into the same Pull Request. Wonderful.___## Wrapping up...Many teams like to Squash commits before merging, this keeps the history nice and tidy. This is easy to do in the GitHub web app.Finally, when youre change has been merged, you can delete your branch. This is also very easy to do in the GitHub web app.Automagic stuffTheres a TON of automation here, so much so that many command line git users are deeply skeptical that the flow can be this basic. The truth is that it can be, _much of the time_, but you can still get into trouble with merge conflicts. GitHub Desktop tries to help you out as much as possible, but you may have to return to the command line from time to time.___### Patterns...Most teams use a number of patterns when delivering to GitHub. Check with your Squad to see which of these you use...## Commit Message FormatEach commit message consists of a header, a body and a footer. The header has a special format that includes a type, a scope and a subject:``` bash(): ```The header is mandatory and the scope of the header is optional.The goal of the commit message is to be human readable across a wide variety of devices and interfaces. Any line of the commit message cannot be longer 80 characters and [should preferably wrap at 72 characters](http://stackoverflow.com/q/2290016/57626){:target=_blank}.Where possible try to keep the bulk of the first line of the commit under 50 characters, however we realize this can be hard with the `():` prefix. This allows the message to be easier to read on GitHub as well as in various git tools.We allow a very minimal use of markdown within our commit messages. Primarily this relates to thefollowing elements: Bulleted lists. This should be obvious as the markdown version of such lists is very readable. Bold characters. Using `` or `` around a word for emphasis can helpful, although it should be done sparingly. Monospace characters. When embedded a identifier, such as a variable name, inside of prose, it may be more readable to use backticks ( ` ) around the identifier.## RevertIf the commit reverts a previous commit, it should begin with `revert:`, followed by the header of the reverted commit.In the body it should say: `This reverts commit .`, where the hash is the SHA of the commit being reverted.## TypeMust be one of the following: feat: A new feature fix: A bug fix docs: Documentation only changes style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) refactor: A code change that neither fixes a bug nor adds a feature perf: A code change that improves performance test: Adding missing tests chore: Changes to the build process or auxiliary tools and libraries such as documentation generation## ScopeThe scope could be anything specifying place of the commit change. For example `Training`, `StatusPage`, etc.## SubjectThe subject contains succinct description of the change: Use the present tense (Add server side CSV export vs Added server side CSV export) Use the imperative (Add server side CSV export vs Add CSV export to server) Capitalize the first word in your commit after the (): identifier A title is not a sentence – dont close it with a period Assume that your commit message will be rendered as plain text - dont use markdownWhere possible the subject should be under 50 characters. This isnt a hard and fast rule, but its a general guideline that allows support for as many tools as possible.## BodyJust as in the subject, use the imperative, present tense: change not changed nor changes.The body should include the motivation for the change and contrast this with previous behavior.## FooterThe footer should contain any information about Breaking Changes and is also the place to reference GitHub issues that this commit Closes. If youre working on a larger issue that spans multiple commits its safe to refer to the issue in the footer, but you may want to squash the history before submitting your pull request.Breaking Changes should start with the word `BREAKING CHANGE:` with a space or two newlines. The rest of the commit message is then used for this.A detailed explanation can be found in the [AngularJS Git Commit Message Conventions][commit-message-format], which we largely inherit.## Developer Certificate of OriginAll contributions to IBM Watson&trade; Offerings must be accompanied by acknowledgment of, and agreement to, the [Developer Certificate of Origin](http://elinux.org/Developer_Certificate_Of_Origin){:target=_blank}, reproduced below. Acknowledgment of and agreement to the Developer Certificate of Origin _must_ be included in the comment section of each contribution and _must_ take the form of:``` bashDCO 1.1 Signed-off-by: {Full Name} ```Contributions without this acknowledgment will be required to add it before being accepted. If a contributor is unable or unwilling to agree to the Developer Certificate of Origin, their contribution will not be included.``` bashDeveloper Certificate of OriginVersion 1.1Copyright (C) 2004, 2006 The Linux Foundation and its contributors.660 York Street, Suite 102,San Francisco, CA 94110 USAEveryone is permitted to copy and distribute verbatim copies of thislicense document, but changing it is not allowed.Developers Certificate of Origin 1.1By making a contribution to this project, I certify that:(a) The contribution was created in whole or in part by me and I    have the right to submit it under the open source license    indicated in the file; or(b) The contribution is based upon previous work that, to the best    of my knowledge, is covered under an appropriate open source    license and I have the right under that license to submit that    work with modifications, whether created in whole or in part    by me, under the same open source license (unless I am    permitted to submit under a different license), as indicated    in the file; or(c) The contribution was provided directly to me by some other    person who certified (a), (b) or (c) and I have not modified    it.(d) I understand and agree that this project and the contribution    are public and that a record of the contribution (including all    personal information I submit with it, including my sign-off) is    maintained indefinitely and may be redistributed consistent with    this project or the open source license(s) involved.```### Example Commit MessageHeres a sample commit message that adheres to our commit message guidelines:```bash(doc): Add GitHub Flow to the Developer GuideAdd GitHub Flow to the Developer Guide using GitHub Desktop so that the flow is as easy to understand as possible for users that are new to GitHub. Incorporates content from the Conversation Team’s command line GitHub Flow document.Closes watson/transformation-tracker#273DCO 1.1 Signed-off-by: George Champlin-Scharff ```> ProTip: adding closes or fixes in a commit message followed by the org/repo#issue-number will automatically close the issue once the Pull Request has been merged.### Frequently Asked QuestionsQ: Why do I need to have the `DCO 1.1 Signed-off-by` line in my commit message? The project isnt open source.A: Youre correct, right now most of these projects arent open source, but some may be in the future. When you put the line `DCO 1.1 Signed-off-by` in your commit youre making an assertion that you wrote the code. This make it easier for us to track down this information the future.Q: Is there an easier way to remember the commit format?A: Yes! You can [create your own `.gitmessage` template](https://robots.thoughtbot.com/better-commit-messages-with-a-gitmessage-template){:target=_blank} that you can populate when you do a commit.## Helpful links- [commit-message-format](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#){:target=_blank}- [angularcontributing](https://github.com/angular/angular/blob/master/CONTRIBUTING.md){:target=_blank}- [fork](https://help.github.com/articles/fork-a-repo/){:target=_blank}- [squashing](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages){:target=_blank}## CreditsThis document is based on one created for the Watson Conversation Team by Patrick Wagstrom (who based _that_ document on the contributing standards from [Angular](https://github.com/angular/angular/blob/master/CONTRIBUTING.md){:target=_blank}). We are thankful for their work in setting up good standards and norms of software development.The GitHub Flow image at the top of this page is a modified version of the one from [here](https://desktop.github.com){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/delivering-code/",
    },
    {
      "title": "Deployment Verification Testingbreadcrumb: Verification Testingsidebar: dev",
      "text": "---title: Deployment Verification Testingbreadcrumb: Verification Testingsidebar: dev---## Goal for Deployment Verification Tests:Validate the fitness of a system that has been deployed into a particular environment.This system may be, for example, one microservice developed and deployed by a single team, or a collection of multiple microservices that work together.  This may involve functional as well as integration tests.## Plan to realize this goal:Provide development teams with an easy-to-use API to enable Deployment Verification Tests to be run in Armada, in a way such that they can be run on-demand, or integrated into automated deployments, callable from our [Hyboria Jenkins continuous delivery system](https://github.ibm.com/watson-continuous-delivery/Documentation/){:target=_blank}.## How does the DVT library work?1. From a Hyboria job, uses `kubectl` to reach out to Armada and create remote containers from Docker Images containing tests, provided by the dev teams and deployed as Kubernetes `Job`s1. Checks to make sure the job starts correctly and gives realtime feedback, with a link to the live Logmet logs for the test containers e.g.![start message](https://pages.github.ibm.com/watson-health-playbook/resources/images/developer-guide/dvt/start.gif)1. Monitors the execution of the `Job`s until they complete, timeout, or fail1. While polling to see if a job is complete, auto-retries in the face of intermittent network connectivity problems1. Copies results from Armada with `kubectl cp` from a test-monitor / beachhead `pod` (details below) back to a Hyboria Jenkins workspace.1. Shunts results automatically to particular Jenkins plugins `junit,cucumber,performance` for automatic evaluation, and presentation of those results1. Stores result artifacts as a Jenkins job `archive`, makes them available for whatever processing teams want to do to them in their Hyboriafile1. Deletes (optionally, but by default) the completed `Job` from Armada, and its artifacts from the remote `PersistentVolumeClaim`1. Provides / highlights diagnostic information in the Jenkins job page in various ways if/when things go sideways in ways weve seen previously, e.g.   Container running out of memory: ![example OOMKilled](https://pages.github.ibm.com/watson-health-playbook/resources/images/developer-guide/dvt/OOMKilledError.png)   Armada cant pull the test image: ![example ImgPullBackOff](https://pages.github.ibm.com/watson-health-playbook/resources/images/developer-guide/dvt/ImgPullBackOffError.png)   Armada test job exceeds resource quota level: ![example ExceededQuota](https://pages.github.ibm.com/watson-health-playbook/resources/images/developer-guide/dvt/ExceededQuotaError.png)1. Enables programmatic result querying using standard Jenkins methods.## How does this fit into an automated CI/CD pipeline:From the existing Hyboriafile teams use to deploy their service, or a from a separate DVT-only one, they can call any of the DVT methods directly, e.g. `dvt.DVT(rendered.d/myTestJob.yaml)` as part of the deployment of a service/microservice, or after that deployment to verify its fitness.  The results could be used to determine if deployments should be rolled-back, if deployments of the service/microservice to subsequent environments should happen, etc. [More info](https://github.ibm.com/watson-continuous-delivery/Documentation/blob/master/on-boarding/examples.md#automatic-deployment-to-dev-from-ghenkins-with-dvt-and-promotion-to-staging){:target=_blank}.For manual (outside CI/CD automation) execution - as the DVT library is Groovy code intended only to be called from a Hyboriafile, you cant easily use it outside of Jenkins, though you can use Hyboria-cli or `kubectl` to deploy and pull results from DVT jobs manually.## Prerequisites: On-board to Armada, with appropriate amounts of resource provisioned to run the desired tests.   A best practice is to deploy the DVT images into the same cluster/namespace as the service they test.  They can hit external front door or internal service endpoints as needed. [On-board](https://github.ibm.com/watson-continuous-delivery/Documentation/tree/master/on-boarding){:target=_blank} to Hyboria. Docker images with tests in them that write their results to a specific directory.  Images that can be `docker/kubectl run` to execute those tests, exit and return a non-zero result if there was an error executing them (as distinct from test failures). Ideally, a CI job to build and push updated test images to Armada-reachable Docker registries whenever the tests change. If the tests dont produce standard JUnit/JMeter/Cucumber result artifacts, youll need `Jenkinsfile` (Hyboriafile) [code](https://jenkins.io/doc/book/pipeline/syntax/){:target=_blank} that [does _something_] to determine pass/fail from the result artifacts## How teams can use this:1. Create, and store in a repository under https://github.ibm.com/watson-deploy-configs a Kubernetes yaml file that creates a `Job` that describes the test image, and maps the results directoryto a `PersistentVolumeClaim` as with [demo.yml](https://github.ibm.com/watson-innovations-testops/dvt-common/blob/master/demo.yml){:target=_blank}.1. Create, store and deploy a Kuberentes yaml file for the `PersistentVolumeClaim`, like [pvc.yml](https://github.ibm.com/watson-innovations-testops/dvt-common/blob/master/pvc.yml){:target=_blank}1. Create, store and deploy a Kubernetes yaml file for a `deployment` of a `pod` that will mount that `PersistentVolumeClaim`, andallow remote access to tests results added to the PVC by test pods, 24x7 (or setup/teardown on-demand if thatshow you roll).  e.g.: [ngnix.yml](https://github.ibm.com/watson-deploy-configs/demo/blob/master/dvt/onetimesetup.d/30-nginx.yml){:target=_blank}which, incidentally, has its differences from a standard nginx install in a `ConfigMap`like [nginx-conf.yml](https://github.ibm.com/watson-deploy-configs/demo/blob/master/dvt/onetimesetup.d/20-nginxconfigmap.yml){:target=_blank}1. Put something like the following into their Jenkinsfile, that runs 4 different DVT jobs in parallel, then aggregates their results: ```groovy    stage(DVT) {       script {          parallel locust  : { dvt.DVT(${renderedDir}/61-locust.yml) },                 dialog    : { dvt.DVT(${renderedDir}/62-dialog-system-entities.yml)},                 analytics : { dvt.DVT(${renderedDir}/63-analytics.yml)},                 bdd       : { dvt.DVT(${renderedDir}/60-bddjob.yml) }         }     }```1. Bring questions, bug reports and feature requests to the [#continuous-deployment](https://ibm-watson.slack.com/messages/C12M11H99){:target=_blank} channel in IBM Watson Slack## Select Examples of Important files: [Demo Hyboriafile](https://github.ibm.com/watson-deploy-configs/demo/blob/master/kingdom-configs/us-south-dev/dvt.hyboriafile){:target=_blank}: a Jenkins job to orchestrate execution of Deployment Verification Tests [Test Job .yaml file](https://github.ibm.com/watson-deploy-configs/demo/blob/master/dvt/50-dvt-job.yml){:target=_blank} : Sample Kubernetes yaml descriptor that contains the info for a DVT `Job` and its associated testcontainer, the path to their results, the CPU/Memory resources they need, etc. [PVC .yaml file](https://github.ibm.com/watson-deploy-configs/demo/blob/master/dvt/onetimesetup.d/10-pvc.yml){:target=_blank} an example of a `PersistentVolumeClaim` to temporarily store results [NGINX .yaml file](https://github.ibm.com/watson-deploy-configs/demo/blob/master/dvt/onetimesetup.d/30-nginx.yml){:target=_blank} Kubernetes yaml file for deploying a sample test monitor [NGINX configmap .yaml file](https://github.ibm.com/watson-deploy-configs/demo/blob/master/dvt/onetimesetup.d/20-nginxconfigmap.yml){:target=_blank} a `ConfigMap` to configure additional nginx settings (such as enabling directory browsing) [Dockerfile](https://github.ibm.com/watson-engagement-advisor/wea-conversational-api-it/blob/master/Dockerfile){:target=_blank} from the Conversation team, showing how a Gradle-based DVT image is built.## More examples / readmes: Hyboria job demo: [Source repository in Github Enterprise](https://github.ibm.com/watson-deploy-configs/demo/blob/master/dvt-demo.md){:target=_blank} and [job in Hyboria Jenkins](https://watson-tron-jenkins.swg-devops.com/job/demo/){:target=_blank} Hyboria job demo-mars: [GHE](https://github.ibm.com/watson-deploy-configs/demo-mars){:target=_blank} and [in Hyboria Jenkins](https://watson-tron-jenkins.swg-devops.com/job/demo-mars/){:target=_blank} Hyboria job demo-universe: [GHE](https://github.ibm.com/watson-deploy-configs/demo-universe){:target=_blank} and [in Hyboria Jenkins](https://watson-tron-jenkins.swg-devops.com/job/demo-universe){:target=_blank} Hyboria job for the Watson Conversation DVT: [GHE](https://github.ibm.com/watson-deploy-configs/conversation-dvt/blob/master/kingdom-configs/pstg/dvt.hyboriafile){:target=_blank} and [in Hyboria Jenkins](https://watson-tron-jenkins.swg-devops.com/job/conversation-dvt/){:target=_blank} [Github Enterprise Query for references to `dvt.DVT(...)` in the watson-deploy-configs org](https://github.ibm.com/search?l=Groovy&q=org%3Awatson-deploy-configs+%22dvt.DVT%22&type=Code){:target=_blank} shows lots of examples of teams using this API.## DVT API details:- [API doc (cicdtest.txt)](https://github.ibm.com/watson-continuous-delivery/hyboria/blob/master/vars/dvt.txt){:target=_blank} which is really in markdown format but needs to end in .txt [because Jenkins](https://jenkins.io/doc/book/pipeline/shared-libraries/){:target=_blank}- [Library source (dvt.groovy)](https://github.ibm.com/watson-continuous-delivery/hyboria/blob/master/vars/dvt.groovy){:target=_blank}.  Pull requests welcome!## How do the directories in the various pods relate to whats in the shared Persistent Volume Claim that stores test results as tests run?By our convention, a directory specified by `subPath` in the job .yaml that has the same name as the job off root of the volume is mounted into a directory in the pod specified by `mountPath`.![Pretty picture](https://pages.github.ibm.com/watson-health-playbook/resources/images/developer-guide/dvt/dvt-dir-mapping4.gif)Thus in the example above a test would write to what it thinks is something like `/test-output/someSubdir/myResults.data`,this same file would be found _in the PVC_ at `/dvt-suite-1/someSubdir/myResults.data`Note: Currently, by default, `launchTests()` prepends the Jenkins `JOB_TAG` to the Job `.metadata.name` and to the`subPath` so that multiple instances of the same job can run in the same `namespace` at the same time.Also: In the example [ngx.yml](ngx.yml) and [nginx-browse/ngx-config.yml](nginx-browse/ngx-config.yml), the nginx podreally has its docroot at `/usr/share/nginx/html` with `mountPath` set accordingly.  `wwwroot` is shown in the picture for brevity.## Whats the deal with this beachhead / test-monitor thing? We want tests run as a `Job` which is the idiomatic way to manage containers that are meant to do somethingfinite, then be done, leveraging the help Kubernetes provides to make this easier. In each test pod, each container mounts the same PVC volume, and puts test results in its own subdirectory there. Once a `Job` is complete, its `pod`s are no longer `active`, so you cant `kubectl cp` stuff from them, so we need _something else_ thats alive when we want to grab the results. Even with a `PersistentVolumeClaim` available in Armada, you cant read/write to them directly, except from a running `pod`. If you have some lightweight process like [NGINX](https://www.nginx.com/){:target=_blank} in its own pod point its docroot at the same PVC, you have a way to grab the results whenever you want.  If you have `kubectl` and credentials for the `namespace` where the tests are run on your laptop, you can do stuff like:     `kubectl port-forward nginx-pod-name 32766:80`    and browse to `localhost:32766` to interactively view the files in the results volume in realtime  Its a lightweight proxy into the volume (thats optionally always there) you can use to copy results back.     You can `curl` or `wget` files from the www port     You can use it a source from which to copy files with `kubectl` e.g.    ```bash    kubectl cp $(kubectl -get pods -l role=test-monitor -o jsonpath={.items[].metadata.name}):/usr/share/nginx/html/someFile} local_dir    ```    (this is what the DVT library does automatically, by default)     You can use `kubectl exec` to grab data, as with:    ```,bash      kubectl exec $(kubectl get pods -l role=test-monitor -o jsonpath={.items[].metadata.name} cat /usr/share/nginx/html/subdir/file.ext > localdir/file.ext    ```    Instead of `cat`, you can use pipes and `tar` to copy files, e.g    ```bash    kubectl exec ... -- tar -cf - -C /usr/share/nginx/html someSubDir | tar xf -    ```    To easily find the name of the test monitor pod, you can create an `alias` to find the test monitor pod, using   whatever label you give it, like:    ```bash    alias test-monitor=kubectl get pod -l role=test-monitor -o jsonpath=\{.items[].metadata.name}\    ```   and then you can reference that alias, e.g. to get an interactive shell inside that container:   ```bash   kubectl exec -i -t $(test-monitor) -- /bin/sh   ```   or get the associated logs for the monitor:   ```bash   kubectl logs $(test-monitor)   ```## Best Practices for building DVT Docker Images Image size should be as small as practical   When building image as part of CI, the image should not contain test results or logs from Jenkins workspace   Have only necessary files required for test execution. Image should not contain any `src` files like `.java`, `.cpp`, etc. Build tools such as Gradle and maven makes it possible to run tests using just the Gradle/Maven file, and test binary files. There are couple of ways to package tests in the above mentioned steps by using Dockers multi-stage build, see [Docker documentation](https://docs.docker.com/engine/userguide/eng-image/multistage-build/){:target=_blank}:   _Method1_: package a fatJar with all files required during runtime.     fatJar can be run in two ways. Either by directly running tests using jar or by unpacking the jar to runtime classpath.   _Method2_: Copy only required files for tests to run:     Copy your build tool application and required dependencies downloaded for tests to run     Copy only required resources and compiled project files to respective folders     Copy any settings or properties files required for project. Examples for implementing this best practices are:   For _Method1_ (using Gradle):     To build image: [Dockerfile]( https://github.ibm.com/watson-engagement-advisor/wea-conversational-api-it/blob/master/Dockerfile){:target=_blank}     To build and run fatJar: [build.gradle](https://github.ibm.com/watson-engagement-advisor/wea-conversational-api-it/blob/master/build.gradle){:target=_blank}   For _Method2_:     Using Gradle: [Dockerfile](https://github.ibm.com/watson-engagement-advisor/analytics-core/blob/develop/tests/src/it/resources/e2e/docker/Dockerfile){:target=_blank}     Using Maven : [Dockerfile](https://github.ibm.com/watson-engagement-advisor/voyager-dialog-service/blob/develop/dialog-v2-test/Dockerfile){:target=_blank} If your test image has a lot of dependencies, it takes a while to download dependencies each time you build the image. You can avoid the hassle if you have your gradle/maven dependencies cache saved in a different image, then use the image with cache while building your test image. Only when there is a version change of a particular dependency, your gradle/maven would download newer version of that dependency. This way it would save a lot of build time.   Watson Conversation Analytics team has implemented this with Gradle. Their test image build & push time reduced from ~30mins to <10mins. Examples in analytics repo [Dockerfiles](https://github.ibm.com/watson-engagement-advisor/analytics-core/tree/develop/tests/src/it/resources/e2e/docker), [Jenkisfile](https://github.ibm.com/watson-engagement-advisor/analytics-core/blob/develop/Jenkinsfile#L693-L753) Make sure the return code from your test image is zero unless you want to tell Kubernetes you want the container to be restarted, which is what it will do automatically for non-zero return codes.   The container exit code should not be used to communicate pass/fail for the tests. Know, and enforce the maximum RAM the image may use.  You should be specifying these limits in your Job .yaml [example](https://github.ibm.com/watson-deploy-configs/conversation-dvt/blob/master/armada.d/60-bddjob.yml#L22){:target=_blank}.  If youre using Java, make sure you specify a maximum JVM heap size (e.g. `-Xmx1G`) otherwise your JVM (which isnt aware or the `limits` you set in Kubernetes, it only knows how much RAM exists on the `node` its running on) may not have attempted to garbage collect until after its used more than the `limits`, though Kubernetes is liable to auto-kill and restart the container once it uses more than the `limits` (`OOMKilled`).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/deployment-verification-testing/",
    },
    {
      "title": "Developer Resourcesbreadcrumb: Dev Resourcessidebar: dev",
      "text": "---title: Developer Resourcesbreadcrumb: Dev Resourcessidebar: dev---This pages contains references to generally accepted coding style guides and best practices for the languages commonly used throughout Watson Health## Style Guides- [Google Style Guides (external)](https://google.github.io/styleguide/ ){:target=_blank}- [Google Java Style Guide (external)](https://google.github.io/styleguide/javaguide.html){:target=_blank}    - [Eclipse Java Formatters (external)](https://google.github.io/styleguide/intellij-java-google-style.xml ){:target=_blank}    - [IntelliJ Java Formatters (external)](https://google.github.io/styleguide/intellij-java-google-style.xml ){:target=_blank}- [Google Python Style Guide (external)](https://google.github.io/styleguide/pyguide.html ){:target=_blank}- [Google JavaScript Style Guide (external)](https://google.github.io/styleguide/jsguide.html ){:target=_blank}- [Scala Style Guide](scala-coding-style-guide)- [Legal Guidance](legal-guidance)## REST API- [Best Practices](rest-api-best-practices)## QA and CI- [Watson Health CI/CD Guidelines](../../continuous-delivery/index/)- [Automated Testing with Travis CI](https://whitewater.ibm.com/patterns/automated-testing-with-travis){:target=_blank}- [Behavior Driven Development (BDD) with Cucumber](bdd-with-cucumber)## Version Control- [Delivering Code with GitHub](delivering-code-command-line)- [Code Review with GitHub Enterprise](https://whitewater.ibm.com/patterns/code-review-with-github-enterprise){:target=_blank}- [Semantic Versioning](http://semver.org/){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/index/",
    },
    {
      "title": "Java Coding Style Guidebreadcrumb: Java Coding Stylesidebar: dev",
      "text": "---title: Java Coding Style Guidebreadcrumb: Java Coding Stylesidebar: dev---### Deprecated...Please note that most teams have moved to using the style guides maintained by Google, they can be found [here](../index).### IntroductionBefore we start, we must recognize that this style guide is largely the work of the Watson Explorer team and has been adapted with their kind consent. This is a living document, you may want to follow this page as we revise and improve this page.This page documents the Java coding style and formatting used on all Java projects. Coding conventions are important for many reasons. The [Oracle Code Conventions For Java](http://www.oracle.com/technetwork/java/codeconventions-139411.html#16712){:target=_blank} lists some of the reasons:- 80% of the lifetime cost of a piece of software goes to maintenance.- Hardly any software is maintained for its whole life by the original author.- Code conventions improve the readability of the software, allowing engineers to - understand new code more quickly and thoroughly.- If you ship your source code as a product, you need to make sure it is as well packaged and clean as any other product you create.### Ground Rules1. By far, the most important standard is to write readable code. The rules documented on this page are NOT hard-and-fast rules. If breaking a convention results in more readable code which better expresses its intent, then by all means, break the convention.2. Some of the conventions in this document must be strictly followed (sometimes for legal reasons). Such rules contain the word MUST in their description.3. Dont break a convention without a good reason for doing so (and as strongly hinted above, breaking a convention for code readability is a good reason). A convention is only good if it is used in the majority of the code written.> PROTIP: Writing readable, expressive code is more important than conforming to a standard or convention.### Eclipse FormatterEclipse Java editor can perform automatic formatting of code according to defined rules.Suggested settings can be downloaded from [watson.formatter.xml](https://github.ibm.com/the-playbook/the-playbook.github.ibm.com/blob/develop/pages/developer-guide/eclipse-config/watson.formatter.xml){:target=_blank} (Right click the `Raw` button -> Save as...). The file can be imported in Eclipse preferences > Java > Code Style > Formatter page, and then this profile can be selected as active profile.The Java code can then be formatted by using menu Source > Format, or with associated hot key (Ctrl-Shift-F by default).### Eclipse Code CleanupEclipse editor can also perform some code cleanup, which can perform some routine operations like removal unnecessary imports or local variables or adding final keyword for variables which are not changed locally.Suggested settings can be downloaded from [watson.cleanup.xml](https://github.ibm.com/the-playbook/the-playbook.github.ibm.com/blob/develop/pages/developer-guide/eclipse-config/watson.cleanup.xml){:target=_blank} (Right click the `Raw` button -> Save as...). The file can be imported in Eclipse preferences > Java > Code Style > Clean Up page, and then this profile can be selected as active profile.The Java code can then be cleaned by using menu Source > Clean Up...### Eclipse Code templatesAll Watson code should include copyright statements. To simplify this routine process, code templates can be used.To use templates download settings from [watson.codetemplates.xml](https://github.ibm.com/the-playbook/the-playbook.github.ibm.com/blob/develop/pages/developer-guide/eclipse-config/watson.codetemplates.xml){:target=_blank} (Right click the `Raw` button -> Save as...), import it in Eclipse preferences > Java > Code Style > Code Templates and enable automatic adding of comments for new files at the bottom of the same preference page.> PROTIP: Sometimes code can be formatted manually better than it can be formatted using the Eclipse formatter. To prevent the Eclipse formatter from reformatting a region of code, surround the code with:```java/ @formatter:off / //... your specially formatted code .../ @formatter:on /```## Conventions and Standards### Oracle Coding ConventionsUnless otherwise stated in this document, Watson follows the [Oracle Coding Conventions for the Java Programming Language](http://www.oracle.com/technetwork/java/codeconvtoc-136057.html){:target=_blank}.### Source Code HeadersJava source files (.java)All Java source code files MUST have a copyright header using the following format.``` java/ BEGIN_COPYRIGHT   IBM Confidential  OCO Source Materials     (C) Copyright IBM Corp. YEAR1, YEAR2 All Rights Reserved.   The source code for this program is not published or otherwise  divested of its trade secrets, irrespective of what has been  deposited with the U.S. Copyright Office.   END_COPYRIGHT /```From the official [IBM Copyright Corporate Standards doc](https://w3-03.ibm.com/standards/esisstds.nsf/E5FD60876972962585256999004E8A0C/%24File/06045002.pdf){:target=_blank}> YEAR1, YEAR2 above should be replaced with (YEAR1 - must be GA for the original release and must be retained throughout the life of making the service available. YEAR2 is the year of the first external distribution of the latest substantial changes made in a module in either a source or object form. In the first delivery of a new module such as with now for WVA, only YEAR1 is used. YEAR2 is added to the copyright notice of a module when the module has been changed substantially and released in a year later than YEAR1. After that YEAR2 is changed again when further changes are made.Check with your team for the correct YEAR1 date for your copyright statements.### Property files (.properties)All property files MUST have the following header (which follows the same rules used for Java source files.).``` java### (C) Copyright IBM Corporation YEAR1, ${year}### All rights reserved```### Other source code filesIf possible, similar headers should be present on other types of source code files. The header should appear at the top of the file, and should use the comment characters appropriate for the source code file.### IndentationAs per the Oracle standard, four spaces should be used as the unit of indentation.Tab characters should not be used.### Line LengthThe Oracle standard suggests the maximum line length should be 80 characters. However, in many cases, it is difficult to write readable Java code in 80 characters on a single line. As such, a maximum line length of 120 characters is also acceptable (and is the default line length used by the Eclipse Code Style settings).### Tips:In eclipse,- go Preferences -> General -> Editors -> Text Editors -> check Show Print margin, and enter 80 in Print margin column.- go Preferences -> Java -> Code Style -> Formatter -> Edit... -> go Line Wrapping -> Maximum Line width -> enter 90.The setting above will show a soft line for 80, and hard wrap for 90.### Naming ConventionsIn addition to the naming conventions suggested by Oracle, the following naming conventions should be used.> PROTIP: If you find you are struggling with naming a class or method, look to the standard Java API documentation (Javadoc) for inspiration### Classes- Avoid the Impl suffix naming convention for classes which implement an interface. Instead, use a name that better describes how the class implements the interface. For example, a class which uses JAX-WS to implement a ```WebService``` interface might be named ```JaxWsWebService```.- Only capitalize the first character of an abbreviation. For example, use ```XmlEditor``` instead of ```XMLEditor```. Using camel-case in this way results in class names which are far easier to read.### Interfaces- Do not prefix interfaces with a capital I. Instead, use a noun which the phrase X is-a  makes sense for all implementations of the interface. For example, dont use ```ICar``` for a web service interface. A better name would be ```Vehicle```. Some implementations of the ```Vehicle``` interface might be called ```Car``` (a Car is-a Vehicle), ```Truck``` (a truck is-a Vehicle), or ```Van``` (a Van is-a Vehicle).> PROTIP: The I naming convention is discouraged for several reasons:> - From the consumer of a class/interface, it is rarely important to know whether or not a type is a class or an interface.> - Using the I convention breaks the illusion of polymorphism. This can easily be seen when trying to form is-a sentences (Car is-a IVehicle makes much less sense than Car is-a Vehicle).> - Modern development tools (including Eclipse) are capable of identifying interfaces from classes quickly and easily.### Methods- Only capitalize the first character of an abbreviation. For example, use ```convertToXmlString``` instead of ```convertToXMLString```. Using camel-case in this way results in method names which are far easier to read.- Follow the JavaBeans specification for naming property accessor and mutator methods (getXXX for accessors, and setXXX for mutators).### Variables- Dont use Hungarian Notation. As with the interface I prefix, modern development tools make such notations obsolete.- Abbreviating variable names is acceptable.    - Dont use single-letter abbreviations.### Constants- For XML use the C XML convention that we have used in Velocity:    - Tags: ``````_TAG    - Attributes: ```_```_ATTR    - Attribute values: ```__```    - . and - are replaced with _- Example: if you have `````` you should define:``` javapublic static final String A_TAG = a;public static final String A_B_ATTR = b;public static final String A_B_C = c;```### Private Fields- Use standard variable naming conventions for private fields and properties. Dont prefix private fields with an underscore (_)- Similarly, dont use the m_ or s_ naming conventions.### Java collection variable names- When naming variables which reference a Java collection, use names which describe how and what data is stored in the collection. The following table contains some suggestions and examples by collection type.| Collection Type	| Naming Convention	| Examples || ------------- |-------------| -----|| Arrays and Lists | Use a plural noun. | ```String[] urls = new String[3];``` ```List results = new LinkedList();``` || Maps | Use the format ```By```, where both ``` and ``` are nouns. Alternatively, use ```To```. | ```Map resultsByTerm = new HashMap<String, SearchResult();``` ```Map termsToResults = new HashMap<String, SearchResult();``` || Sets | Use a plural noun. Optionally use unique as a prefix. | ```Set uniqueNames = new HashSet();``` |## Further Resources[Growing Object-Oriented Software, Guided by Tests](https://www.safaribooksonline.com/library/view/growing-object-oriented-software/9780321574442/){:target=_blank}Contains a worked example of Test Driven Design in Java for a larger bit of software that interacts using Swing and network connections. Great example of OO design and TDD by guys that have developed software for a long time using these techniques. Shows the progression of code and thought process that you would go through (including dead ends), not just the beginning and end states.[XUnit Test Patterns](https://www.safaribooksonline.com/library/view/xunit-test-patterns/9780131495050/){:target=_blank}Classical patterns book, split into two main sections. The first section gives an effective introduction to important aspects of testing such as the goals of testing, test smells, how to improve tests, what clean tests look like, etc.. The second section has named patterns that facilitate discussion and explain when a given pattern is appropriate.[Working Effectively with Legacy Code](https://www.safaribooksonline.com/library/view/working-effectively-with/0131177052/){:target=_blank}Invaluable reference for dealing with existing code that is untested or undertested. This code is often not designed with testability and maintainability in mind, which means adding tests or making improvements after the fact is very complicated and has many opportunities to break in subtle ways. The book contains effective techniques on how to safely get tests around code before modification. Jake uses this as his Bible when he gets frustrated with code.[Refactoring: Improving the Design of Existing Code](https://www.safaribooksonline.com/library/view/refactoring-improving-the/0201485672/){:target=_blank}Defines the term refactoring, which isnt just a synonym for changing code but is about improving the design of code without changing behavior. This is another patterns book, with a discussion of what refactoring is and how it improves the design of your code, followed by recipes for specific refactorings. While many of these are built into tools like Eclipse, it is important to understand why a given refactoring will help you achieve your design goals.[Design Patterns: Elements of Reusable Object-Oriented Software](https://www.safaribooksonline.com/library/view/design-patterns-elements/0201633612/){:target=_blank}The original software patterns book. As expected, it starts with a case study of where patterns could be applied, and follows with a catalog of patterns. These patterns are invaluable for communicating with software development peers and leveraging existing structure without reinventing the wheel.[Clean Code: A Handbook of Agile Software Craftsmanship](https://www.safaribooksonline.com/library/view/clean-code/9780136083238/){:target=_blank}Bad code can work, but maintaining it results in wasted time that only increases with each release; you can work faster by working well. Contains practices that any professional developer should be aware of to create clean, maintainable code that can be expanded on and worked with. Includes code reading and worked examples for these concepts. Covers many aspects of development such as naming, method and class design, comments, and testing. These practices have been collected from multiple professionals over many decades.### Delivering changes- As much as possible, deliver small change sets focused on one thing.  This makes the job of reviewers much easier.- Keep in mind that your change set could be picked up and tested by a Continuous Integration build.  Deliver dependent changes as a group, and either tolerate missing external resources, or ensure they exist before delivering your changes.- Deliver style-only changes and refactoring separately from other changes.### Unit Test Conventions and StandardsA unit test is intended to verify a single unit of functionality in isolation. Other types of tests exist and can be written in the JUnit framework. However, those test classes should be in an itest package and can be executed via the maven, verify goal.Writing expressive code is very important when writing unit tests. Expressive unit tests are more valuable in the long run because:- Expressiveness helps unit tests to serve as a form of code documentation.- Makes it easier to understand what a test is testing (when it fails).- Makes maintaining unit tests easier.As such, we suggest using a unit testing style which breaks some of the standard Java conventions in favor more expressive code. This section documents that unit testing style. All of these conventions assume JUnit 4 is being used.> PROTIP: Unit test code is different from production code. It has different needs and requirements. Using a distinct style for unit tests helps to shift your thinking when you are working with the tests.### Test Classes- Append Test to every class which contains JUnit tests (CrawlerTest).- Generally, create at least one test class per production class (ShapeTest for the Shape class, CarTest for the Car class, etc).    - If the test class becomes large, break the tests into separate classes.    - Use the format ```_Test``` for naming such tests, where `````` is the name of the class the tests are for, and ```TestDescription``` is some description of what makes the tests in the test class different from tests in the other test classes.    - Examples:        - ```CarTest```        - ```Car_HandlesNullsTest```        - ```Apple_WhenRottenTest```        - ```Apple_WhenFreshTest```### Test Method Names and Signatures- Use ```snake_case``` instead of ```CamelCase```. ```snake_case``` is easier to read when reviewing unit test results (both in the Eclipse JUnit window, Maven SureFire Test reports, and from the command-line).- Dont start test method names the word test (as of JUnit 4, this is redundant).- If a test is to validate a particular defect hasnt regressed, use the defect ID in the test class name, method name or the descriptive string passed to AssertXXX()- Try to make the method name read like a valid sentence. It is okay for test method names to be long.- Describe the desired result and the behavior/input which should lead to the desired result in the test name.- Use the format ```__when_``` (note the double-underscore between <```expected_result``` and ```when```), where `````` is the common result the methods test for, and `````` is a description of the condition which should generate the expected result. This format is particularly useful when multiple test methods test for the same result.- Always throw ```Exception```.Examples:``` java@Test public void turns_red__when_the_apple_ripens() throws Exception@Test public void enqueues_a_group__when_only_one_group_exists() throws Exception@Test public void enqueues_all_groups__when_multiple_groups_exist() throws Exception```### Test Tips- Should avoid random when writing test, should have control on the test.- Running a test once vs. N times is not important, which means dont run a test N times.- Dont rely on JUnit to run your tests in any particular order, it wont.- Assert only one thing per test method.### Behavior-Based Test Methods (using BDD / Gherkin patterns)- For all but the most basic tests, dont put all of the test code in the test method itself. Instead, create given, when, and then methods (named using snake_case)    - Given methods        - The given method name should describe the state of the system (or class) before the test executes (aka, this is the precondition).        - Often, the setup code that usually goes in an ```@Before``` method will end up in the given methods.    - When methods        - The when method name should describe the action that is taken to trigger the test.    - Then methods        - The then method name should describe the desired result of the behavior described by the when method.    - All assertions should be contained in then methods.- Pass data which is specific for each test as parameters to the ```given```, ```when```, and ```then``` methods.- Use [Hamcrest-style assertions](https://github.com/junit-team/junit4/wiki/assertions){:target=_blank} rather than the traditional JUnit assertion methods.- List the ```@Test``` methods before the given-when-then methods in the test class.- List the ```given``` methods before the ```when``` methods, and list the ```when``` methods before the ```then``` methods.> PROTIP: You will find that using the GIVEN-WHEN-THEN method pattern will create a composible set of methods which you can use to build new tests. Using this approach can greatly increase the speed in which you can write new tests, without duplicating a lot of code.Below is an example that illustrates Behavior Based Test Methods. Note that the asserts include a String that will be printed if the test fails.```javapublic class MoviePricerTest {  private MoviePricer pricer;  @Before  public void setUp() {    pricer = new MoviePricer();  }  @Test  public void should_buy_general_admission_ticket() {    GIVEN.i_want_to_watch_a_general_movie();    WHEN.i_purchase_a_ticket();    THEN.the_final_price_should_be(11);  }  @Test  public void should_buy_one_student_ticket() {    GIVEN.i_want_to_watch_a_general_movie();    WHEN.i_purchase_a_student_ticket();    THEN.the_final_price_should_be(8);  }  private void i_want_to_watch_a_general_movie() {    pricer.startPurchase(119, Day.MON, true, false);  }  private void i_purchase_a_ticket() {    pricer.addTicket(35, false);  }  private void i_purchase_a_student_ticket() {    pricer.addTicket(35, true);  }  private void the_final_price_should_be(float i) {    float finalPrice = pricer.finishPurchase();    assertThat(String.format(The final price %d should be equal to %d, finalPrice, i),                     finalPrice, is(equalTo(i)));  }  private MoviePricerTest GIVEN = this, WHEN = this, THEN = this, AND = this, WITH = this;}```### Mocks, Stubs and Fakes ...oh my!A unit test should be limited in scope of execution, but the code under test may rely on databases, web servers, search engines, etc. The interface under test can be isolated by disabling behaviors or pretending that a resource exists. This is often done by employing mocks, stubs and fakes. Mocks stubs and fakes are all kinds of test double.Employing test doubles when coding unit tests enables the test to achieve that level of isolation that will- Fast execution- Expectations can be expressed in each test case increasing code readability- Easy clean up after each test and/or test suite - no external systems to reload/reset/reconfigure/restore/...etc.- Reduce the scope of causes for test failure to the code under test and/or the test- Isolated tests can be run in parallelCons to test doubles approach:- It can be a lot of work to set up the test doubles to effectively isolate complex tests. (This is a code smell. You should ask yourself if the design could be improved so that your system under test does not depend on as many collaborators.)- Its not always easy to find the points to isolate (this also points to a design problem in the code under test).- Code coverage scores are reduced when the only code that is run as part of a test is the code that is verified by the test.- Additional work to create a separate suite of integration tests.Recommended further reading:- [Growing Object-Oriented Software Guided by Tests - Steve Freeman and Nat Pryce](http://www.growing-object-oriented-software.com/){:target=_blank}- [XUnit Test Patterns: Refactoring Test Code - Gerard Meszaros](http://xunitpatterns.com/){:target=_blank}Recommended articles:- [Mocks Arent Stubs - Martin Fowler](http://martinfowler.com/articles/mocksArentStubs.html){:target=_blank}- [Mocks, Fakes, Stubs and Dummies - Gerard - Meszaros](http://xunitpatterns.com/Mocks,%20Fakes,%20Stubs%20and%20Dummies.html){:target=_blank}- [Mock Roles, Not Objects - Steve Freeman, Nat Pryce, et al.](http://www.jmock.org/oopsla2004.pdf){:target=_blank}- [Hexagonal Architecture - Alistair Cockburn](http://alistair.cockburn.us/Hexagonal+architecture){:target=_blank}- [Principles of Object Oriented Design (The SOLID Principles) - Uncle Bob Martin](http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod){:target=_blank}Recommended viewing:- [Why You Dont Get Mock Objects - Gregory Moeck](http://www.confreaks.com/videos/659-rubyconf2011-why-you-don-t-get-mock-objects){:target=_blank}- [The Deep Synergy Between Testability and Good Design - Michael Feathers](http://www.youtube.com/watch?v=4cVZvoFGJTU){:target=_blank}- [The Magic Tricks of Testing - Sandi Metz](http://www.justin.tv/confreaks/c/2247122){:target=_blank}### Unit tests vs. Integration TestsUnit tests and integration tests are intended to test behavior at different levels. Unit tests assert the correctness of small, focused parts of a system, such as a class. Integration tests focus on testing that behavior is correct across the larger system. Both are important for different reasons, and testing should be considered incomplete without both types. However, they should only be used on their appropriate levels.When we discuss unit tests, the important aspect is that we are showing correctness of our [SUTs (system under test)](http://xunitpatterns.com/SUT.html){:target=_blank} behavior by isolating it from any collaborators it may have in the system. These collaborators could be such things as other objects in our domain that have behavior, or they could be external systems such as Velocity, the file system, the system clock, user input devices, etc.By doing this, we know that the only source of potential issues is our SUT, since we are replacing all of the other behavior in the process with our pre-defined [test doubles](http://xunitpatterns.com/Test%20Double.html){:target=_blank}. Our SUT can send messages to its [mocked](http://xunitpatterns.com/Mock%20Object.html){:target=_blank} collaborators and assume that they will operate perfectly (since the actual implementations are tested elsewhere). This is also the reason that dependency injection becomes important in our testing approach. If an object has dependent collaborators that are hidden in its implementation, then we cannot replace them in our tests, and the design lessens our ability to test these objects well in isolation. This is overcoupling, when our object has too much dependency on the implementation of other objects. By replacing dependencies on the concrete implementations of a class with a reference to an interface in Java or via duck typing in Ruby, we remove this coupling.Value types do not have to be mocked in unit tests. Since true value types have no behavior, they cannot be the cause of behavioral issues in our tests. Of course this does not prevent the possibility that our SUT is interacting incorrectly with the value type. That, however, is an incorrect behavior in our SUT. This is similar to the notion that we should not be attempting to directly test private methods of our object. We should see the behaviors that we desire come about in our public interactions with the SUT, and our testing should also follow this approach. This allows the object to encapsulate its implementation details so that we are not dependent on its specific implementation.Integration tests are any tests where you want to test behavior that involves more than one object with behavior. This includes any external resource. In this case, we should not have _any_ mocks in our test.When should you have tests such as these if you could just test things at a unit level? Mocks enable us to assume that the collaborators behavior is exactly as our SUT needs. Since we cannot change (and therefore cannot improve) the behavior of external systems such as the file system API or the input API (and to some extent the Velocity API), it is not appropriate to mock/stub them out in our tests. We should be using real data in place.The [ports and adapters / hexagonal architecture](http://alistair.cockburn.us/Hexagonal+architecture){:target=_blank} concepts help here. If we make adapters for all of our external resources, then we must only perform integration tests at that layer. Our adapter should be providing an abstraction that is appropriate to how our domain objects need to interact with the external system. This might mean that the same external system is actually exposed to our domain objects via more than one adapter, if this makes the abstractions more appropriate. An important realization to make is that even such resources as the system clock can be abstracted away in this approach. In this case, a generic clock interface is provided to suit the domains needs, and the default can be the system clock. However, to do isolated unit testing, a test double can be provided with a [fake](http://xunitpatterns.com/Fake%20Object.html){:target=_blank} implementation of the clock logic. Then, tests can perform thread sleep logic, time-limited functions, and other related behaviors without actually having to wait for the wall clock time to elapse. The test double can simply tell the SUT that the time has immediately progressed as necessary for the tested behavior to be triggered.Generally, for new functionality, a high-level integration test should be written that attempts to use the full system and fails in an informative way. Then, the behavior necessary to accomplish that functionality should be built using unit tested additions to the design. Further integration tests will be necessary if external resources are needed, but should preferably only be necessary at an adapter level. Once enough unit-tested behavior has been added that the high-level integration test passes, then that aspect of feature should be complete.If integration tests are being added to test domain logic further and further into the system, that may be a sign of a leaky abstraction in our adapter level. Our domain logic is likely too tied to how the external system is implemented. If our design can be improved so that our abstraction of that external system is better suited to our domain, then that should be preferred over creating more and more heavy-weight, less focused integration tests.### FixturesA fixture is a class that will initialize a set of resources common to a number of tests and/or test suites.Recommended further reading - [JUnit FAQ ### 15](http://junit.sourceforge.net/doc/faq/faq.htm#tests_15){:target=_blank} and [Simple Smalltalk Testing, Kent Beck](http://www.xprogramming.com/testfram.htm){:target=_blank}### Tests with threadsThe first answer to the question, How do I add threads to my unit tests? is Dont do it. Because much of CXO relies on activities and activities are very concurrent there are unit tests in our code base that use threads. If you must use threads then use the ThreadFactory fixture as shown below. This fixture will ensure that all threads launched by the test are resolved before completing the test suite.```javapublic class SleepingOrphanTest {    protected static ThreadFactory tfactory = new ThreadFactory();    @BeforeClass    public static void setup() {        tfactory.setup(SleepingOrphanTest.class);    }    @Test    public void runRipVanWinkleThread() {        Thread t = tfactory.newThread(new Runnable() {            public void run() {                try {                    while (true) {                        Thread.sleep(1000);                        System.out.println(Zzzz....);                    }                } catch (InterruptedException ie) {                    throw new RuntimeException(ie);                }            }        }, Rip Van Winkle);        t.start();        try {            t.join(3000);        } catch (InterruptedException ie) {            assertTrue(ie.getLocalizedMessage(), false);        }    }   @Test   public void runThreadSpawningClass(){     Thread t = tfactory.newThread(new Runnable() {            public void run() {                ThreadSpawningThing thing = new ThreadSpawningThing();                 thing.doStuff();                 assertTrue( Some stuff happened., thing.stuffHappened() );            }        }, Spawning Thing Test);        t.start();       assertTrue( Spawned Threads that do stuff, SpawningThing.runningServiceThreadsCount() > 0 );       t.join(10);  //wait for the test thread to complete otherwise the test will likely never happen.   }    @AfterClass    public static void teardown() {        tfactory.teardown();    }```The above code is a test case that uses the ThreadFactory fixture to create a thread around the Runnable object needed for this test. The first test, Rip Van Winkle, starts a thread that will continue to run after the test completes. When the suite is complete the JUnit framework will call the teardown method and in turn call the teardown for the Thread fixture. This will attempt to shutdown every thread that was started by the test. The second test starts a thread to run a class that spawns threads, apparently daemon threads as they persist beyond the scope of the object itself. These threads will also be cleaned up by the fixture because they were launched by a thread created by the fixture. If any of these threads fail to shutdown in the teardown method an Assert is raised failing the suite with a stack trace for any threads still running.### Other Recommendations- Read [Effective Java by Joshua Bloch](https://www.safaribooksonline.com/library/view/effective-java-2nd/9780137150021/){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/java-coding-style-guide/",
    },
    {
      "title": "Legal Guidancebreadcrumb: Legalsidebar: dev",
      "text": "---title: Legal Guidancebreadcrumb: Legalsidebar: dev---## IntroductionThere is a wealth of information on [w3 Legal](https://w3-03.ibm.com/ibm/documents/corpdocweb.nsf/ContentDocsByTitle/Legal/){:target=_blank} to help you with everything you could need. This page is meant to cover a few things that our Squad members deal with on a regular basis.## Open Source- [Participating in Open Source Projects](https://w3.ibm.com/developer/opensource/){:target=_blank}## Copyright Statements in Source CodeThe following rules have been approved by Jeff Labaw for Watson to meet IBM copyright requirements under the [C-S 0-6045-002 standard](https://w3-03.ibm.com/standards/esisstds.nsf/0/E5FD60876972962585256999004E8A0C?OpenDocument){:target=_blank}. Copyright years should be modified as appropriate, guidance is available in the standard.Every  source code file that is not distributed outside of IBM must contain the following copyright statement as a comment at the top of the file:```java/  //                                                                   // IBM Confidential                                                  // OCO Source Materials                                              //                                                                   // (C) Copyright IBM Corp. YYYY, YYYY                                //                                                                   // The source code for this program is not published or otherwise    // divested of its trade secrets, irrespective of what has been      // deposited with the U.S. Copyright Office.                         //                                                                   //  /```Every Java source file that contains a public static void main(String[]) method (i.e. a launch-able Java program) must contain the following copyright statement as a package-visible static final variable:```javastatic final String IBM_COPYRIGHT =\n\nLicensed Materials - Property of IBM\n +(C) Copyright IBM Corp. YYYY, YYYY. All Rights Reserved.\n +US Government Users Restricted Rights - Use, duplication or  +disclosure restricted by GSA ADP Schedule Contract with IBM Corp.\n\n;```[Need details for non-java files to be covered here]Every Java JAR file must contain a copyright file (located at META-INF/COPYRIGHT) that contains the following text:```java Licensed Materials - Property of IBM (C) Copyright IBM Corp. YYYY, YYYY. All Rights Reserved. US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.```[Unclear if other archives need similar]Every source file that is distributed outside of IBM must contain the following copyright statement as close to the top of the file as practically possible (modify comment delimiter as appropriate):```java# ## Licensed Materials - Property of IBM## (C) Copyright IBM Corp. YYYY, YYYY. All Rights Reserved.## US Government Users Restricted Rights - Use, duplication or# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.## ```For cloud offerings a good rule of thumb is if the file is part of anything that makes it into a production deployment it will likely end up being distributed outside of IBM at some point so just treat it that way now. Examples of source files that fall into this category:- Shell or command scripts (.sh, .cmd, etc.)- Text-based resource files (.html, .css, etc.)- Text-based configuration files (web.xml, .properties, etc.)- Interpreted language files (JavaScript, Python, PHP, etc.)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/legal-guidance/",
    },
    {
      "title": "Merging (DRAFT 1)breadcrumb: Mergingsidebar: dev",
      "text": "---title: Merging (DRAFT 1)breadcrumb: Mergingsidebar: dev---Teams in Watson follow [GitHub Flow](https://guides.github.com/introduction/flow/){:target=_blank} when delivering code. Fork & Clone > [Branch](branching) > Commit > Pull Request. Pull Requests are reviewed [and merged](merging) by another Squad Member so we can ensure we comply with [separation of duties](https://en.wikipedia.org/wiki/Separation_of_duties){:target=_blank} rules.This page will focus on organizational Best Practices around the last part of the flow: Merging.## The RuleNever merge your own work.Its really as simple as that.All Watson Squad Members must have someone else review and merge their work.Squad Members must never merge their own work and put it into Production.## Overall StrategyWhy? Several reasons.- Its been proven time and time again that Code Reviews prevent defects from entering our Systems.- Taking responsibility for merging someone elses work motivates you to perform a more thoughtful review.- It provides the lowest-cost way possible to implement separation of duties controls into our workflow without negatively impacting our Squad Members.- Separation of Duties is a non-negotiable requirement for selling software and services in regulated industries.## What its not- This is not a review board- This is not a heavyweight process- This does not take control away from the hands of the Squad Members- This doesnt require anything other than following [GitHub Flow](https://guides.github.com/introduction/flow/){:target=_blank}- This does not drastically change how the vast majority of Squads have already been working",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/merging/",
    },
    {
      "title": "OSSbreadcrumb: OSSsidebar: dev",
      "text": "---title: OSSbreadcrumb: OSSsidebar: dev---Operational Support Systems (OSS) mission is to ensure that all Watson and Cloud platform services adopt the OSS platform to provide a consistent experience for our customers by utilizing a common integrated Service Management toolset.  The OSS scope includes defining technology, workflows and tooling for the various modules that comprise of a Service Management platform. The modules are [Case Management](#case-management), [Incident Management](#incident-management), [Problem Management](#problem-management), and [Change Management](#change-management).## Case managementAll services are required to use the application ServiceNow as the case management tool. The Bluemix console will be updated to invoke ServiceNow APIs to get tickets created in the ServiceNow repository. The global support team will work case tickets in ServiceNow and if they need additional assistance, support will initiate a sync to GitHub to engage development/L3. This is a bi-directional sync.## Incident ManagementServiceNow is the platform to be used for Incident Management. ServiceNow will have integrations in place with the Event Management System (Netcool) critical for managing incidents. With the integration between Netcool and ServiceNow, incident records will be automatically created for correlated events in Netcool.Any actions taken by the TOC/GRE/SRE/Tribes will have to be recorded in the incident record. ServiceNow will also be integrated with PagerDuty so that escalations or notifications can occur from the incident record.## Problem ManagementProblem management workflow resides in ServiceNow. Upon closure of an incident, a problem record will be created and assigned to the service / [Root Cause Analysis](https://en.m.wikipedia.org.wiki/Root_cause_analysis){:target=_blank} (RCA) owner. The RCA owner will perform the RCA (coordinated by an Availibility Manager (aka AVM)). Problem tasks (action items) are listed as part of the problem record. See the [RCA Policy](https://ibm.box.com/s/lv8h6ks1c58d86g48qelfxxee6pkxzg4){:target=_blank} and [RCA Process and Guidance](https://ibm.box.com/s/m7y1xrohb6mzlsro7gysqu9dbepc494z){:target=_blank} for more details. These tasks are sync’d up with GitHub so that developers can take action (without having to get a ServiceNow license).## Change ManagementRTC or ServiceNow are the only platforms to be used for Change Management. Change Requests created in either of these tools will be displayed on the Global Change Calendar that is accessed through ServiceNow. ServiceNow gets the RTC Change Calendar information by way of BlueMix Doctor and inherently from ServiceNow. The Change Calendars from both tools are then aggregated to the ServiceNow Global Change Calendar.  See [Change Management Details](operational-support-systems/Change-Management-Details) for more information.## OSS Core ServicesOSS provides the following core services: The [Technical Integration Point (TIP)](https://github.ibm.com/cloud-sre/world-of-tip/blob/master/README.md){:target=_blank} is the integration point that specifies the interface that allows your services to interact with the OSS Platform. [ServiceNow](operational-support-systems/ServiceNow) is the integrated IT service management tool for Watson and Cloud Platform. The [Technical Operations Center (TOC)](operational-support-systems/Technical-Operations-Center) provides incident, problem, and availability management for Watson and Cloud Platform.## OSS OnboardingTo take advantage of the OSS services, your service must complete OSS onboarding.  The key activities are Enroll your service in [ServiceNow](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W72236921778c_44ea_b5ac_6d8bad99ac4e/page/Enrolling%20A%20Service%20for%20Ticket%20Management){:target=_blank}. The [cheat sheet for enrolling services](https://ibm.ent.box.com/notes/244045701906?s=rellzkqseom4i63tyzki5w2ci50aumcd){:target=_blank} may be helpful. Integrate your service with the [Technical Integration Point (TIP)](https://github.ibm.com/cloud-sre/world-of-tip/blob/master/README.md){:target=_blank}{:target=_blank} to send alert data from your service monitoring to ServiceNow and the TOC. Review the [Service Framework](https://pages.github.ibm.com/ibmcloud/Service-Framework/){:target=_blank} and adhere to the [Transitions in Production](https://pages.github.ibm.com/ibmcloud/Service-Framework/30_productionchanges.html){:target=_blank} requirements.     The Service Framwork requires your service is TOC enabled.  See [onboarding to the TOC](operational-support-systems/TOC-Onboarding) for more details. To assist in monitoring your service you can leverage New Relic.  See [New Relic User Guide](https://pages.github.ibm.com/newrelic/newrelic-guide/){:target=_blank} for details. If you are using Prometheus, collectd, fluentd or Graphite to collect metrics, your metrics could also be consolidated to New Relic for alerting and dashboarding. Here is the [metric integration architecture](https://pages.github.ibm.com/newrelic/newrelic-guide/integration/Metricss-integration-5.5.html){:target=_blank}## Service ContractIBM Watson and Cloud Platform is prioritizing stability and reliability within its Service catalog. To assist Services inthe journey of improving availability, the Service Engineering Foundation has been created to provide a roadmap ofincreasing maturity for Services to follow.  See Service Engineering Foundation [Service Contract](https://pages.github.ibm.com/CloudEngineering/service_contract/) for more details## EU CloudThe OSS team is committed to supporting IBMs European Cloud initiatives as discussed in the recent [EU Cloud Announcement](https://www.ibm.com/blogs/cloud-computing/2017/11/ibm-cloud-europe-control-data/){:target=_blank}.  In this announcement it was outlined that clients will have the ability to review and approve all non-EU access requests to their content if an instance requires support or access from a non-EU based employee.  Details of the EU exception are outlined in the [EU Exception Process Requirements](operational-support-systems/EU-Cloud-Exception-Process-Requirements)## ELKELK is the OSS implementation of ELK (Elasticsearch, Logstash, and Kibana).  In real-time ELK is loaded with all alert data processed through the OSS Netcool instance to ServiceNow.  The instance is open to tribes so they can see both real-time and historical alert data processed by OSS.  The link below is the OSS Git repository where you can learn more about ELK, ask questions or raise an issue.[The ELK Project](https://github.ibm.com/sosat/elk-help){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/operational-support-systems/",
    },
    {
      "title": "PagerDuty Accessbreadcrumb: PagerDuty Accesssidebar: dev",
      "text": "---title: PagerDuty Accessbreadcrumb: PagerDuty Accesssidebar: dev---## OverviewPagerDuty is an incident management platform that provides reliable incident alerting via Slack, email, push, SMS, and phone, as well as automatic escalations, on-call scheduling, and other functionality to help teams detect and fix infrastructure problems quickly.## Requesting a PagerDuty AccountIf you are part of a team that is on an On-Call rotation supporting your service(s) or if you need to create, or otherwise modify PagerDuty alerts you will need to request a PagerDuty account through USAM. The steps you must take are listed below with screen shots to help guide you. Go to the [Request System Access Page](https://usam.svl.ibm.com:9443/AM/idman/AddSystemAccess){:target=_blank} Search for system USAM-PIM1-BMX Click the checkbox and Submit the form Specify your W3id as user id in the Access using ID: box Enter a Business justification for your access requestNote: When you see Bluemix (capital B), keep scrolling. 🙄 Select the bluemix (lower case b) group and expand it Click on bluemix-pager-duty… to expand it. Select the PagerDuty Privilege/Group access level based on the requirements of your job. Use the descriptions provided.Note: Admin access is only granted to managers, so that narrows your choices. Enter a business justification based on your access needs. For example:    1. For SRE, Dev Ops: As a  for Watson, I need access to receive and respond to alerts, as well as create, delete, configure and modify PagerDuty Services, Policies, and Schedules for all of the Watson services I am responsible for.    2. All Others: As a , I need access to be able to receive and respond (acknowledge, snooze and resolve) alerts for the Watson services that I am responsible for supporting. LICENSE POOL - in the business Justification field, specify the license pool you will be using for your license.    - Note: Each Department or Tribe, now has a PagerDuty License Pool assigned to it.        - If you report under Aameek Singh your License Pool is: Watson Services Development.        - All others - Ask your Manager - To provide you with the License Pool information that you will need to specify in the Business Justification section.        - If you are unable to determine the License Pool information. - Contact the PagerDuty License Administrator:            Seamus Christie            Business Operations            Watson & Cloud Platform            Phone: +353-1-815-2325            Mobile: +353-86 1742299            e-mail: seamus_christie@ie.ibm.com Click submitOnce your PagerDuty account has been created you will receive a Welcome to PagerDuty… email with a link to confirm your account and login on the PagerDuty web portal.## PagerDuty Account Basic SetupOnce you have logged in to PagerDuty, navigate to your profile and configure your email and phone numbers and any combination of methods you would like PagerDuty to use to notify you.The choices are:- Voice - PagerDuty will call you and Read/Speak the alert information to - You can respond via the phone key pad- Text Message - PagerDuty sends you a text message for each alert - you can reply back to respond- Email - PagerDuty will send you an email for each alert - There is no respond option with email.- PagerDuty App - You can install the PagerDuty app to your Apple or Android smart phone from the Apple App Store or Android Play store.The PagerDuty App provides the best user experience and broadest level of functionality apart from the PagerDuty Web portal. The app will self-register with the PagerDuty service when you start it and login to it with your PagerDuty credentials. It must be allowed to run in the background on your phone to listen for push notifications.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/pager-duty-access/",
    },
    {
      "title": "PagerDutysidebar: dev",
      "text": "---title: PagerDutysidebar: dev---## OverviewPagerDuty is an incident management platform that provides reliable incident alerting via Slack, email, push, SMS, and phone, as well as automatic escalations, on-call scheduling, and other functionality to help teams detect and fix infrastructure problems quickly.A description of PagerDuty can be found here:## PagerDuty accessTo get access to PagerDuty, follow the steps found [here](pager-duty-access)## Slack IntegrationMembers of the IBM Watson Slack Workspace can now set up the updated PagerDuty Integration without help from an Administrator.The updated PagerDuty Integration allows you to acknowledge (and take ownership) of Incidents right from your Slack Channel. This requires a one time linking of your Slack and PagerDuty accounts, just follow the prompts, its super easy.![Slack Integration](https://www.pagerduty.com/wp-content/uploads/integration-guide-assets/Slack-1.png)To set up PagerDuty for Slack, follow the steps found [here](https://www.pagerduty.com/docs/guides/slack-integration-guide/){:target=_blank}> ProTip> If you used the old PagerDuty Notification with your Slack Channel, youll need to remove your old configuration after you set up the new one. You can find your previous integration in the list found [here](https://ibm-watson.slack.com/apps/A0F81FMQW-pagerduty-notifications?page=1){:target=_blank}## Watson Assistant Team PagerDuty alertsThe Master List of PagerDuty alerts can be referenced [here](https://github.ibm.com/watson-engagement-advisor/wea-support/wiki/Master-list-of-PagerDuty-alerts){:target=_blank}.Note: Going forward, there may be 2 sets of PagerDuty alerts for Watson Conversation to allow for different policies between Standard and Premium plans.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/pager-duty/",
    },
    {
      "title": "REST API Best Practices Guidetemplate: _layout.htmlsidebar: devbreadcrumb: REST Best Practices",
      "text": "---title: REST API Best Practices Guidetemplate: _layout.htmlsidebar: devbreadcrumb: REST Best Practices---# IntroductionThis document contains guidance on the best practices for Watson Health APIs and the source of the standards on which they are based.  The main standard to follow is documented in the [Cloud and Watson System Architecture](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/service_interfaces.html){:target=_blank}.  This one has the final word. The other documents listed conform to this one.  This document provides specific instruction to help with boiling down the guidelines or where there is ambiguity or differences.# Standard SourcesIt is important that all Watson Health and in particular our Watson Health Cognitive Services have a consistent interaction approach and look and feel the same.  We are all part of the overall IBM API experience and are often going to be used with the cognitive Watson Developer Cloud services.  Therefore there is a hierarchy of sources of service API standards being referenced by Watson Health as best practices.  From top to bottom these are:   1. [Cloud and Watson System Architecture](https://pages.github.ibm.com/CloudEngineering/system_architecture/guardrails_standards/service_interfaces.html){:target=_blank}  Primary source for standards.   2. SmartCloud Exchanges API best practices - Refer to the [API Best Practices document](https://w3-connections.ibm.com/communities/service/html/communityview?communityUuid=2bc0976d-bbeb-4bae-acf2-568c2c525f17#fullpageWidgetId=Wec32a5e50d5a_4af5_afb1_f2ae20fa131b&file=bc6633cc-1d16-40b4-a043-7f64ea42f700){:target=_blank} found in the [API Best Practices Community](https://w3-connections.ibm.com/communities/service/html/communityoverview?communityUuid=2bc0976d-bbeb-4bae-acf2-568c2c525f17){:target=_blank} of the SmartCloud Exchange Community.  SmartCloud Exchange is an IBM initiative run by the CTO.   3. Watson Developer Cloud (WDC) best practices - Refer to the [README.md](https://github.com/watson-developer-cloud/api-guidelines/blob/master/README.md){:target=_blank} found in the [Watson Developer Cloud Github project](https://github.com/watson-developer-cloud/api-guidelines/){:target=_blank}.   4. IBM Cloud development guidelines for APIs - [https://console.stage1.bluemix.net/docs/developing/api/handbook-fundamentals-headers.html#headers](https://console.stage1.bluemix.net/docs/developing/api/handbook-fundamentals-headers.html#headers){:target=_blank}   5. Watson and cloud API handbook [https://pages.github.ibm.com/CloudEngineering/api_handbook/](https://pages.github.ibm.com/CloudEngineering/api_handbook/){:target=_blank}   6. Watson Health best practices - Refer to the [Best practices and guidelines](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/Wa82025236eb9_4217_a434_ca40a0820057/page/Complete%20Initial%20Education%20on%20WH%20Services%20Standardization?section=1.%20API%20best%20practices){:target=_blank} in the Secure Cloud Solution for Healthcare wiki. (contact Anca Sailer for access)See also this blueprint talk on a workgroup that was developing cloud/Watson wide guidelines on API best practices : [http://w3.blueprint.sby.ibm.com/b_dir/blueprint.nsf/url/AB238985?OpenDocument](http://w3.blueprint.sby.ibm.com/b_dir/blueprint.nsf/url/AB238985?OpenDocument){:target=_blank}.  The current output of this workgroup is captured in the Watson/cloud API handbook here: [https://pages.github.ibm.com/CloudEngineering/api_handbook/ ](https://pages.github.ibm.com/CloudEngineering/api_handbook/){:target=_blank}Youll notice it doesnt capture everything (most things?) that were in the SmartCloud or WDC guidelines so it seems to augment it w/ things like paging, etc and overlaps with other areas.# Specifics (Items of particular note)## Data model guidelines1. Complex data models should start with an XML schema.  From this, the java beans should be created and the object factory should be extended and used as needed.  Refer to service-container-model as an example.## Liberty guidelines1. The Liberty shared resources location should not be used.  Instead the /watson/build/resources location should define the resources and manifest-resources.xml should be utilized.  Refer to service-oncology-concept as an example.2. Customizable service configurations must use the artifact store service for coordinating configurations in a multi-hosted environment.## Swagger guidelines### General1. Expand acronyms the first time they are used in text.	Example: ...Unified Medical Language System (UMLS)... then use UMLS for future references.2. APIs are grouped by similar functions.	Example: Ontology exploration has two groups, Concept expansion and Concept matching.For reference: [https://watson-api-explorer.mybluemix.net/](https://watson-api-explorer.mybluemix.net/){:target=_blank}### Title/Header1. Title is full service name with the first letter of each word capitalized.  This is displayed at the top of the swagger page and the name in the browser tab.  Its currently in two places in the source code, ServiceConstants.java (swagger) and service-constants.js (tab).	Example: Concept Matcher Service2. Use standard Watson Cognitive Healthcare banner on Swagger page.### Description1. Primary description section - At a minimum, a section on what value the service can provide to the users.	Example:    Advanced Care Insights Service uses healthcare annotators that accelerate natural language processing capabilities to unlock valuable information buried in unstructured data, such as physician notes, discharge summaries, and pathology reports. Healthcare annotators provide natural language processing for domain-specific insight. They identify, normalize, and code medical and social facts in unstructured content, including symptom, disease, procedures, allergies, medications, smoking status, lab results, ejection fraction, and various daily living assistance.2. Group description section - If the API groups need more descriptions than what can fit into their descriptions, they should be expanded upon here.3. Cross API description section - If there are specific interactions between APIs that need documentation, this section can talk about the interactions.4. Individual APIs (query parameters, requests, replies) should only be referenced here as part of the full description, more comprehensive API documentation should be in the APIs Implementation Notes, Response or Parameters.### APIs1. Each API must have a brief description without ending period unless multiple sentences.   Example: Concept Expansion : Explore semantic relations of concepts2. Provide Implementation notes with details for request and response objects.   Example:![Implementation Notes](https://pages.github.ibm.com/watson-health-playbook/resources/images/developer-guide/rest-api-best-practices/implentation-notes.png Implementation Notes)3. Provide a response model (for Status 200) if data is returned.   Example:![Response Class](https://pages.github.ibm.com/watson-health-playbook/resources/images/developer-guide/rest-api-best-practices/response-class.png Response Class)4. Provide Response Message annotations for each error code returned by the API.   Example:![Response Messages](https://pages.github.ibm.com/watson-health-playbook/resources/images/developer-guide/rest-api-best-practices/response-messages.png Response Messages)5. Set defaults for all input parameters so that all the Try it out buttons will work without having to enter anything.  This may not be possible for body content (Current swagger limitation).  In that case, provide an example template of the JSON body in the description field (if practical), so it could be copied from there.   Example:![Input Parameter Defaults](https://pages.github.ibm.com/watson-health-playbook/resources/images/developer-guide/rest-api-best-practices/input-parameters-defaults.png Input Parameter Defaults)### Footer1. Base URL (context_root/api) and API version (version buildtime) are present and accurate at the bottom of the page.    Example: [ base url: /services/ontology_exploration/api , api version: 1.0.0 2016-05-17T20:06:15Z ]## API guidelines Represents conflicts between CTO and WDC.### General1.  Major and minor service versions must be used to coordinate updates with callers.   1. Major version is implemented as part of the API path (e.g. .../V1/...).   2. Minor version is implemented as a required query parameter passed in on every API (e.g. ?version=2016-04-15).     The distinction between what is considered major and minor is somewhat subjective, but the following should be considered:    1. How long old paths need to be supported.  Major versions may be needed if service content changes, but legacy content still needs to be made available.    2. How intrusive the change is.  Minor versions may be used for spelling mistakes, return values, etc.    3. What stage in the life cycle is the service in?  What may be a major change to a Beta/GA level service may be considered minor to experimental based on consumer expectations.    Example:  An example of minor versioning is as follows.  If a service APIs response to a PUT request in build 2016-04-15 was    Response Code: 200    and this was corrected in build 2016-04-30 to    Response Code: 201    then a client still passing in ?version=2016-04-15 should still receive the 200 response.  Only when the client switches to pass a later date does the response change to 201.   CTO - Use media-type for major updates.  Page 52 in best practices guide.  Per Stephen Kenna.  No recommendation for minor updates.   WDC - Use mandatory query parameter for major and minor updates.1. Make sure to use the HTTP methods (POST/PUT/DELETE/PATCH) correctly.  Page 58 in best practices guide lists extensive information.![Good Method Usage Example](https://pages.github.ibm.com/watson-health-playbook/resources/images/developer-guide/rest-api-best-practices/good-method-usage-example.png Good Method Usage Example)2. If it makes sense to chain the service to others, it needs to use the container data model for these end points  Refer to the [Container model documentation](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W3b2cf51b5057_4dfc_bb33_c94b38742353/page/Service%20Container%20Model){:target=_blank}.3. Multi-tenancy - Whats going to happen if multiple users are using the services and they should not access each others configurations, artifacts?   a. Suggestion:: Make it multi-tenant, stateless first - or understand how to run in a multi-tenant   b. Multi-instance environment.  At some point the environment should allow for dynamic provisioning.4. Configurations and artifacts - If shared configurations and artifacts are needed, the service should consider using the artifact service.### Paths1. The context root must contain the prefix services/, followed by the service name.2. The context root (and the IP port) can be changed when the service is deployed so dont assume they will be the same that were configured during development.3.  Everything in the path should use snake_case (lower case, underscores between words). including the default context root, resource paths, query parms      CTO - Use underscores for search engine optimization (SEO).  Per Stephen Kenna.        Example: oncology_concept      WDC - Uses hyphens in the context root, underscores (snake_case) in the rest of the url        Example: oncology-concept4. Abbreviations should be avoided if possible (see WDC guidelines).  Some well known abbreviations may be ok.  The following have been cleared as ok.     config  (used by WDC in some cases already).5. Resources should be nouns except for resources that represent algorithms (e.g. calculate, translate or convert).      Correct - /v1/libraries      Incorrect - /v1/get (returning libraries)      Incorrect - /v1/get_libraries6. The path should be lower case.      Correct - /v1/libraries      Incorrect - /v1/Libraries7. Proper singular/plural noun usage must be followed.  Verbs should be avoided.  A good reference is [http://blog.philipphauer.de/restful-api-design-best-practices/](http://blog.philipphauer.de/restful-api-design-best-practices/){:target=_blank}      Correct - /v1/concepts (Returning a list of concepts)      Incorrect - /v1/concept (Returning a list of concepts)8. Parameters should avoid starting with the following.  This was taken from [https://www.w3.org/TR/html5/syntax.html#named-character-references](https://www.w3.org/TR/html5/syntax.html#named-character-references){:target=_blank}    AElig, AMP, Aacute, Acirc, Agrave, Aring, Atilde, Auml, COPY, Ccedil, ETH, Eacute, Ecirc, Egrave, Euml, GT, Iacute, Icirc, Igrave, Iuml, LT, Ntilde, Oacute, Ocirc, Ograve, Oslash, Otilde, Ouml, QUOT, REG, THORN, Uacute, Ucirc, Ugrave, Uuml, Yacute, aacute, acirc, acute, aelig, agrave, amp, aring, atilde, auml, brvbar, ccedil, cedil, cent, copy, curren, deg, divide, eacute, ecirc, egrave, eth, euml, frac12, frac14, frac34, gt, iacute, icirc, iexcl, igrave, iquest, iuml, laquo, lt, macr, micro, middot, nbsp, not, ntilde, oacute, ocirc, ograve, ordf, ordm, oslash, otilde, ouml, para, plusmn, pound, quot, raquo, reg, sect, shy, sup1, sup2, sup3, szlig, thorn, times, uacute, ucirc, ugrave, uml, uuml, yacute, yen, yuml    These are HTML named characters that when preceeded by an &, can be converted to their unicode characters within URLs.  In particular this is done by swagger when displaying the curl command associated with an API.      Example: &sect can be converted to §        So        https: //watsonpow01.rch.stglabs.ibm.com/services/medical_insights/api/v1/corpora/medline/documents/1464840893990/annotations?version=2016-11-22&section=abstract&include_text=false        becomes        curl -X GET --header Accept: application/json https: //watsonpow01.rch.stglabs.ibm.com/services/medical_insights/api/v1/corpora/medline/documents/1464840893990/annotations?version=2016-11-22§ion=abstract&include_text=false### Request/Reply payloads1. Unless API specifically works with another content type (e.g.: accepts an industry standard  format input), json must be the default.  For example of exception an API that takes an image as a post request as input.2. Request/response structures must use camelCase for keys​.  Per Stephen Kenna, Health domain is standardizing around this as default.    ​Example:	    {			unstructured: [	    {	          data: {	            concepts: [	              {	                type: com.ibm.watson.hutt.umls.QuantitativeConcept,	                begin: 0,	                end: 4,	                coveredText: Test,	                componentId: ConceptDetection/UMLS,3. Camel cases must be strict.  Per Stephen Kenna.    Example:    IBM Bluemix should be represented as ibmBluemix (not iBMBluemix).4. Request/response structures should use English readable values when dealing with defined sets (enums, etc).  Per Stephen Kenna.    Example:	    {		    unstructured: [		    {			    data: {				    cancerType: Breast Cancer,5. Error codes should follow standard HTTP return codes.  A good reference is [http://www.restapitutorial.com/httpstatuscodes.html](http://www.restapitutorial.com/httpstatuscodes.html){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/rest-api-best-practices/",
    },
    {
      "title": "Scala Coding Style Guidebreadcrumb: Scala Style Guidesidebar: dev",
      "text": "---title: Scala Coding Style Guidebreadcrumb: Scala Style Guidesidebar: dev---## IntroductionThis is a living document, you may want to follow this page as we revise and improve this page.This wiki page documents the Scala coding style and formatting used on Scala projects. Coding conventions are important for many reasons. The [Oracle Code Conventions For Java](http://www.oracle.com/technetwork/java/codeconventions-139411.html#16712){:target=_blank} lists some of the reasons:- 80% of the lifetime cost of a piece of software goes to maintenance.- Hardly any software is maintained for its whole life by the original author.- Code conventions improve the readability of the software, allowing engineers to understand new code more quickly and thoroughly.- If you ship your source code as a product, you need to make sure it is as well packaged and clean as any other product you create.## Ground Rules1. By far, the most important standard is to write readable code. The rules documented on this page are NOT hard-and-fast rules. If breaking a convention results in more readable code which better expresses its intent, then by all means, break the convention.2. Some of the conventions in this document must be strictly followed (sometimes for legal reasons). Such rules contain the word MUST in their description.3. Dont break a convention without a good reason for doing so (and as strongly hinted above, breaking a convention for code readability is a good reason). A convention is only good if it is used in the majority of the code written.4. Automate style conformation, starting as early in a projects development as feasible. Integrate into your projects build system and developmer environments a tool such as [ScalaStyle](http://www.scalastyle.org/){:target=_blank} or [scalafmt](https://olafurpg.github.io/scalafmt/){:target=_blank}.> PROTIP: Writing readable, expressive code is more important thanconforming to a standard or convention.## Origins and relationship to other style guides- Many of the conventions and standards that we use for Java also apply to Scala. As such, we follow most of the guidance found in the [Java Coding Style Guide](java-coding-style-guide) unless specified on this page. In other words, this page overrides the Java Coding Style Guide for Scala projects, but it does not replace it.  - Unless otherwise stated in this document, we follow the [Community Scala Style Guide](http://docs.scala-lang.org/style/){:target=_blank}.## Conventions and standards### NamingIn addition to [the naming conventions listed in the community Scala Style Guide](http://docs.scala-lang.org/style/naming-conventions.html){:target=_blank} and in the [Java Coding Style Guide](java-coding-style-guide) we follow these additional naming conventions for Scala projects.> PROTIP: If you find you are struggling with naming a class or method, look to [the standard Scala API Docs](http://www.scala-lang.org/api/current/#package){:target=_blank} for inspiration### Constants- Per [the community Scala Style Guide](http://docs.scala-lang.org/style/naming-conventions.html#values_variable_and_methods){:target=_blank},constant names should be in upper camel case (e.g. final val MyConstant)    ```scala    object Constants {      // [-1] Oops, Java style leaking into Scala      final val DEFAULT_FORCE_LEVEL = 10      // [+1] The Scala Way      final val DefaultForceLevel = 10    }    ```### Type Declarations and Type Aliases- In many cases you can exclude type declarations and let the Scala compiler infer the types automatically.    ```scala    // [-1] the type is obvious to both the reader and the compiler    val i: Int = 10    val bob: Person = Person(bob)    // [+1] cleaner    val i = 10    val bob = Person(bob)    ```- Include the type declaration when the type of a val or var is not obvious when reading the code. This is often true when assigning the result of a function to a val and the function returns a complex type.    ```scala    // [-1] what does tryToCreateComplexObject return?    val z = tryToCreateComplexObject(a, b) { _.toString }    // [+1] oh, thats what it returns!    val z: Try[Map[String, List[Int]]] = tryToCreateComplexObject(a, b) { _.toString }    ```- When defining compile-time constants, you MUST omit the type declaration. Otherwise, the Scala compilier will NOT produce a compile-time constant.    ```scala    object Constants {       // [-1] Ooops! This wont be compiled into a compile-time constant.       final val Name: String = Darth Vadar       // [+1] This will be a compile-time constant       final val Age = 12    }    ```- Create a type alias when returning a complex type from a function.    ```scala    // [-1] Thats hard to read, and I dont know what it represents    def goo: (Water, Int) => (Slime) => Try[Map[String, Slime]]    // [+1] Now I know what that is    type TryToCreatesGoo = (Water, Int) => (Slime) => Try[Map[String, Slime]]    def goo: TryToCreateGoo    ```- Sometimes you can create a type alias to add more semantic meaning to a type. For example, instead of using String for an ID, define a type alias for the ID that references String.  This improves readability and also makes it easy to change the IDs type in the future (you will only have to update the type alias to update all of the function and variable signatures).    ```scala    // [-1] What is the unit of measure for size? What is contained in the returned String?    def createStarship(name: String, size: Int): String = ???    // [+1] Much more expressive and easier to update in the future    type MegaTons = Int    type StarshipId = String    def createStarship(name: String, size: MegaTons): StarshipId = ???    ```## Code Blocks- Only include curly braces if a code block contains more than one line of code, or if you are creating an anonymous function on a single line. This applies to if expressions, for comprehensions, and functions.    Use indentation to indicate that the one line of code belongs to the function/if/for expression.    ```scala    // [-1] Curly braces are unnecessary    def sum(x: Int, y: Int): Int = {      x + y    }    if (someBooleanIsTrue) {      println(Hi Bob)    }    // [+1] More concise    def sum(x: Int, y: Int): Int = x + y    if (someBooleanIsTrue)      println(Hi Bob)    ```## Higher Order Functions and Pattern Matching- For container-like types (algebraic data types, monads) prefer using available higher-order functions (HOFs) instead of pattern matching.  - Pattern-matching is a fairly low-level tool and using higher-order functions is generally more expressive.  - Higher-order functions tend to be more concise than pattern matching, and are therefore usually easier to write.- Common container-like types that have many higher-order functions which should be used instead of pattern matching:  - [Option](http://www.scala-lang.org/api/current/scala/Option.html){:target=_blank}    ```scala    // [-1] Using a pattern match instead of an available higher-order function    def toHoney(nectar: Option[Nectar}): Option[Honey] =      nectar match {        case Some(n) => Some(new Honey(n.freshness))        case None => None      }    // [+1] using the map higher-order function    def toHoney(nectar: Option[Nectar}): Option[Honey] =      nectar map { n => new Honey(n.freshness) }    ```  - [Try](http://www.scala-lang.org/api/current/scala/util/Try.html){:target=_blank}    ```scala    // [-1] Using a pattern match instead of an available higher-order function    def responseFor(createdBatch: Try[Batch]): Try[Response] = Try {      createdBatch match {        case Success(b) => Response.created().entity(b).build        case Failure(e) => Response.status(500).build      }    }    //[+1] using map and recover higher-order functions    def responseFor(createBatchAttempt: Try[Batch]): Try[Response] =      createdBatch map { b =>        Response.created().entity(b).build      } recover {        Response.status(500).build      }    ```- Sometimes, using a pattern match is more readable. Thus, while you should prefer higher-order function, you can still use pattern matching in cases where doing so improves expressiveness.## Logging- Use [SLF4J](http://www.slf4j.org/){:target=_blank} and [scala-logging](https://github.com/typesafehub/scala-logging){:target=_blank}, the Typesafe Scala wrapper for SLF4J.- Use Scala string interpolation instead of SLF4Js templating style. By using the Typesafe scala-logging library, there is no need to use the SLF4J template style and the Scala string interpolation reads much more naturally.    ```scala    logger.debug(sDownloading document from ${ur} using timeout ${timeout})    ```- If your team has a Logger trait, use it rather than directly creating a log instance    ```scala    import com.ibm.your-teams-product.Logger    class MyClass extends Logging {       logger.debug(MyClass created)    }    ```- If your team does NOT have a Logger trait, then use StrictLogging or LazyLogging from the scala-logging library    ```scala    import com.typesafe.scalalogging.StrictLogging    class myClass extends StrictLogging       logger.debug(MyClass created)    }    ```- Do not end log statements with a period. Periods tend to clutter log files and make them less readable. Additionally, most log statements are incomplete sentences.    ```scala    logger.debug(Something happened.)    // [-1] undesirable punctuation    logger.debug(Something else happend) // [+1] no ending punctuation    ```### Automated test conventions and standards## Unit tests vs functional testsThe difference between different types of tests is not always clear. This section attempts to clarify some of the differences.- Unit tests often fake things, and functional tests typically use real objects and endpoints- Unit tests are isolated while functional tests are not isolated- Unit tests should run fast- A single unit test should be focused- Functional tests validate acceptance criteria (at a minimum)- Functional tests usually test more than just the Acceptance Criteria- Functional tests grow and evolve beyond the Acceptance Criteria (for example, when defects are found)- Functional tests test the entire system, unit tests only test single units- Industry-wide functional tests are not typically run on every code submission due to time and infrastructure## Testing framework- We write Scala automated tests using [ScalaTest](http://scalatest.org/){:target=_blank}.## Testing styleScalaTest supports [different testing styles](http://scalatest.org/user_guide/selecting_a_style){:target=_blank}. Below are the styles that we use:- For unit tests, prefer [WordSpec](http://doc.scalatest.org/2.2.4/index.html#org.scalatest.WordSpec){:target=_blank}- For functional tests, prefer [FeatureSpec](http://doc.scalatest.org/2.2.4/index.html#org.scalatest.FeatureSpec){:target=_blank}- For tests that are not unit tests, but are also not functional tests,    prefer [WordSpec](http://doc.scalatest.org/2.2.4/index.html#org.scalatest.WordSpec){:target=_blank}## Matchers- Mixin the base [Matchers](http://doc.scalatest.org/2.2.4/index.html#org.scalatest.Matchers){:target=_blank} trait, which uses should verbs.- Do not use MustMatchers or ShouldMatchers (ShouldMatchers is deprecated).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/scala-coding-style-guide/",
    },
    {
      "title": "Secure Engineeringsidebar: dev",
      "text": "---title: Secure Engineeringsidebar: dev---Get the basics on Secure Engineering @ IBM by taking the [SECNG100](http://w3.ibm.com/learning/lms/Saba/Web/Main/goto/learningActivity?courseNum=SECNG100){:target=_blank} short online course. It is required for all new members of Watson Innovations regardless of role. It is recommended for other Watson Innovations members as well, especially those in a technical or support position. You may need some basic instructions to help with navigating the education site to launch the course.• [Watson Innovations - Secure Engineering & PSIRT Blog](https://w3-connections.ibm.com/blogs/watsonsepsirt/){:target=_blank}• [Secure Engineering Requirements](https://w3-connections.ibm.com/wikis/home?lang=en#!/wiki/W3c6a35d8589e_4f9d_8510_fba9f861c0db/page/Secure%20Engineering%20Requirements){:target=_blank}• [Secure Coding Guidelines](https://w3-connections.ibm.com/wikis/home?lang=en#!/wiki/W3c6a35d8589e_4f9d_8510_fba9f861c0db/page/Secure%20Coding%20Guidelines){:target=_blank}• [PSIRT](https://w3-connections.ibm.com/wikis/home?lang=en#!/wiki/W3c6a35d8589e_4f9d_8510_fba9f861c0db/page/PSIRT){:target=_blank} (Product Security Incident Response Team)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/secure-engineering/",
    },
    {
      "title": "Source Code Securitysidebar: dev",
      "text": "---title: Source Code Securitysidebar: dev---## IntroductionAn important aspect of security in Watson is ensuring we maintain the integrity of our source code by preventing malicious modification of that code that could expose our customers or IBMs data or destabilize an offering preventing it from being used by our customers as intended. Additionally it is important that we limit the distribution of especially valuable source code to only those who with a need-to-know.The mandatory requirements and recommended practices for managing source documented here are the entirety of the requirements and recommendations for Watson offerings (as documented in the scope section below). They are the official Watson interpretation and implementation of the requirements and recommendations from the IBM Source Code Asset Protection Team team as documented in the [Source Code Asset Protections community](https://w3-connections.ibm.com/communities/service/html/communitystart?communityUuid=554bd341-dda2-4e5e-abf5-a2bc634be130){:target=_blank}, the [SCM & Build Server Self-Assessment](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W759933699b91_4fda_b46f_069b0b69b67e/page/SCM%20and%20Build%20Server%20Self-Assessment){:target=_blank} and the [SmartProtect tool](https://smartprotect.raleigh.ibm.com/Web/){:target=_blank}. Where external information is referenced that is in conflict with the information here the information on this page takes precedence.## Scope### The requirements and recommendations here apply to the following:- IBM proprietary source code[1](#ibm-proprietary-source-code) that is used to create any of the following IBM offerings or associated materials that is maintained in a versioned SCM repository such as github.ibm.com, RTC, SVN, etc.    - Any version of a service that is or will be part of the Watson Developer Cloud or any supporting tooling associated with that service (private experimental, public experimental and beta services are in scope).    - Any version of a Watson Offering that is or will be hostsfed in the [IBM Cloud Marketplace](https://www.ibm.com/marketplace/cloud/us/en-us){:target=_blank}.    - Any offering that is or will be available through Passport Advantage.    - Any demo or other supporting application specifically associated with one or more of the offerings above that is hosted in an IBM-managed SCM repository.### The following are not in scope:- Artifacts that are not maintained in an SCM repository.- Artifacts that are maintained in non-IBM SCM repositories such as github.com.- Source code that is not IBM proprietary.- Source code for custom solutions for specific customers.    - Important! This code may be subject to source code security requirements, they are just not managed under the requirements and recommendations on this page.- Non-application marketing or sales artifacts that are not part of a production offering.## Mandatory Requirements### Source Code Repositories1. Manage in-scope source code only in github.ibm.com. The only exception to this is legacy code that is managed in one of the following that will not be migrated to github.ibm.com:    - [Watsons RTC server](https://nsjazz.raleigh.ibm.com:8050/ccm/auth/authrequired){:target=_blank}[2](developer-guide/source-code-security/#watson-rtc){:target=_blank}    - [Git/Gerrit in the Watson Pittsburgh Lab](https://openblue.bigdatalab.ibm.com){:target=_blank}[3](developer-guide/source-code-security/#watson-git-gerrit){:target=_blank}### SmartProtect1. Track all in-scope source code with records in the [SmartProtect system](https://smartprotect.raleigh.ibm.com/Web/){:target=_blank}.1. For new offerings create the SmartProtect record and submit it for approval after the MMT has approved the offering (end of [Step 3: Operationalize the offering](agile/new-offering-definition/){:target=_blank}).1. Maintain at least one SmartProtect record for each distinct offering. A single offering can be split into multiple records if there are distinct teams managing separate codebases that contribute to the offering.1. Use a separate SmartProtect record for shared components used by multiple offerings that are managed in a separate codebase from any one offering.1. Update the SmartProtect record and submit it for re-approval at least once annually.Note: Currently [Daniel Cox](http://w3.ibm.com/newbp/profile.html?uid=2D7394897){:target=_blank} creates and manages all SmartProtect records for Watson. Please work with him to ensure your offering is properly tracked and managed in SmartProtect.### Build Systems1. Implement [SmartBuild monitoring](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/Source%20Code%20Monitoring/page/Overview){:target=_blank} on all non-transient Watson-controlled build servers that access or store in-scope source code.    - Transient virtualized build systems that are created and destroyed with each build do not require monitoring.    - Implementing monitoring of the central Travis build server (currently at http://travis.innovate.ibm.com/){:target=_blank} is the responsibility of the Whitewater team.    - SmartBuild monitoring includes two elements - Guardium agents and OS level logging - implement both.    - Implementation isnt complete until the build system is registered in the SmartBuild system and the `OS logging` checkbox on the `Protection` tab is checked and the status is shown as protected:        - When registering in SmartBuild:        - Make the server admin the person that is directly responsible for the builds.        - Use the bluegroup [`Watson-SmartBuild`](https://bluepages.ibm.com/tools/groups/protect/groupsgui.wss?task=ViewGroup&gName=Watson-SmartBuild){:target=_blank}. Ask one of the listed administrators to be added to the group.    - For implementation assistance ask on the #tron channel.1. Follow all applicable standard IBM server requirements such as ITCS104 including, but not limited to:    - Classify the server per ITCS104 requirements as Group 1 or Group 3.    - Register the server in the [Mixed Address Database (MAD)](https://w3-03.sso.ibm.com/services/security/ipaddress/home.action.wss){:target=_blank}.    - Register the server in [ITSAS](https://itsas.raleigh.ibm.com/itsas/){:target=_blank}.### Other Systems1. Do not store in-scope source code in any form on any servers that are not registered in SmartBuild.    - Dont setup file shares with access to in-scope source code even if those file shares have restrictive access control lists.    - Dont zip up in-scope source code and put it in Maven or any other library management system.### Crown Jewel Source CodeAny in-scope source code that has been declared as a Crown Jewel[4](#crown-jewel){:target=_blank} asset with the IBM CISOs office has the following additional requirements:- Place the code in a private repository which contains only Crown Jewel code and whose access is limited to those with a need to know.- Track the inclusion of Crown Jewel code in offering by indicating the management of Jewel Code[4](#crown-jewel) in the appropriate [SmartProtect](https://smartprotect.raleigh.ibm.com/Web/){:target=_blank} record.- Follow the access management approval and revalidation requirements documented in the SmartProtect tool.### Laptops & Workstations1. In addition to following all applicable standard IBM workstation requirements (ITCS300, mac@ibm etc), including full disk encryption, if a laptop has source code stored on it:    - Do not leave it powered-on and unattended.    - (Windows and Linux) Do not leave it in sleep mode as [full disk encryption is susceptible to attack](https://en.wikipedia.org/wiki/Cold_boot_attack){:target=_blank} - instead use hibernate.    - (Mac) Enable [Find My Mac](https://support.apple.com/kb/PH22102){:target=_blank} and keep it enabled.    - Require a password to access the laptop after power on or when restoring from hibernation (Windows and Linux) or sleep (Mac).2. Store source code only on laptops that meet all [ITCS300 requirements](http://w3-03.ibm.com/transform/sas/as-web.nsf/contentdocsbytitle/security+and+use+standards+for+ibm+employees){:target=_blank}. BYOD devices [are allowed](http://w3-03.ibm.com/transform/sas/as-web.nsf/9b24bc9335a10029852569660048c7b7/90af16513aa226048525769000543385?OpenDocument){:target=_blank} to store source code as long as all ITCS300 requirements are met.Adapted from: [_Laptop Shutdown & Hibernate Guidelines_](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W591f471daa37_4d0e_b162_c3a4c07e0f9e/page/Laptop%20Shutdown%20%26%20Hibernate%20Guidelines){:target=_blank}## Recommended Best Practices### Justification needed if not implemented (no deviation approval required)_Build systems and legacy source control repositories_1. Do not enable root or admin login. Use sudo enabled on individual accounts or enable key-based SSH where the key is given root privileges but the user associated with the key is logged.1. Disable or remove all daemons/services that are not essential.1. When security patches cannot be applied to a server (very rare!) implement additional controls to mitigate the risk.1. Limit operating system access to those with a need to manage the server.1. Protect any shared credentials carefully, changing them when someone with access to the credentials no longer requires it.1. Use encrypted channels for all connectivity to the server and where certificates are used do not use self-signed certificates - use IBM certificate authority issued certificates instead.1. Avoid using shared credentials when a user requires temporary access, instead create an account for that user with a reasonable expiration set.1. Implement [BigFix](https://w3.ibm.com/help/#/mac/us_imt/en/article/29083){:target=_blank}.1. Install and run antivirus_ Build systems_1. Use standard, hardened images for build farms.1. Set unique passwords when standing up a server from a standard base image.### Recommended where feasible_Build systems and legacy source control repositories_1. Place servers behind a restrictive boundary firewall._Legacy source control repositories_1. Delete in-scope source from the server after a build completes.## History, Approvals and Deviations### History| Version | Date | Change | Material || --- | --- | --- | --- || 1 | 2016.12.16 | Initial version | Yes || 2 | 2017.01.01 | Added approval of version 1, minor typos | No || 3 | 2017.01.29 | Relaxed requirement for code on IBM-only laptops to allow BYOD (confirmed this is OK with Kevin Mayfield) | No |### ApprovalsThese requirements, recommended best practices and other information on this page have been approved by Watsons BISO (Brand Information Security Officer) as indicated below:| Approved On | Approved Version | Approved By || --- | --- | --- || 2016.12.19 | 1 | [Ravi Mani](https://github.ibm.com/watson-security-operations/documents/blob/master/secure-engineering/approvals/SOURCE-Source%20Code%20Security%20Policy.eml){:target=_blank} |Material changes require the approval of the Watson BISO or delegate.### DeviationsDeviations from any requirements listed on this page require approval of the Watson BISO (Brand Information Security Officer) or delegate. Deviations from recommended best practices do not require approval.| Deviation | Requested By | Approved On | Approved By || --- | --- | --- | --- || None  | ... | ... | ... |----1 IBM Proprietary source code is defined as:- A program, script, image, configuration file, markup language or other programming artifact created by a developer with a purpose of delivering a product, solution, offering, or technology for IBM business purposes.- Any IBM owned source code or related artifact commonly placed under configuration control that is used to produce and service IBM commercial products or other customer deliverables, except for open source code.- All source code that is subject to IBM Standard [C-S 0-6045-002](https://w3-03.ibm.com/standards/esisstds.nsf/0/E5FD60876972962585256999004E8A0C?OpenDocument){:target=_blank}.If the source code in question is IBM Confidential, it is more likely than not to be IBM proprietary source code.Adapted from: [_Source Code Asset Protection Guidelines_](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W591f471daa37_4d0e_b162_c3a4c07e0f9e/page/Source%20Code%20Asset%20Protection%20Guidelines){:target=_blank}2,3 Watsons RTC server and the Git/Gerrit server in Wastons Pittsburgh lab have implemented the required [SCMON](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W591f471daa37_4d0e_b162_c3a4c07e0f9e/page/Source%20Code%20Monitoring){:target=_blank} monitoring and other requirements for source code repositories.4 Historically IBM has used the term Jewel Code to designate extremely high value source code requiring special treatment. The CIOs office has more recently requested business units to declare Crown Jewel data assets with the recommendation that all offering source code be considered a Crown Jewel data asset. Watson has specifically chosen to not classify all source code as Crown Jewel. Instead it uses, but is not limited to, the following guidelines that were previously established for Jewel Code to inform any decision to classify Crown Jewel source code:- A targeted subset of source code if lost or stolen that will have a highly significant impact on IBM and customers.- Typically 1-2% of most critically sensitive source code representing 70% of IBM software value.- IBM would lose clear competitive advantage or superiority, or our customers‘ data would be at risk should a particular software component fall into the hands of a third party or competitor.Adapted from: [_Jewel Code Guidelines_](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W591f471daa37_4d0e_b162_c3a4c07e0f9e/page/Jewel%20Code%20Guidelines){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/source-code-security/",
    },
    {
      "title": "Armada Deployments for Watsonbreadcrumb: Armada Deploymentssidebar: dev",
      "text": "---title: Armada Deployments for Watsonbreadcrumb: Armada Deploymentssidebar: dev---## Armada Watson vs Armada retailArmada deployments for Watson follow the same deployment model as Armada retail. The Bluemix CLI with the Container Service plugin is available to administrators to manage clusters. It will be available to all users when we move to using IAM to authenticate with clusters rather than Service Account tokens.## Armada Watson Network TopologyConnectivity from Kubernetes workers back to the Kubernetes master servers (carriers), the Armada API servers, and the Containers Tribe Docker Registry:[![Connectivity from the Watson Kubernetes Workers to Armada Infrastructure](https://pages.github.ibm.com/watson-health-playbook/resources/images/developer-guide/armada-watson/watson-armada-connectivity.png)](https://pages.github.ibm.com/watson-health-playbook/resources/images/developer-guide/armada-watson/watson-armada-connectivity.png)### Watson High Availability on Armada## Initial rollout and Single Availability ZoneThe initial rollout of Armada will be in single Data Center/Availability Zone in each Hub location (Dallas, Washington DC, Frankfurt, London, Tokyo, Sydney).High Availability for Watson services in this deployment topology is defined as at least 3 instances (pods or collections of pods) per public multi-tenant service and at least 2 instances per premium single tenant service. [Kubernetes will automatically attempt to schedule your pods on distinct nodes](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/){:target=_blank}.## Armada Availability Zone Deployment Topology for Hubs and SpokesSoftLayer is enhancing the networking between data centers in the Hubs and relabelling three of the DCs in each Hub as Availability Zones in the style of AWS AZs (fault isolated domains with low latency, high bandwidth network connectivity).The Armada team has documented the recommended deployment topology for the new Availability Zone model that is coming from SoftLayer in the[Armada Architecture Hub-n-spoke Section](https://github.ibm.com/alchemy-containers/armada/blob/master/architecture/architecture.md#hub-n-spoke-architecture){:target=_blank}In spokes, the High Availability criteria listed above for Single Availability Zone will apply for Watson Services.In Hubs, High Availability for Watson Services is defined as at least 3 instances (pods or collections of pods) per public multi-tenant service and at least 2 instances per premium single tenant service. [Kubernetes has support for zones](https://kubernetes.io/docs/admin/multiple-zones/){:target=_blank}, and will attempt to distribute your deployments evenly across all the Availability zones in the cluster. This assumes that there are adequate resources to schedule your pods in each zone.## Armada High Availability in an MZRArmada will achieve High Availability with no single point of failure in a MZR. All the components of Kubernetes, including masters running in multiple availability zones. Details on this are available in the [Armada Architecture documentation](https://github.ibm.com/alchemy-containers/armada/blob/master/architecture/architecture.md#recoveryha){:target=_blank}.Watsons workload in Armada will be spread across availability zones. Kubernetes will schedule pods across availability zones by default for Deployments that do not use Persistent Volume Claims, as long as there are resources available in each zone.Armadas ALB (Application Load Balancer aka Front Door or Ingress) is configured to run in each availability zone.IBM Cloud provides a Global Load Balancer function (sourced from the Third Party Vendor Cloudflare) which will be used to send requests to each Availability zone that is up.NOTE: Once inside the cluster, Kubernetes does not do zone aware routing. Requests that enter the cluster through an ALB in a particular AZ will not necessarily be serviced by application pods in that AZ.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/armada-watson/armada-watson/",
    },
    {
      "title": "Armada for Watson - Collaborationbreadcrumb: Armada - Collaborationsidebar: dev",
      "text": "---title: Armada for Watson - Collaborationbreadcrumb: Armada - Collaborationsidebar: dev---### Watson Slack> Note: Access to cloud platform slack is no longer required. See the shared channels below....- [#wdc-kubernetes](https://ibm-watson.slack.com/messages/C1J20B2TB){:target=_blank} - Watsons channel where teams collaborate and share expertise around Kubernetes and Armada.- [#armada-watson](https://ibm-watson.slack.com/messages/C531XQDC0){:target=_blank} - A channel shared between the Watson team slack and the Containers Tribe slack where we can ask questions of the armada team and negotiate new features. Please keep the traffic to a minimum so that the Armada team can reliably know when we really need help.- [#conductors](https://ibm-watson.slack.com/messages/C54H08JSK){:target=_blank} - ERMs from Watson should have access to this channel so that they can interact with SREs from the Armada team.### Kubernetes Cluster support## Development and Staging supportThe development and staging environments are technically production environments for the Armada team. However, unless there is an issue there thats blocking a critical change for Watson going to production, then we should raise issues in slack and/or in GHE.Issues in GHE can be [created here.](https://github.ibm.com/alchemy-containers/armada/issues/new?title=&body=WATSON:%0A%0A%0A%0A%0A%0A%0A%0A%0A%0AAttention:%20@jschoudt%20@njlevier){:target=_blank}## Production SupportServices or applications running on the cluster will be supported by the service teams SRE staff. NOTE: Some teams dont yet have SRE resources assigned. The dev team is the SRE team for these services.The Cluster itself is supported by the Armada SRE (aka Conductors) team. The flow agreed to between the Watson and Armada SRE teams is depicted below. The intent is to be passing around tickets or monitoring events that are generated. We use PagerDuty for everything, so there should be no slack notification or emails flying around.Any issue in production should be handled via PagerDuty. Instructions are in the Watson SRE wiki here:[Instructions for Paging Out Armada SREs on call (aka Conductors)](https://github.ibm.com/watson-foundation-services/tracker/wiki/How-to-Page-Out-the-Armada-team-for-Kube-issues-in-production){:target=_blank}![Containers Flow](https://pages.github.ibm.com/watson-health-playbook/resources/images/developer-guide/armada-watson/SREContainersFlow.png)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/armada-watson/collaboration/",
    },
    {
      "title": "Armada for Watson - Cluster info per environmentbreadcrumb: Armada - Cluster Infosidebar: dev",
      "text": "---title: Armada for Watson - Cluster info per environmentbreadcrumb: Armada - Cluster Infosidebar: dev---Public ProductionDallasprdwat-dal10-cruiser2 . Shared . 2ceff3fc1e214d66a1400ca632c61e59 . env: pprdprdwat-dal13-cruiser4 . Blue Umbrella . 305179407eaa462699a75bb7235c3e7c . env: blueprdprdwat-dal10-cruiser5 . DlaaS . 01184860e7f949858455c16dba568a71 . env: dlaaspprd5prdwat-dal13-cruiser6 . NEW PROD . 92b302be76394883a0557ae4173eb35e . env: pprd6Washington DCprdwat-wdc06-cruiser1 . shared . a82466650df344038ba06521a79f6c76 . env: wdcprdLondonprdwat-lon02-cruiser1 . shared . 34f451e38335407b881013a050d75c1f . env: lonprdFrankfurtprdwat-fra02-cruiser1 . un-managedprdwat-fra02-cruiser2 . Shared . 3366a2cc9aa849db9e0d718d80be9f04 . env: fraprdSydneyprodwat-syd04-cruiser3 . Shared . 74fc13672bc843bf8d8af4595a2fcb8d . env: sydprdTokyoNot DeployedStagingstgwat-dal10-cruiser3 . Shared . 6fe80fbf5c704f7a9f5d0614943120e7 . env: pstgstgwat-dal10-cruiser4 . DLaaS . ed70ee8a536f4549a76fcfa0dc59411b . env: dlaaspstgDevelopmentdevwat-dal12-cruiser7 . Shared . 9047bcd1ea574319aa86450b532b62e2 . env: devdevwat-dal12-cruiser9 . Blue Umbrella . 0c19833cdc804796b07d3f75e2dad94bdevwat-dal10-cruiser10 . DLaaS . c1cc5c42fe4147d68a58c9592d8e8c63 . env: dlaasdevdevwat-dal10-cruiser13 . DLaaS . 1d4a8c5dac3c4c5885f28d5e9d705f9c . env: dlaasdev13devwat-dal12-cruiser14 . watson security testing . 9aed2f46eec34dd18cc2c3bc62ed7845 .devwat-dal13-cruiser15 . DLaaS . 29e73170e5b942c3a0f47e12df64e291 . env: dlaasdev15devwat-dal13-cruiser16 . Blue Umb. New . e4db3e5ea59e4e51ac6645eae5d4679c . env: bluedevDedicated Now ClustersCiscodedcis-dal10-cruiser2 . 89b68f0898cd4b10ac32600d4b362235 . env: ciscoThomson Ruetersdedtr-dal13-cruiser1 . 9eef532baf154dd98e63f9c9ffa6c979 . env: trCredit Mutualdedcm-par01-cruiser1 . 63bde92b95a6443c90cd64e945818c57 . env: cmpardedcm-fra02-cruiser1 . 5a2b1bfe5f224403b1bc63f7f44fd7a2 . env: cmfraSoftbankdedsb-tok02-cruiser1 . 05cea71f30ad4a3f950a2a6e005e44dbSK Holdingsdedsk-seo01-cruiser1 . ea2e6b2312404d80aaf00eaf0d685d3aDedicated Next ClustersAT & Tprod288-dal10-cruiser2 . b65e02f9a90948cb8d67d1636b619950 . env: prod288IBM KoreaNot Deployed",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/armada-watson/environments/",
    },
    {
      "title": "Armada for Watson - Guidancebreadcrumb: Armada - Guidancesidebar: dev",
      "text": "---title: Armada for Watson - Guidancebreadcrumb: Armada - Guidancesidebar: dev---## Getting access to Kubernetes ClustersAccess to Watson Kubernetes clusters is requested via USAM. Once you have received access through USAM, you will use the Bluemix CLI withe the IBM Container Service plugin to login and obtain a Kubernetes Configuration file. Under the covers, USAM roles are synchronized with IAM access groups. So you can login with your W3ID credentials and you can use IAM capabilities like API Keys.The USAM System is `Armada-IdMgmt`. When you initially request access, please use your W3ID as the user id for this system.The `Armada-IdMgmt` USAM System is setup with a role per namespace per cluster. Additionally, there are edit and view roles for each namespace to facilitate giving read access to collaborators without giving them control. e.g. The edit role for the conversation namespace in cruiser 7 in development in us-south is `WDC-dev-dal7-Armada-Conversation-Edit`.  See the environments table to indentify the correct cluster. (https://github.ibm.com/watson-foundation-services/kubernetes-cluster-admin/blob/master/maintenance/environments/environments-key.md){:target=_blank}Most service team members will most likey request an editor role.  Functional IDs running automation should select a viewer role. Additional documentation for Conan CD support for USAM/IAM is available (https://github.ibm.com/watson-continuous-delivery/Documentation/blob/master/technical/usam-iam-conan-integration.md){:target=_blank}.Once you have requested access to a namespace it will require your managers approval as well as a system owners approval. System owners have been identified for each namespace based on what team owns that namespace.After the USAM update has been approved, a periodic process will pickup the changes and synchronize the USAM role membership with the corresponding IAM Access Group membership. The IAM Access Groups for each namespace are setup when the namespace is created, so once the IAM Group has been updated, access will be available. The requester will receive a note from USAM when this process has run.## Namespaces and team setupRequests for new namespaces in our clusters or for changes in namespace quotas should be opened in the [Deploy Team GHE repo.](https://github.ibm.com/Watson/deploys/wiki/P:-Armada-Cluster-Namespace-Access-and-Security){:target=_blank}. If you cant access that GHE repo, you can request access in the [Deploy team Slack channel.](https://ibm-watson.slack.com/messages/C1HAQR94Y){:target=_blank}.## Bluemix CLI and IBM Container Service plugin and Kubernetes kubectl CLI setupUser will need to follow the instructions to access Watson Kubernetes clusters just as they would any IBM Container Service retail cluster. [Instructions are in the public IBM Cloud Container Service Documentation.](https://console.bluemix.net/docs/containers/cs_cli_install.html#cs_cli_install){:target=_blank}. There are instructions there for installing the Bluemix CLI and the Kubernetes kubectl CLI.The cluster name to use in the Bluemix CLI command `bx cs cluster-config ` can be found in the [environments](environments.md).## Docker ImagesIn time, there may be a set of standard base images produces for all of David Kennys org. In the meantime Watson Security has agreed that we can use the Ubuntu 16.04 docker images as a base image. These images are updated regularly with security patches. Additionally, since we should NOT run more than one process per container in kubernetes and we wont have remote access such as sshd running in the containers, the normal security hardening that is run for VMs or Bare Metals is not required.The platform team will not produce base images for use with Kubernetes, please use a Ubuntu-based image. See our examples for how we would recommend building docker images for Kubernetes.## ExamplesThe examples previously provided for the Netflix/CSF stack have been updated.- [Hello World](https://github.ibm.com/watson-foundation-services/csf-hello-world){:target=_blank}- [Hello World Sidecar](https://github.ibm.com/watson-foundation-services/csf-hello-world-sidecar){:target=_blank}- [Hello World KubeDNS](https://github.ibm.com/watson-foundation-services/csf-hello-world-kubedns){:target=_blank}## LoggingArmada uses [fluentd](http://www.fluentd.org/) to collect logs from containers and ship them to our IBM Logmet instance(s).The basic approach for capturing container logs is to capture stdout/stderr from the containers. This works by default, without additional configuration required by the container/pod owner. File based collection isnt supported at this time.Logs from clusters in development are flowing to https://logmet.stage2.opvis.bluemix.net/ into the ```Watson-Platform-CSF-Staging``` org and the ```dev``` space. If you dont have access to this org and space, ask in #wdc-logging in the Watson slack.See [Watson Developer Cloud Operational Visibility Documentation](https://pages.github.ibm.com/watson-foundation-services/operational-visibility/){:target=_blank} for more details.There are three fields in the logging output that should help you to filter for your container/pod/namespace logs in logmet:- ```kubernetes.container_name_str``` e.g. csf-hello-world- ```kubernetes.namespace_name_str``` e.g. user-jschoudt- ```kubernetes.pod_name_str``` e.g. csf-hello-world-1463229935-hfn3cSee [Watson Developer Cloud Operational Visibility Documentation](https://pages.github.ibm.com/watson-foundation-services/operational-visibility/){:target=_blank} for more details.More detail coming soon## MetricsNOTe: This is all about metrics for Watson artifacts in Kubernetes (namespaces, pods, containers, services, etc.). The metrics for node utilization, networking, filesystem usage on the nodes, etc is all collected and monitored by the Armada team. The Watson team doesnt have access to these metrics. The Armada team is working on the getting Watson access to this for debugging purposes.### Base Container Metrics for CPU and MemoryArmada uses the standard [Kubernetes components](https://kubernetes.io/docs/user-guide/monitoring/){:target=_blank} to collect resource metrics from containers. Armada then ships them to our IBM Logmet instance(s).Metrics from cluster in development are flowing to https://metrics.cperf.opvis.bluemix.net/ into the ```Watson-Platform-CSF-Staging``` org and the ```dev``` space. If you dont have access to this org and space, ask in #wdc-metrics in the Watson slack.  NOTE: This is the same org/space where our logs flow, so if you have access to logs, then you have access to metrics.See [Watson Developer Cloud Operational Visibility Documentation](https://pages.github.ibm.com/watson-foundation-services/operational-visibility/){:target=_blank} for more details.### Metrics CollectedThe metrics available are:- ```container-metric-cpu_num_cores```- ```container-metric-cpu_usage```- ```container-metric-cpu_usage_pct```- ```container-metric-memory_current```- ```container-metric-memory_limit```### Graphite NamingTo see metrics for your namespace/pod/container:1. Open the [metrics UI web page](https://metrics.cperf.opvis.bluemix.net/){:target=_blank}2. Ensure that you are in the ```Watson-Platform-CSF-Staging``` org and the ```dev``` space. (NOTE: This isnt the default usually.)3. Click the open folder icon and select the NEW button on the right side of the Search bar.4. Mouse over the green bar on the top left of the blank area.5. Select Add Panel | Graph from the menu6. Click on the title (no title by default) and select edit.7. Click on the Select Metric button at the bottom of the graph.8. Select the metrics prefix crn then v1 then dev then public then containers-kubernetes then us-south then a_IBM36626 then your cruiser (main cluster in dev is cruiser 1).9. Choose a metric to graph.10. Choose the container you want to graph that metric for. (wildcards are allowed in this string, so ```user-jschoudt_``` would show the specified metrics for all the containers in the ```user-jschoudt``` namespace).### Container identifier formatAfter you select the metric you want to graph, the last selection will be a single element with a name formed like:    namespace_pod_POD_containeridFor example:    crn.v1.dev.public.containers-kubernetes.us-south.a_IBM366226.cruiser1.container-metric-memory_current.ddqa_ddqa-deployment-jegerlow-43184335-1tc41_POD_34aabcfc340cdd74d439fd10c41afe71b6bf1e911d09c13537ec113f7fe2b526## Custom MetricsCustom metrics can be pushed via two options. Option 1 is the supported option today.### Option 1 - StatsDThis option is documented in the normal guidance for [CSF Operational Visibility](https://pages.github.ibm.com/watson-foundation-services/operational-visibility/metrics/logmet-migration/){:target=_blank}.StatsD is packaged using the sidecar pattern. This pattern, when leveraged via Kubernetes multi-pod support, allows for separation of concerns between containers and resource isolation to reduce the complexity in allocating and managing resources. This is a change from our previous model in Mesos/Marathon, where multiple processes were run in a container and managed via supervisord.NOTE: Please dont confuse the statsd sidecar with the CSF Netflix Sidecar. Both use the sidecar pattern, but they are distinct containers.See the read me and examples in the [statsd sidecar github repo](https://github.ibm.com/watson-foundation-services/kubernetes-statsd-sidecar){:target=_blank} for usage details.The [csf-hello-world](https://github.ibm.com/watson-foundation-services/csf-hello-world){:target=_blank} example is instrumented using StatsD and configured to push metrics to logmet.The [csf-hello-world-sidecar](https://github.ibm.com/watson-foundation-services/csf-hello-world-sidecar){:target=_blank} is also instrumented with StatD.### Option 2 - PrometheusPrometheus is the industry/community standard way to collect metrics and generate alerts for Kubernetes. The Armada team is using Prometheus to gather metrics and monitor the Kubernetes cluster. However, they are not collecting application-level metrics from pods, containers, etc. that Watson runs. They need to keep their use of Prometheus separate from ours to keep the separation of concerns between cluster management and application clear.We are working to get the use of Prometheus by Armada consumers established as an architecture pattern in the CTO-led architecture guild. This is the first step to building a pattern where there is an owner who will manage Prometheus for consumers such as Watson.In the meantime, if services teams want to run Prometheus they can do so. Support for prometheus is the responsibility of the service team. I am working on a sample/pattern for this in the [prometheus branch of csf-hello-world](https://github.ibm.com/watson-foundation-services/csf-hello-world/tree/prometheus){:target=_blank}. This pattern will include shipping metrics from Prometheus to IBM LogMet for longer term storage and wider availability.## Container Image Building and DeploymentThe Tron team manages tooling for [continuous integration](https://github.ibm.com/ghenkins-project/documentation/wiki){:target=_blank} and [continuous deployment](https://github.ibm.com/watson-continuous-delivery/Documentation/blob/master/README.md){:target=_blank}.For Tron support, please see their support [documentation](https://pages.github.ibm.com/tron/support/){:target=_blank}.### Continuous Integration (CI)Containers for services running in Armada should be built and continuously integrated using [Ghenkins](https://github.ibm.com/ghenkins-project/documentation/wiki){:target=_blank}.### Docker RegistryThe Tron team manages a central Pay as You Go IBM Cloud account, called Red Sonja. Within that account, Watson Service teams will create namespaces for each Docker registry, and then store their Docker images within those Docker registries and namespaces.There are separate instances of the IBM Cloud Docker Registry for IBM Cloud Stage (aka YS1) and IBM Cloud Production. Additionally, in production, there are distinct registries per region. (e.g. There is a registry for US-SOUTH, a different registry for EU-GB, and a different registry for EU-WEST, etc). These regional registries are NOT replicated. You must allocate namespaces and push images to them individually. IBM Cloud Registries exist in Hub locations in the IBM Cloud Hub/Spoke datacenter topology. There are no registries in spokes.This [document](https://console.bluemix.net/docs/containers/cs_regions.html#regions-and-locations){:target=_blank} provides more information about IBM Cloud Container Services.#### Docker registry limitationsBecause the Red Sonja account is a Pay as You Go account, there is not a limit on the size of Docker images.#### Docker registry by Watson environmentsIn all Watsons development, staging, public production and dedicated production environments, we use IBM Cloud Public Docker registries. Watson uses the IBM Cloud Docker registry that is closest to the particular Watson production environment. (Closest geographically and in terms of network latency and bandwidth.) As noted above, this follows the hub and spoke topology for IBM Cloud.NOTE: Our dedicated dev env is in Tokyo today. This may be an issue for connection to us-south or ap-syd registries. Yet another reason we need to move our dedicated dev environment out of Tokyo.#### Docker registry namespacesNamespaces in the IBM Cloud Docker Registry are allocated to customers on a first come first served basis. When Watson Service teams [on-board](#using-watson-ci-and-cd) to the Red Sonja account, they should land-grab the namespaces they want to use in all registries.#### Network connectivity for Docker registryThe IBM Cloud Docker Registries live on the public internet. Watson will need to configure outbound access to these registries. The proxy should preserve the SSL Certificate exchange between the Client in Watson (e.g. Kubernetes or Docker) and the IBM Cloud Docker Registry.#### Promoting imagesImages are created in Ghenkins and pushed to the public Docker registries. Since we use the same registries for dev, pstg, and production environments there is no longer a need for image promotion logic. However, this requires extra care from the development teams with respect to versioning. Pushing an image for use/testing in dev/staging will make it visible in production as well. Always avoid the use of latest when deploying. And take care not to over-write an image version that is in use in production.#### Image versioning and the use of latestThe use of the latest tag in Docker is encouraged for referencing base images. Referring to a base image in the Dockerfile for your image should use the latest tag to ensure you always have the latest security updates and bug fixes when you build/test. e.g. `FROM wdcloud/wdctomcat:latest`.The use of latest is discouraged for deployments. In fact, the use of versions at all is discouraged. We use an immutable identifier, the sha256, of the image. Since this hash is computed from the image content, even if someone pushes a new image from dev with the same version tag used in production it will not change production.#### IBM Cloud account and registry namespace ownershipAll container registries that Watson uses will be in the single IBM Cloud Red Sonja account. This will facilitate security having a single view of all our images via Vulnerability Advisor and other tools.For now, this means that all teams will be able to see/access other teams docker registry namespaces. There is functionality in the registry coming in late 2017 to allow for IAM to be used to control who has access to what namespaces in the registry.### Continuous Deployment (CD)Containers, built in Ghenkins, for services running in Armada should be deployed using [Hyboria](https://github.ibm.com/watson-continuous-delivery/Documentation/blob/master/README.md){:target=_blank}. Hyboria can be run in two ways: on a local workstation (Hyboria-CLI) for testing your deployment scripts or in an emergency on a remote server (Hyboria TaaS Jenkins) for automated deploymentsDeployments to Armada CANNOT be done in Ghenkins, and must be done using Hyboria.### Using Watson CI and CDFollow the Tron provided on-boarding [instructions](https://github.ibm.com/watson-continuous-delivery/Documentation/blob/master/on-boarding/README.md){:target=_blank} to enable your Watson service team to use the Watson CI/CD solution, including Ghenkins, the Red Sonja IBM Cloud account, and Hyboria.### Persistent StorageA persistent volume claim is a request for storage that can be initiated by the cluster user or cluster admin. After the user creates a persistent volume claim, a persistent volume with the requested storage size and storage class is created. This persistent volume is mounted and bound to the persistent volume claim. The user can mount the persistent volume claim on a container to persist data across pod restarts or share data between pods.## File Storage VolumeThe NFS file storage that backs the persistent volume is backed by SSD flash storage arrays at higher IOPS levels with disk level encryption for data-at-rest and clustered in order to provide high availability for your data. The file storage claim can be mounted to a container in a pod to ensure that data is available even if the pod crashes or shuts down.Creating a persistent volume claim to provision NFS file storage.NOTE: Cluster users dont currently have permissions to get or describe storage classes due to an [issue in Kubernetes](https://github.com/kubernetes/kubernetes/pull/40881){:target=_blank}. Step 1 and 2 are informational and the output provided should give you the information required to complete Step 3.1. Review the available storage classes. Armada Container Service provides three pre-defined storage classes so that the cluster admin does not have to create any storage classes.> `kubectl get storageclasses````$ kubectl get storageclassesNAME                         TYPEibmc-file-bronze (default)   ibm.io/ibmc-fileibmc-file-gold               ibm.io/ibmc-fileibmc-file-silver             ibm.io/ibmc-file```2. Review the IOPS of a storage class or the available sizes.> `kubectl describe storageclasses ibmc-file-silver`The parameters field provides the IOPS per GB associated with the storage class and the available sizes in gigabytes.```BRONZE:Parameters: iopsPerGB=2,sizeRange=20Gi,40Gi,80Gi,100Gi,250Gi,500Gi,1000Gi,2000Gi,4000Gi,8000Gi,12000Gi,type=EnduranceSILVER:Parameters: iopsPerGB=4,sizeRange=20Gi,40Gi,80Gi,100Gi,250Gi,500Gi,1000Gi,2000Gi,4000Gi,8000Gi,12000Gi,type=EnduranceGOLD:Parameters: iopsPerGB=10,sizeRange=20Gi,40Gi,80Gi,100Gi,250Gi,500Gi,1000Gi,2000Gi,4000Gi,type=Endurance```3. Open your preferred text editor and create a configuration script to define your persistent volume claim and save the configuration as a .yaml file.```apiVersion: v1kind: PersistentVolumeClaimmetadata:  name: mypvc  annotations:    volume.beta.kubernetes.io/storage-class: ibmc-file-silverspec:  accessModes:    - ReadWriteMany  resources:    requests:      storage: 100Gi``` Understanding the configuration script components> `metadata: name:` - Enter the name of the persistent volume claim.>> `metadata: annotations:` - Storage class defines the IOPS per GB of the host file share for the persistent volume that the persistent volume claim requests.>  ibmc-file-bronze: 2 IOPS per GB.>  ibmc-file-silver: 4 IOPS per GB.>  ibmc-file-gold: 10 IOPS per GB.>>Note: If no storage class is specified, the persistent volume is created with the bronze storage class.>> `spec: accessModes:` - Access modes define the way that the persistent volume claim can be mounted to a worker node.>  ReadWriteOnce (RWO): The persistent volume can be mounted to pods in a single worker node only. Pods that are mounted to this persistent volume can read from and write to the volume.>  ReadOnlyMany (ROX): The persistent volume can be mounted to pods that are hosted on multiple worker nodes. Pods that are mounted to this persistent volume can only read from the volume.>  ReadWriteMany (RWX): This persistent volume can be mounted to pods that are hosted on multiple worker nodes. Pods that are mounted to this persistent volume can read from and write to the volume.>>> `resources: requests/storage:` - Enter the amount of storage to create on an NFS file share in gigabytes. Available sizes are 20Gi, 40Gi, 80Gi, 100Gi, 250Gi, 500Gi, 1000Gi (1 TB), 2000Gi (2 TB), 4000Gi (4 TB). For the bronze and silver storage classes, 8000Gi (8 TB) and 12000Gi (12 TB) sizes are also available. If you choose a size other than one that is listed, the size is rounded up. If you select a size larger than the largest size, then the size is rounded down.4. Create the persistent volume claim.> `kubectl apply -f deploy/kube-config/mypvc.yaml`5. Verify that your persistent volume claim is created and bound to the persistent volume object. This process can take a few minutes.> `kubectl describe pvc mypvc` Your output should look similar to the following:```Name: mypvcNamespace: defaultStorageClass: Status: BoundVolume: pvc-0d787071-3a67-11e7-aafc-eef80dd2dea2Labels: Capacity: 100GiAccess Modes: RWXEvents:  FirstSeen	LastSeen	Count	From								SubObjectPath	Type		Reason			Message  ---------	--------	-----	----								-------------	--------	------			-------  3m		3m		1	{ibm.io/ibmc-file 31898035-3011-11e7-a6a4-7a08779efd33 }			Normal		Provisioning		External provisioner is provisioning volume for claim default/my-persistent-volume-claim  3m		1m		10	{persistentvolume-controller }							Normal		ExternalProvisioning	cannot find provisioner ibm.io/ibmc-file, expecting that a volume for the claim is provisioned either manually or via external software  1m		1m		1	{ibm.io/ibmc-file 31898035-3011-11e7-a6a4-7a08779efd33 }			Normal		ProvisioningSucceeded	Successfully provisioned volume pvc-0d787071-3a67-11e7-aafc-eef80dd2dea2  ``` 6. To mount the persistent volume claim to your pod, create a configuration script and save the configuration as a .yaml file.  ```  apiVersion: v1kind: Podmetadata: name: mypodspec: containers: - image: nginx   name: mycontainer   volumeMounts:   - mountPath: /volumemount     name: myvol volumes: - name: myvol   persistentVolumeClaim:     claimName: mypvc``` Understanding the configuration script components> `metadata: name:` - The name of the pod.>> `volumeMounts: mountPath:` - The absolute path of the directory to where the volume is mounted inside the container.>> `volumeMounts: name:` - The name of the volume that your are mounting to your container.>> `volumes: name:` - The name of the volume that you mount to your container. Typically this name is the same as volumeMounts/name.>> `volumes: name: persistentVolumeClaim:` - Enter the name of the persistent volume claim that you want as your volume. When you mount the volume to the pod, Kubernetes identifies the persistent volume that is bound to the persistent volume claim and enables the user to read from and write to the persistent volume.7. Verify that the volume is successfully mounted to your pod.> `kubectl describe pod mypod` The mount point is listed in the Volume Mounts field and the volume is listed in the Volumes field.```Volume Mounts:     /var/run/secrets/kubernetes.io/serviceaccount from default-token-tqp61 (ro)     /volumemount from myvol (rw)...Volumes: myvol:   Type:	PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)   ClaimName:	mypvc   ReadOnly:	false```Removing Resources and Persistent VolumesYou can manually remove resources from a cluster when you no longer needed them. In addition, most resources are automatically deleted when you remove the cluster that the resources are associated with. However, you must manually remove persistent volume claims before you remove a cluster. Removing a persistent volume claim permanently deletes any data that is stored, so confirm that your data is backed up and that you removed any pods that are mounted to the persistent volume claim. Due to the monthly billing cycle, a persistent volume claim cannot be deleted on the last day of a month. If you delete the persistent volume claim on the last day of the month, the deletion remains pending until the beginning of the next month.Remove an individual resource or several resources by running the delete command.Examples:> `kubectl delete pod mypod`>> `kubectl delete pvc mypvc`>> `kubectl delete pod,service,pvc my_pod my_service mypvc`## Object Storage Bucket> Coming Soon## Block Storage Volume> Coming Soon",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/armada-watson/guidance/",
    },
    {
      "title": "Change Managementsidebar: dev",
      "text": "---title: Change Managementsidebar: dev---Change Management, according to ITIL definition, is the process of requesting, analyzing, approving, developing, implementing and reviewing a planned or unplanned change within the IT Infrastructure. The process begins with the creation of a Change Request and ends with the satisfactory implementation of the change and the communication of the results of that change to all interested parties.The intended scope of the Change Management Process is to cover ALL of the IBM Cloud Platform (One Cloud) computing systems and platforms. Primary functional components covered in the Change Management process include Hardware, Software, Database, Application and System Configurations, to name a few. The notion being that ALL platform changes are recorded in the IBM Change Tool.RTC or ServiceNow are the only platforms to be used for Change Management. Change Requests created in either of these tools will be displayed on the Global Change Calendar that is accessed through ServiceNow. ServiceNow gets the RTC Change Calendar information by way of BlueMix Doctor and inherently from ServiceNow. The Change Calendars from both tools are then aggregated to the ServiceNow Global Change Calendar.## MethodsIn ServiceNow, there are two methods by which to create a Change Request - Manually through the ServiceNow Portal or automatically through the Tokenized Access API. For clients wanting to experiment with the API, users may request a token to one of three environments - Dev, Test and Production. Before any user can request a Production token, it is a requirements that they have already requested a Dev or Test token.To use the API, the service team must be enabled to use the Automated Changes. Initially, all services have this enabled on their service because it is the intent of Change Management to move to a Notification Model of conducting changes and away from the Change Review Board (CRB) Model.## RequirementsTo assure the proper visibility and transparency of changes being proposed to the IBM Cloud Platform, there is required information and deployment readiness criteria in place to assure the changes are executed efficiently and effectively. To meet the requirements, all Change Management records are to be compliant with this Change Management Policy.All Change Requests contain required information to be input into the system using either an exposed API to the change tool or through a manual entry form on the tool portal. Below are listed some required inputs to create a change request: Created by – Requestor (auto-fill) Assigned to – Implementer Priority – 1 Critical, 2 High, 3 Moderate, 4 Low, 5 Planning Change Type – Standard or Emergency Configuration Item – Service to be changed Environment – Location(s) Explanation of Impact During Change Implementation Purpose/Goal Description/Plan Planned Start Date/Time, Planned End Date/Time Production Readiness Y/N EU Managed Y/NAll Change Requests, prior to approval, must meet the following Production Readiness criteria: All test cases executed (Testing summary & results) Pretested and validated Rollout/Back out Plans with steps to be taken Peer Reviewer Teams/Names Post-deployment verification plans and results Up to date Operational Guides/Runbooks are created/updated (as needed) Application Monitoring tested, sending info to Kafka bus, and included in deployment Resilience/Destructive Testing Plan and resultsIf the request fails to meet the production readiness requirements, has the automation box unchecked, is considered an Emergency request, will cause disruption of service, or will be executed against an EU Managed environment, the request is considered an exception and will be required to go through the CRB._In the event a planned change will be disruptive, the request must be reviewed by the Change Review Board to assure proper oversight of planning, scheduling and communication to impacted users or customers._## Change Review Board (CRB)_Change Review Board Chair_The Change Review Board is currently staffed with the following [members](https://w3-connections.ibm.com/wikis/home?lang=en#!/wiki/Wfba9e56cc40c_4bb2_8805_e05bdeb2105f/page/Change%20Requests%20for%20Deployment%20Zones?section=Determining%20required%20Review%20Me){:target=_blank}. For EU Managed change requests, this staff will include a member of the EU for approvals. Attendance/representation is required._Meeting Times_For staging and production environments, the CR review boards take place 3 times a week, at 11:00 ET on Mondays, Wednesdays and Fridays.Note that the meeting might get rescheduled to later during the day (due to conflicts) and your window start should NOT be immediately following the CR review board meeting.## Change Management Optional ServiceNow usage for Change Management is currently optional.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/operational-support-systems/Change-Management-Details/",
    },
    {
      "title": "EU Cloud Exception Processsidebar: dev",
      "text": "---title: EU Cloud Exception Processsidebar: dev---# EU Cloud – Base Requirement EU Cloud requires that for operational / deployment purposes, access to EU client owned data and systems that host or process that data must be restricted to EU employees only. If non-EU employees need access to EU client owned data or systems hosting / processing this data a service must implement & utilize the ‘EU Exception process’.See Definition of customer owned data in the [EU Cloud Reference Material](https://ibm.box.com/s/kr2qmibq28tsw3e4gfj36t57uvf2kdlx){:target=_blank} This requirement for EU Cloud and the exception process, spans all potential access points to EU customer owned data – i.e. Incidents, Changes, Tooling, etc. The EU Cloud requirement is defined as the set of in-scope services hosted in Frankfurt, Germany (Public & Dedicated) The use of EU Cloud Exception process must be transparent and demonstrable to clients that it is utilised only on an exceptional basis and does not become BAU operating practice. The baseline requirement for the upper limit of it’s use (e.g. used in x% of total operational activity), is presently being agreed with EU Offering Mgt. Utilisation of the Exception process is a mandatory requirement for EU Cloud, unless a service does not identify a case for non-EU based support.# EU Exception Process Details## Security & Access Management For EU Cloud & it’s exception process, adopting security & access standards are required to facilitate the requirement for centralized EU based access approval. USAM is agreed as the single entry point for EU Exception process management. The Exception process is dependent on each service having enabled the security configuration to differentiate the access rights needed for EU Cloud (where it has access to customer data); providing differentiation/fencing between EU and non-EU groups. The USAM group owner for a service, has to be EU based for those groups that relate to access against EU Cloud in Frankfurt. Prerequisites required to be followed by service teams and additional guidance on setting up USAM groups can be viewed in the [EU Cloud guidance for Tribes](https://ibm.box.com/s/wcih5d9nufxwenpzifb2lzwas8xhuiwx){:target=_blank}## EU Exception Process Ownership is held by W&CP Operations, aligned to existing process ownership for Incident & Change. The process is enabled by centralised EU approvers (currently under establishment in Dublin), providing 24 x 7 coverage and utilising USAM to temporarily approve EU Cloud access for non-EU engineers when justified. The EU Exception process will facilitate the additional step for explicit client approval, that is a requirement for EU Cloud dedicated scope. Automation will be in place to orchestrate approvals depending on the EU Cloud scope - public versus dedicated.High-level steps involved in getting a non-EU user access to EU Cloud:EU Public: Identified non-EU user will raise a request in the USAM system against the service specific EU_EMERG group. Appropriate justification is provided in this USAM request(id: url: type: text: severity: ) Doctor tool picks this request automatically and routes the request to an EU exception approver EU exception approver reviews and acts on the request (approve/reject) Once privileged access is approved in USAM, Active Directory automation is triggered to record changes in LDAP, after which the non-EU user credentials will work to access the specific assets tied to the EU_EMERG USAM group.EU Dedicated: Identified non-EU user will raise a request in the USAM system against the service specific EU_EMERG group. Appropriate justification is provided in this USAM request(id: url: type: text: severity: ) Doctor tool picks this request automatically and routes the request to an EU exception approver EU exception approver reviews and acts on the request (approve/reject) If EU exception approver approves, Doctor then routes the request to client via the IBM Cloud console seeking their approval, depending on the EU access policy selected for their account Client approves or rejects the request. If approved, approval is recorded for audit purposes and Active Directory automation is triggered. If rejected, the rejection is recorded for audit purposes and the USAM request is rejected as well. Detailed demo of how the EU Exception process works has been recorded and available in the [EU Cloud repository](https://ibm.box.com/s/6uy0ce3ko3iqn9jvw78khp8e2qs0c1dt){:target=_blank} Additional reference material is also available - [EU Cloud incident management flow](https://ibm.box.com/s/m14dd0nf9ms2vqtmmkv3nz980y3ypaub{:target=_blank}) and [EU Cloud change management flow](https://ibm.box.com/s/i1ezgokilcr5hcvrpu2tm2l30sniuzvm){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/operational-support-systems/EU-Cloud-Exception-Process-Requirements/",
    },
    {
      "title": "Service Nowsidebar: dev",
      "text": "---title: Service Nowsidebar: dev---## ServiceNowServiceNow is IBMs new service management platform for Case, Incident, Problem, and Change Management.Go to the [ServiceNow Community](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W72236921778c_44ea_b5ac_6d8bad99ac4e){:target=_blank} for instructional videos, enrollment instructions and testing information.Other ServiceNow links: ServiceNow [Cheat Sheet](https://ibm.ent.box.com/s/ydul42dsy9tmvf1rwfqp216xbx2y0s3j){:target=_blank}: The purpose of this document is to provide training and access to critical resources for IBMers, thus empowering users to work tickets within ServiceNow. Enroll a Service for Support: [Service Now Enrollment](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W72236921778c_44ea_b5ac_6d8bad99ac4e/page/Enrolling%20A%20Service%20for%20Ticket%20Management){:target=_blank} [Enrollment Cheat Sheet](https://ibm.ent.box.com/notes/244045701906?s=rellzkqseom4i63tyzki5w2ci50aumcd){:target=_blank} Details on completing the ServiceNow enrollment form",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/operational-support-systems/ServiceNow/",
    },
    {
      "title": "Technical Operations Centersidebar: dev",
      "text": "---title: Technical Operations Centersidebar: dev---## What is TOC?The Technical Operations Center (TOC) is an org within the Cloud CTO office. The mission of the TOC is to provide: Best in class Incident Management Availability and problem management with a focus on reducing MTTR (Mean Time to Recover) Continuity of services along with a clear internal communications channel for all Cloud offeringsThe TOC has engineers and Availability Managers 247 to provide: Timely alert and incident resolution Data capture Communications with the goal of improving short and longer term availability.## What are the services available from TOC? 247 Alert monitoring     Periodic Alert analytics providing insight into inconsistencies and false positives Runbook Execution (if TOC is enabled) 247 Availability Management driving incidents (CIEs) to closure     Tiered internal Communications providing messaging clarity to execs and dependent offerings     RCA co-ordination Triage outage escalations to Cloud from internal teams## TOC Services - 247 Alert Monitoring### Value: TOC can address any of your alerts that tribes are being paged out for today. This saves valuable developer/devOps time. Trained staff monitoring alerts via the shared console with 247 coverage. Monitor for alert action. Act if action not taken. Engage Availability Managers during incidents and assist in incident resolution and cross coordination with other services during major outages. Periodic alert analytics are performed. At a service/offering family level, deeper insights on alerts to highlight inconsistencies, repeat alerts, false positives etc to enable service teams to reduce noise and get to true actionable alerts. Know offering dependencies in cloud (dependency tree buildup is WIP). This will enable notification to services if a dependency is down and save developer time.### What is needed from services? Integrate your service with [Technical Integration Point (TIP)](https://github.ibm.com/cloud-sre/world-of-tip/blob/master/README.md){:target=_blank} to send alert data from your service monitoring to ServiceNow and the TOC. Complete [onboarding to the TOC](TOC-Onboarding#how-do-i-onboard-my-service-to-the-toc) so my service is considered TOC enabled as required by the [Service Framework](https://pages.github.ibm.com/ibmcloud/Service-Framework/){:target=_blank}.## TOC Services - Runbook Execution### Value: Services identify alerts for which TOC engineers are enabled to be first responder 247. This saves valuable developer/DevOps time. If tribes/services would like TOC to take action on clearing alerts, runbooks are required to be provided to the TOC. Services can start with enabling the TOC with clearing basic alerts and can add alerts that require deeper system level access over time, thus increasing the alert addressing rate by TOC and freeing up more of your DevOps time. Can offload DevOps members from performing routine daily operations, where automation is not available/possible.### What is needed from services? Complete [runbook enablement](TOC-Onboarding#what-is-required-for-runbook-enablement) as required by the [Service Framework](https://pages.github.ibm.com/ibmcloud/Service-Framework/){:target=_blank}.## TOC Services - Availability Management### Who is an AVM?The Availability Manager is a skilled resource whose primary role is to be engaged during customer impacting incidents and drive the incidents to closure, ensuring the right skilled resources are engaged in mitigating/resolving the incident.### Value: TOC has a central pool of Availability Managers with a 247 global presence. During major widespread outages, the AVMs will perform cross platform co-ordination. Individual service teams need not staff availability managers, allowing offerings to put more resources into dev/devOps instead of incident management     Some tribes may continue to have AVMs/ERMs who have deeper tribe level expertise to drive root cause and improvements Tiered (Tier 1 and Tier 2) Incident communications to dependent offerings and execs providing message clarity on impact. AVMs will drive and co-ordinate RCAs. Work with DevOps and other appropriate teams to drive a full and thorough investigation in to an incident. Provide management visibility into aging RCAs### What is needed from services? Complete [AVM enablement](TOC-Onboarding#what-is-required-for-avm-enablement) as required by the [Service Framework](https://pages.github.ibm.com/ibmcloud/Service-Framework/){:target=_blank}.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/operational-support-systems/Technical-Operations-Center/",
    },
    {
      "title": "TOC Onboardingsidebar: dev",
      "text": "---title: TOC Onboardingsidebar: dev---## How do I onboard my service to the TOC?Any tribe that wants to utilize [TOC services](r#what-are-the-services-available-from-toc) must TOC enable their service. Services become TOC enabled when they complete onboarding to the TOC:1. Enroll your service in [ServiceNow](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W72236921778c_44ea_b5ac_6d8bad99ac4e/page/Enrolling%20A%20Service%20for%20Ticket%20Management){:target=_blank}. The [cheat sheet for enrolling services](https://ibm.ent.box.com/notes/244045701906?s=rellzkqseom4i63tyzki5w2ci50aumcd){:target=_blank} may be helpful.1. Integrate your service with [TIP](https://github.ibm.com/cloud-sre/world-of-tip/blob/master/README.md){:target=_blank} to send alert data from your service monitoring to ServiceNow and the TOC.     See [TIP integration considerations](#tip-integration-considerations-for-toc) to understand what data values determine whether your alert flows to the TOC for processing.1. Complete the [Service Contract](https://pages.github.ibm.com/CloudEngineering/service_contract/){:target=_blank} Production Readiness Criteria (PRC)      PRC includes and requires your service is TOC enabled      TOC enablement consists of [AVM enablement](#what-is-required-for-avm-enablement) and [Runbook enablement](#what-is-required-for-runbook-enablement)      TOC enablement is tracked for each service in the [scorecard](https://pages.github.ibm.com/cloud-sre/ToolsPlatform/scorecard-docs/scorecard_overview/){:target=_blank}      [Click here](https://github.ibm.com/global-toc/TOC-Cloud-Onboarding/issues/new){:target=_blank} to start the onboarding process. Include the name of your service as listed in [doctor scorecard](https://doctor.bluemix.net/\#/scorecard){:target=_blank} and a contact to help complete the required enablement activities      If you have questions or need help, visit us in the [#toc-global](https://ibm-cloudplatform.slack.com/messages/C4BJ6N6SV){:target=_blank} channel in the Watson Cloud Platform slack workspace.## What is required for AVM enablement?### Pre-requisites: Completed ServiceNow enrollment### Process: Service team completes a one-page enablement document, including a brief description of the service, key dependencies, slack channels, and key contacts AVM team reviews the service team’s ServiceNow enrollment and AVM enablement document AVM and service teams complete a “Mock CIE” (end-to-end test) AVM team assigns the service team an RCA coach AVM team provides Incident Management and Problem Management training### Completion: Accepted AVM enablement document TOC update of AVM enablement service status in doctor scorecardNote: If a service uses ServiceNow for Incident Management, TOC AVMs will be engaged for a CIE regardless of the AVM enablement status.## What is required for Runbook enablement?### Pre-requisites: Completed ServiceNow enrollment### Process: Service team completes a one-page enablement document, including     Brief description of alert handling, key dependencies, slack channels, and key contacts     List of runbooks to delegate to the TOC engineers.  This may be none, some, or all of a service’s runbooks. TOC team reviews service team’s ServiceNow enrollment and runbook enablement document For delegated runbooks, TOC and service teams establish plan that includes     Runbook review/revision.  TOC team provides comments and service team makes mutually agreed to changes.  See the [TOC Runbook Requirements](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/W856c27876ff7_4ca0_889b_a3e778df0231/page/TOC%20Runbooks){:target=_blank} for reference.     Service-specific enablement.  TOC team completes service-provided access requests and training.     Alert flow configuration.  Service team delegates agreed to alerts to TOC.### Completion: Accepted runbook enablement document Accepted plan for any delegated runbooks (optional) TOC update of runbook enablement service status in doctor scorecard## TIP Integration Considerations for TOCYour service may use a common service like Bluemixs Marmot or a webhook to New Relic to facilitate integration with TIP.  Or your service may code directly to TIP using the [TIP API documentation](https://github.ibm.com/cloud-sre/tip-api){:target=_blank}. Both ways work to complete integration with the TIP and to send alert data from your service monitoring solution to ServiceNow and the TOC.Services submit their alert message using a common message format called a concern.  Assuming your service is [TOC enabled](#how-do-i-onboard-my-service-to-the-toc), the values of the following fields determine whether or not your alert flows to the TOC for handling: _console_ - toc indicates the alert may be processed by the TOC based on the value of other TIP concern fields _runbook&#95;url_ - URL to a UI that will show the runbook for this alert _runbook&#95;toc&#95;enabled_ - true indicates the specified runbook will be handled by TOC as a first responderThe values of the following fields enable functionality of the TOC console: _alert&#95;ui&#95;url_ - a URL to a UI that will show this alert",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/developer-guide/operational-support-systems/TOC-Onboarding/",
    },
    {
      "title": "Dev-Opssidebar: dev-devopsbreadcrumb: Dev-Ops (Dev)",
      "text": "---title: Dev-Opssidebar: dev-devopsbreadcrumb: Dev-Ops (Dev)---# Watson Health Operations PlaybookThe [Watson Health Development Process](../../../index) integrates key operations process tasks in the larger development process, specifically under [Define and Prove](../../define-and-prove/index) and [Build and Deliver](../../build-and-deliver/index). For details on the full operations process, please refer to the [Watson Health Ops Playbook](https://pages.github.ibm.com/wh-ops/wh-ops-playbook/){:target=_blank}.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/devops/index/",
    },
    {
      "title": "Initial Compliance Touchpoint Questionnairesidebar: dev-moabreadcrumb: ICTQ",
      "text": "---title: Initial Compliance Touchpoint Questionnairesidebar: dev-moabreadcrumb: ICTQ---## What is the ICTQ?This Questionnaire is a tool to assist the Watson Health Compliance (Data Governance, Privacy and Security) in determining (if any) specific assessments must be completed for any application, product or offering (including SAS/Cloud offerings), On-Prem products, and applications/systems/tools that are intended to be used in support of internal business functions.This Questionnaire is a tool to facilitate early identification of compliance (security, privacy, and data governance) assessments and/or evaluations that will be required or other assessments that MAY be needed to be completed by the Offering Management Watson Health team. These assessments must be completed for any application, product or offering (including SaaS/Cloud offerings),“On-Prem” products, and applications/systems/tools that are intended to be used in support of internal business functions. It’s important to remember that this is an initial guideline early in OM process and as team moves through the OM phases may have to re-visit.### How can I get started?### Step by Step1. The Questionnaire can be found [here in Box](https://ibm.ent.box.com/folder/63701217563){:target=_blank}.2. The Project Manager or their designee, should complete the first three worksheets:    - General Information    - Architecture and Locations    - Data Types and Categories3. The Project Manager will submit this Questionnaire to the Compliance team for review4. schedule a review with Compliance to receive final assessment recommendations. The final approved artifact will be placed into Aha! to mark completion of this workflow step. and will be5. Start to complete all required assessments.6. Update status column with pertinent information.7. The completed Questionnaire should also be stored in Confluence.8. Re-visit at end of Build & Deliver Phase before Release Go-live",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/market-opportunity/ictq/",
    },
    {
      "title": "Market Opportunity and Approachsidebar: dev-moabreadcrumb: Market Opportunity (Dev)",
      "text": "---title: Market Opportunity and Approachsidebar: dev-moabreadcrumb: Market Opportunity (Dev)---Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Market Opportunity and Approach phase tasks relevant to Development_- _Hover OVER the task to see who OWNS the task_- _Tasks marked with a GxP Only label can be skipped for non-regulated offerings_- _Tasks marked with a CS Only label can be skipped for offerings that are NOT common services_<!--                                        -->                  svg {          background-image: url(https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/flows/vs-market-opportunity-dev.jpg);          background-size: 100% 100%;          background-repeat: no-repeat;          max-width: 900px;          width: 90%;        }        path {          fill: transparent;          cursor: pointer;          transition: fill 0.2s;        }        svg a:focus,        svg a:hover {          outline: none;        }        svg a:focus path,        svg a:hover path {          fill: rgba(255,255,0, 0.15);          cursor: pointer;       }                            OWNER: Offering Manager - Process and Tool Onboarding                                    OWNER: Offering Manager - Review Market Analysis and Prioritize                                    OWNER: Offering Manager - Review Market Analysis and Prioritize                                    OWNER: Offering Manager - Common Services                                    OWNER: Compliance Lead - Open New Documentation Project                                    OWNER: Offering Manager - Identify IBM Cloud Migration Pattern                                    OWNER: Project Manager - ICTQ                                    OWNER: Offering Manager - Start GxP Assessment                                    OWNER: Design Lead - Concept Car                                    OWNER: Offering Manager - Identify Sponsor Users                                    OWNER: Offering Manager - Market Opportunity Playback                                    OWNER: Offering Manager - Use OMD Light Template                    ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/market-opportunity/index/",
    },
    {
      "title": "Planning and Tracking Workbreadcrumb: Getting organizedsidebar: dev",
      "text": "---title: Planning and Tracking Workbreadcrumb: Getting organizedsidebar: dev---## Getting Organized (Tools)- [Aha!](../../../tools/aha/) is the home for everything related your business strategy, your user personas, and your product roadmap. Your Offering Manager lives in Aha! each and every day.- [Jira](../../../tools/jira/) allows your Squads to plan and track their work in the same place they deliver their code.- [Confluence](../../../tools/confluence/) is the collaboration space, where your Squad can create, organize and discuss work as well as store key documents for future reference.## Create your Organizational Structure in Aha!> Who: Offering ManagerAs Aha! is shared with other IBM organizations, the Watson Health Segment has been created.Within the Watson Health Segment the various Watson Health Markets and Offering Lines (MMTs and OTs) have been setup. Product = Offering is a product, service or combination of a both that is is then sold to an end customer. Product Line = Offering Line is a grouping of either offerings or other offering lines. More on Aha! Terminology vs Watson Health Aha! Terminology can be found [here](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/W7aedad6003f2_46dd_914b_1a3b5195108e/page/1%20-%20Aha!%20vs%20Watson%20Health%20Aha!%20Terminology).[Watson Health Aha! Core Team Market Segment Leads](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/W7aedad6003f2_46dd_914b_1a3b5195108e/page/4%20-%20Watson%20Health%20Aha!%20Core%20Team%20Market%20Segment%20Leads): The purpose of the core team is to have a representative from each market segment that can work with other Core Team members to assist in the roll out of Aha!.The Offering Manager, _usually_ a Product Owner, can submit a request create a new offering entry.> How To:> - Go to the [Watson Health Tools - Jira page](https://pages.github.ibm.com/WatsonHealthArchitecture/PlaybookDemo/tools/jira/index/) and follow the steps outlined under Getting Access.## Whats Next? Ongoing Delivery...Now that youve set up Aha! and Jira, youre ready to start [Planning and Tracking work for Ongoing Delivery](../../planning-and-tracking-work/ongoing-delivery).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/planning-and-tracking-work/getting-organized/",
    },
    {
      "title": "Planning and Tracking Work for Ongoing Deliverybreadcrumb: Ongoing Deliverysidebar: dev",
      "text": "---title: Planning and Tracking Work for Ongoing Deliverybreadcrumb: Ongoing Deliverysidebar: dev---> Our highest priority is to satisfy our users through the early and continuous delivery of valuable software.## Fundamentals (Concepts)In order to stay focused on the user, and be as efficient as possible, [Squads](../../agile/ibm-squad-thinking/index.html#squads) and their [Agile Leadership Team](../../../dev/agile/ibm-squad-thinking/index.html#agile-leadership-team) organize work using Hills, Epics and Stories.![Hills > Epics > Stories](https://pages.github.ibm.com/watson-health-playbook/resources/images/agileplaybook/hills-epics-stories2.png)> [Hill:](#hills) The big goal. Contains a who, what, and wow factor. Created in [Aha!](../tools/aha/)> [Epic:](#epics) A collection of customer value centered on a common theme. Epics may contain additional smaller Epics, if needed. Created in [Aha!](/tools/aha/) and syncd with [Jira].> [Story:](#stories) A chunk of customer, or team, value that can be completed in a single sprint. Created in [Jira] as children of Epics.## Define your Hills> Who: Offering Manager (with collaboration from Design lead, Technical leads, and other stakeholders as needed)Hills turn users needs into project goals, helping the team align around a common understanding. Hills arent detailed requirements - theyre statements of intended outcome. Address who the outcome will serve, what they will be enabled to do, and the differentiator that will make this outcome worth the users time.  Hills are integral to IBM Design Thinking.  Without Hills as our starting point, we wont be focused on the user, and will fall back into old habits of developing features instead of experiences.Define as many hills as needed, however a squad should only focus on delivering on one hill at a time.  Dividing the squads attention across multiple Hills at once will reduce efficiency and focus.  In Agile, serial work is almost always faster than parallel work.|                 |               | Insert story content        |  Example   || -------------   | ------------- | --------------------------- | ---------- || Who             | As a...       | [User Archetype]            | As Mary the business owner || What            | I want to...  | [Need]                      | I want to use technology to answer common customer questions || Wow             | so that...    | [Measurable business value] | so that we can reduce calls into customer service by 15% in one year |> As Mary the business owner, I want to use a self-service solution to answer common customer questions, so that we can reduce calls into customer service by 15% in one year.Notice that in the example above, Mary is not the end-user of our offering.  Its important to remember that Hills can apply to any of the users for our offerings -- the end-user, the developer, the business user, IBM partners, and even IBMers that might have a role in implementing an offering for a client.Lets not forget about Technical Foundation. Technical Foundation is not a Hill, but rather an investment made towards development work in support of cross-cutting quality, serviceability, and consumability requirements.For more information on Hills, refer to the [IBM Design Thinking guide](https://www.ibm.com/design/thinking/keys/hills/){:target=_blank}.## Add your Hills to Aha!> Who: Offering Manager- Navigate to your Product in Aha!- Click on Strategy -> Hills- Click the (+) button next to _Your Product Hills_![Create Hill](https://pages.github.ibm.com/watson-health-playbook/resources/images/aha/aha-create-hill.gif)>ProTip: Assign Hills to the milestone that lines up with the desired date for the Hill. Remember, a Roadmap is a wish list of things we want to do. The further out your Roadmap goes, the less accurate it becomes.## Product Grooming SessionsOnce youre going, new Ideas, Epics and requests will start coming in. To address these, your Product Leadership Team needs to run regular [Product Grooming Sessions](https://pages.github.ibm.com/the-playbook/agile/play-by-play/product-grooming/){:target=_blank}.## Decompose the Hills into Epics> Who: Collaboratively by the technical leads, OM and Design are reviewersMmm, decompose...sounds pretty gross!  Really its just Agiles term for breaking big things down into smaller things because big things are hard to work on.  Theyre ambiguous and risky.  We dont like risk. The smaller you make a piece of work, the easier it is to complete on time and accurately.Our goal is to decompose work all the way down to stories.  Most of the time, however, its too big of a mental leap to go from the big goal of Hill all the way down to the dozens (or hundreds) of stories it will take to complete a Hill.  To make the process easier, we simply decompose the Hill into slightly smaller units called epics.  If the hill is the big goal, then the epics are the capabilities, behaviors, or user experiences that allow us to reach the goal.  There is no time limit on an epic, but its a good idea to keep them relativity compact, a few sprints, or so.  If it looks like itll take a year to complete an epic, keep decomposing!  You probably have multiple epics masquerading as one.>Epics follow a similar pattern to Hills, but replace wow with why to give us a who/what/why pattern.  Epics use the standard story format of As a [user archetype], I want [desired experience] so that [why the user cares about the experience/capability].Unlike Hills, Epics arent done with just a who/what/why.  A good Epic needs requirements to establish its boundaries (i.e. how we know weve completed the epic).  But we dont want to write our requirements the old fashioned way, the system shall...  Instead, we want to describe our requirements in a user-centric manner.  This approach has many labels: use cases, user scenarios, behavior driven development, etc.  Each technique is slightly different based on its origin, but they all aim to accomplish the same thing. Use the format of your choice, just be sure to write your requirements from the perspective of the user, not the system.Intended Use- Reflective of a scenario- Provides value (what) to the user (who)- Aids in organization & grouping of detailed requirements## Add Epics to your Hills in Aha!> Who: Offering Manager- Navigate to your Hill in Aha!- Click on Details- Click the (+) button next to _Epics_![Aha - Create Epic Under Hill](https://pages.github.ibm.com/watson-health-playbook/resources/images/aha/aha-create-epic-under-hill.gif)>ProTips:> - Always create Epics as children of a Hill, this will make it easier to find.> - Assign Epics to the milestone that lines up with the desired date for the Epic. Remember, a Roadmap is a wish list of things we want to do. The further out your Roadmap goes, the less accurate it becomes.> - The Create Epic dialog has a handy Create Epic & Add Another button that makes it fast to create a number of Epics that all roll up to the same Hill.## Add your Acceptance Criteria as Requirements in Aha!> Who: Offering Manager[Acceptance Criteria](https://www.google.com/search?q=acceptance+criteria){:target=_blank} is how you know whether or not your work is complete. Well written Acceptance Criteria align Offering Management, Design, and Development and ensure that we build the right things. Always ensure you provide your Squads with detailed information about what the user needs the software to do. Its often helpful to use an established pattern, like the [BDD pattern](https://www.ibm.com/cloud/garage/content/code/practice_behavior_driven_development/){:target=_blank} to help get your needs understood.- Open your Epic- Scroll down and click the (+) button next to Requirements- Enter each Acceptance Criteria item as a separate Requirement## Stories> Who: Technical Leads and Squad leads with collaboration with team members, as neededRequirements Stories are detailed requirements that focus on the solution One or more scenarios (epics) is needed to achieve the Hill. Stories resided in [Jira].Intended Use- Lists what the system will do to provide value (what) to the user (who)- Includes Acceptance Criteria that is used to verify the planned solution was provided![image](https://pages.github.ibm.com/watson-health-playbook/resources/images/how-we-work/PBSlide05.png)## From Aha! to Jira<>![image](https://pages.github.ibm.com/watson-health-playbook/resources/images/agileplaybook/aha-jira-github-reqflow.jpg)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/planning-and-tracking-work/ongoing-delivery/",
    },
    {
      "title": "Release Planningbreadcrumb: Release planningsidebar: dev",
      "text": "---title: Release Planningbreadcrumb: Release planningsidebar: dev---Our Release Plans focus on near term dates to help the whole team drive towards taking the Hills in the Roadmap. Release Plans should be a few months or shorter, never longer than a Quarter...> ProTip: Remember, were taking Hills, not Mountains.## Before you begin> Our highest priority is to satisfy our users through the early and continuous delivery of valuable software.Before you start planning, take a step back and reflect on your values and vision, as a team. Take the [IBM Agile Principles](https://agile-ibm.mybluemix.net/principles){:target=_blank} to heart.- Begin with clarity about the outcome, and let it guide every step along the way.- Listen, iterate, learn, and course correct rather than waiting until it’s perfect.- Build small teams with the right skills to encourage self-direction and innovation.## Whos involved?Release Planning is _primarily_ owned by the Release Manager and the Product Leadership Team, but _the whole team_ is involved in the process. Without our Squad Members keeping GitHub accurate, our Release Plans wouldnt provide any value.## Conducting your Release Planning meeting> Who: Release Manager, Squad Leaders, and the Product Leadership Team> When: Two Sessions held a Sprint or two before the start of the ReleaseBy holding your Release Planning Meeting several sprints ahead, it will naturally feed the roadmap, your backlog grooming cycles, and will keep your Squads unblocked. The Product Leadership Team leads by being a few Sprints ahead of their Squads, clearing the brush, and continuously looking forward so the path ahead remains clear. Reserve a few hours for your Release Plannning Meeting, no more than three. Gather your leadership team together, in person if possible, via [Webex] if not. Come prepared - Squad Leaders should know the latest and greatest on their Squads; velocity, current blockers, health of backlog, etc. Release Managers and Offering Managers should know the health of the Roadmap, any strategic themes that are changing or new, customer feedback. Design should bring feedback from Sponsor Users, and ensure Personas are up to date. The Release Manager facilitates the session to prioritize and size the upcoming release. Pick the three (and only three) Hills that you will focus on for the release. Break your Hills down into Epics. See [Planning and Tracking work for Ongoing Delivery](ongoing-delivery)> ProTip: You will need two sessions. After your initial session, ensure theres a week or so to validate any assumptions with Squads or Execs, and come back to confirm. this could take a Sprint or two which is why its important to start a sprint or two ahead of the Release starting timeframe.## Ensuring your Release Plan is completeAs youre pulling together your development and feature related work to add to your release, make sure you dont forget to include stories for other elements that ensure the release is effective for your users. Examples are:1. Offering Deliverables Catalog - Besides the Offering Management artifacts and the code, there are a series of companion deliverables that as a Release Manager you will need to make sure are addressed as needed. The [IBM Offering Deliverables Catalog] (https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wb1d543660cb8_44bc_b34a_efb359fb4b18/page/13.%20IBM%20Offering%20Deliverables%20Catalog) provides a single, consolidated repository of all the deliverables that _may_ apply to your delivery.  - The Project Teams uses the Catalog to determine which work activities apply to their current project and make plans accordingly  - Catalog needs to be regularly reviewed all the way up to Launch Readiness  - Copy of the Catalog for the offering needs to be saved with the rest of the project documentation as it will need to be made available in case of an Audit.  - Best Practice: always check for the latest version of the catalog before creating local copy for your offering  - Accessibility (included in the Offering Deliverables Catalog) - Youll want to make sure that youre creating accessible features from the start. It should be included in the design of your product, not a separate task. From time to time, we do get assessed on how accessible our solutions are so youll want to always include it in your requirements so it doesnt become a firedrill for the team. For more information of including accessibility in design, see the [OM Academy resources](http://calmedia.atlanta.ibm.com/om_academy/om_resources.php){:target=_blank} (bottom left corner) and for the latest announcements on changes in accessibility (including updated checklists), see the [Accessibility forum](https://w3-connections.ibm.com/forums/html/topic?id=678e615c-a95d-48a1-9988-c96705c9be1f&ps=25){:target=_blank}.  - Globalization & Languages (included in the Offering Deliverables Catalog) - Did you include language testing on the new feature? Or are you targeting new countries or languages as part of your strategic roadmap? Ensure youve included stories for those items in the appropriate release.2. Go To Market (GTM) - Will you need to create a new demo video, blog post, talk or presentation to help users understand the value in the release? Will you be showcasing it at a big confrence or event? Think about all the channels you’ll want to know about the release and how you’ll communicate with them. Will there be changes in exisitng pricing or packaging to go along with the new feature? Think about what it takes for users to adopt the new functionality and all the steps your team needs to make to ensure a smooth customer journey.## Starting your release### Ready, set, SPRINT!We want our [Squad members](../agile/ibm-squad-thinking#squads) to have big blocks of time to get things done. To accomplish this, we always start with the minimum viable process possible.Head on over to the [Play by Play](../agile/play-by-play/) pages to see how to Sprint effectively...### Release Management Meeting (OPTIONAL)> Who: Release Manager, Squad Leaders, Product Leadership Team > When: Weekly - Optional as content can be covered in a Whole Team StandupUnless otherwised covered during a Whole Team Standup, products may also hold a Release Management Meeting. The Release Manager will run this with the Tribe/Product/Squad Leaders (ensuring all disciplines are represented). The objective of the meeting is to review progress of the current release, any changes in scope, dependencies and risks for all milestones identified on the Release Plan.#### Assumptions- A Release Plan has been created and that and everyone understands the scope of the release and associated milestones.- All Squad leads are aligned on the content#### During the Release Management Meeting- Review the Roadmap that aligns with the Release Plan- Review the Release Report (burn-up chart) for relevant milestones- Filter the Release Report by Squads to determine if theyre On Track, At Risk, or Blocked- Review dependencies, risk, changes to plan (scope, time, resource)- Assign and review action itemsMany Products in Watson cover these items during their weekly Whole Team Standup (aka Scrum of Scrums)...## Measuring progress> Who: Release Manager and Squad Leaders> When: Every Day at the 15 Minute Daily Standup### BurndownBurndown reports show completion of work over time (from 100% to 0% remaining).> ProTips:> - The diagonal line is your ideal, if youre below the line, youre ahead of schedule, above the line, youre behind.> - Notice that plateau? Thats a weekend. We expect work to pause on the weekends.### VelocityAfter a few Sprints, add up the number of completed Story Points and divide by the number of Sprints. The average number of Story Points completed is called your Velocity. Use your average number of Story Points to determine how many Points to put in each Sprint moving forward. Understanding (and using) your Velocity is key to getting your Squad to predictability.> ProTip: Look at the chart above. The average Velocity for this project is a little over 30 Story Points per Sprint and yet theyve added 193 Story Points to the Sprint. The Velocity chart is a great way to spot overcommiting. Overcommitting is a big problem that negatively impacts morale, causes lost revenue, and prevents teams from becoming predictable.### Burnup (aka Release Reports)Burnup reports show completion of work over time (from 0% to 100% complete).> ProTip: Do not build a release during the release. Build your releases before the start date of the release. There is a scope creep algorithm baked into Release Reports that will skew the predicted end date dramatically. Youll still be able to use the burn up chart, but the predicted end date will be off if you build a release report while the release is already underway...## Keeping Tools Accurate> Who: Release Manager and Squad Leaders> When: Every DayThe information we get out of Jira and GitHub is only as good as how we organize it. Without a watchful eye, Jira and GitHub can easily becomes a misleading source of information. Having accurate information in Jira or GitHub is the key to becoming predictable. Stripping everything else aside, there are three things that can dramatically improve the accuracy of the information in GitHub.### Ensure Issues are in the correct State- During the Daily Standup, each Squad runs their Daily Standup from their Jira Board. Use the Daily Standup as an opportunity to keep every issue in the correct State. Notice that a Squad Member said that they closed #42 but its still in the In Progress column? Drag it to the Closed column right then and there.### Apply an Estimate to EVERY Issue- To understand your Squads velocity, ensure that each and every Issue has an estimate so that it is shown in your [Burndown, Burn up and Velocity Reports](../agile/play-by-play/estimates-and-reports). Notice that a Squad didnt estimate some of their Issues? Assign 1 point to any unestimated issues. That will provide a better estimate than none at all.### Assign EVERY Issue to the Milestone that it was closed during- Every day, review your closed issues, filter by Issues with no milestones and assign any issues to the current Milestone. This helps prevent work from slipping through the cracks and helps you get closer to predictability> ProTip: Remember, there are really only two kinds of work, work you track and work you dont. Our tools make it quick and easy to help you keep all of your work _visible_.## Release!> _“Agile at scale requires trust at scale”_> [@HenrikKniberg](https://twitter.com/HenrikKniberg){:target=_blank} ([Spotify](https://labs.spotify.com/2014/03/27/spotify-engineering-culture-part-1/){:target=_blank})To truly scale release operations, you must provide your Squads with the authority to push changes into production.This is how cloud companies operate. This is how Amazon works, this is how Netflix works.There are no tickets opened, no votes by review boards, they have granted their Squads with the authority to release their work when they see fit.This authority comes with a great deal of responsibility in the form of PagerDuty, as Amazon says, you build it, you run it.> ProTip: To dig deeper, read the book [Lean Enterprise](https://www.safaribooksonline.com/library/view/lean-enterprise/9781491946527/){:target=_blank} by Jez Humble, Joanne Molesky and Barry OReilly. [Heres a link](https://www.safaribooksonline.com/library/view/lean-enterprise/9781491946527/part03ch05.html#chapter_3_5){:target=_blank} to the section on how other companies work.## Celebrate> Agile processes promote sustainable development.> The sponsors, developers, and users should be able> to maintain a constant pace indefinitely.Were people, not robots.We forget that sometimes.The [Last day of the Sprint Ceremonies](../agile/play-by-play/agile-calendars) are a good place to start. Playbacks can be a wonderful opportunity to showcase what youve done.We need more than that though.From time to time, its vital take a break and celebrate your accomplishments. Enjoy the company of your team.Share a mealNothing bonds a Squad like sharing a meal. Have lunch together, go out for drinks, or grab an ice cream on a hot day.Get together with other Squads at your site and plan a potluck.Team day outLive near an amusement park? Take a day and go together. Outdoor concert series happen each and every summer in all of our cities. Mini golf and ice cream down the street? Go together for a few hours.ClubsEach and every site has an amazing array of fun activities.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/planning-and-tracking-work/release-planning/",
    },
    {
      "title": "Watson Health Security Guidesidebar: dev",
      "text": "---title: Watson Health Security Guidesidebar: dev---For security guidance please see:[Watson Health Security Guidance for Developers](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wa0a1d43ca7a0_4fff_87ff_04006c762969/page/Security%20Guidance%20for%20Architects){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/security-guild/index/",
    },
    {
      "title": "Sense and Respondsidebar: dev-sarbreadcrumb: Sense and Respond Tasks (Dev)",
      "text": "---title: Sense and Respondsidebar: dev-sarbreadcrumb: Sense and Respond Tasks (Dev)---# DRAFT (Coming Soon!)Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Sense and Respond phase tasks relevant to Development_- _Hover OVER the task to see who OWNS the task_- _Tasks marked with a GxP Only label can be skipped for non-regulated offerings_- _Tasks marked with a CS Only label can be skipped for offerings that are NOT common services_                  svg {          background-image: url(https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/flows/vs-sense-and-respond-dev.jpg);          background-size: 100% 100%;          background-repeat: no-repeat;          max-width: 900px;          width: 90%;        }        path {          fill: transparent;          cursor: pointer;          transition: fill 0.2s;        }        svg a:focus,        svg a:hover {          outline: none;        }        svg a:focus path,        svg a:hover path {          fill: rgba(255,255,0, 0.15);          cursor: pointer;       }                            OWNER: Offering Manager - Ensure Usage - Adoption                                    OWNER: Dev Lead -  L1 / L2 / L3 Support                                    OWNER: Offering Manager - Gather User Feedback and NPS Survey / Interviews                                    OWNER: Offering Manager - Enhance or Adapt Offering                                    OWNER: Offering Manager - Re-Evaluate offering as a Common Service                                    OWNER: Offering Manager - Assess Promotional Materials                                    OWNER: Offering Manager - Release Promotional Materials                                    OWNER: Offering Manager - Ensure Usage / Adoption                    ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/sense-and-respond/index/",
    },
    {
      "title": "L1, L2, L3 Supportsidebar: dev-sarbreadcrumb: L1, L2, L3 Support",
      "text": "---title: L1, L2, L3 Supportsidebar: dev-sarbreadcrumb: L1, L2, L3 Support---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/dev/sense-and-respond/l1-l2-l3-support/",
    },
    {
      "title": "What we do...sidebar: whatbreadcrumb: What We Do",
      "text": "---title: What we do...sidebar: whatbreadcrumb: What We Do---Who does what and when?We all want a simple, clear and standardized way of working together across our business. This section outlines key activities and outcomes across the offering lifecycle and describes ways of working across disciplines.Key Terms---------[Hills:](http://gbslearn-stg.atlanta.ibm.com/iSPO/design_thinking_university/hills.html){:target=_blank} Hills describe specific human-centered business objectives for an offering used to focus and align cross functional teams. They are formed from the ‘to be scenario’ defined by the team and are a statement of intent, written as a meaningful human/user outcome. A Hill identifies the human/user who will experience the value (Who), describes a human outcome that the offering aims to deliver (What), and the delightful and transformative experience associated with the outcome (Wow). Note that Hills should not describe the how—the specifics of how the Hills will be achieved/the specific shape/form of the solution is left to the human centered, agile, cross functional team to figure out. (In this context, Technical Foundation describes the cross cutting or foundational development investment and work required to support the Hills.[Epics:](../../../dev/planning-and-tracking-work/ongoing-delivery/#epics)Hills are broken down into Epics. An Epic can be defined as a group of work/tasks that have a common objective – in our model the objective is to support the achievement of the human goals, scenarios, or jobs to be done explicitly outlined or implied within Hills and/or the foundational technical work required to support one or more hills. (If we can’t connect the dots between our Epics and our Hills, then we need to reflect on what we are doing and why) Epics form the highest level in our product backlog and are prioritized and actioned by the agile squad. It may take several sprints to complete an Epic and they are typically broken down into a number of smaller User Stories.[UserStories:](../../../dev/planning-and-tracking-work/ongoing-delivery/#stories) A User Story is a short description of a desired functionality requirement features. User stories are written from the perspective of an end user.![User Stories](https://pages.github.ibm.com/watson-health-playbook/resources/images/foundation/user-stories.png)Portfolio Management------------------------In the world of health there are a wide range of complex, interdependent, and intersecting challenges and opportunities that Watson health could attempt to address. Indeed, through acquisition and organic growth, we already have a wide, diverse, complex, and often overlapping or intersecting portfolio of Watson Health offerings In this context, we realized that we needed a systematic way to strategically align, govern and prioritize our offering investments and optimize our portfolio to ensure that we invest in the highest value opportunities (where we can make the greatest human and market impact), avoid duplication of effort, fragmentation of our portfolio and brand/value proposition, and optimize alignment/complementarity/synergy between our offerings.In this context, the Watson Health Portfolio Management process outlines the path and standards for how we generate, evaluate, and validate new, early stage offering ideas from a business, tech, and human perspectives, and how we prioritize portfolio investments. The Portfolio Management process can be viewed as a precursor to and/or a very early component of the Market Opportunity & Approach phase in which the WH Innovation Board works with business anddisciplinary leaders to generate, evaluate and prioritize early stage offering ideas and hypotheses from various vantage points ( including fit with and enrichment of the WH portfolio, problems that matter from a human and market perspective and for which AI is both relevant and potential feasible, etc.) before investing the resources and time to more fully flesh out and validate the opportunity and the proposed solution/Offering.Selected hypotheses or opportunities that are judged by the Watson Health Innovation Board to warrant further investigation and limited investment are moved forward. This may involve execution of a very focused time boxed “vision sprint” or a more formal shift to the Market Opportunity & Approach phase.To learn more, go to [Watson Health Portfolio Management](../../../om/portfolio-management)Market Opportunity & Approach---------------------------------The goal of Market Opportunity & Approach is to leanly and rapidly understand the human/organizational problems that matter most within a particular domain or market segment and to formulate and evaluate the viability of potential value propositions and high level solution concepts from human, business, and technical perspectives – before deploying a larger team to more fully flesh out the details of a specific offering (in Define & Prove).In short, this phase can be viewed as fleshing out and testing the various components and hypotheses within a Lean Business Canvas – to identify the right problem for Watson Health to solve, and then outline and assess whether a potential value proposition and solution concept is viable and valuable from a market, human, and technology perspective.During Market Opportunity and Approach a lean cross functional squad executes a “vision sprint” (4-8 weeks in duration) involving rapid observational/field research with target users, formulation of value propositions and sketching of solution concepts, technical feasibility & architectural analysis, and rapid iterative testing of value props and high level solution concepts with representative potential buyers and target users (“sponsor users”).The culmination of the Market Opportunity & Approach phase is a decision after “Playback 0” about whether to further invest and proceed onward to Define & Prove work – to achieve a fuller definition and validation of the offering business model, value proposition, experience design and technical design as potential readiness to Build & Deliver the offering.### The TeamThe Market Opportunity & Approach product team is a lean cross-functional squad made up of the following team members:| Squad              | Stakeholders     | Executives  ||------------------------|----------------------|-----------------|| Offering Manager       | Development Manager  | Director        || Design Researcher/Lead | Architect            | Vice President  || Development Lead       | Design Practice Lead | General Manager || SMEs                   | SMEs                 |                 || Sales and Marketing    | Data Scientist       |                 || Finance                |                      |                 |Who does What and When?During Market Opportunity & Approach, the team works to develop IBM’s market POV (including the needs of organizations and people within a segment), to decide if further investment in a solution concept is warranted. (See [Offering Management Academy](http://calmedia.atlanta.ibm.com/om_academy/index.php){:target=_blank} for more details)In this phase, a lean team rapidly investigates a domain and/or a hypothesized offering opportunity in order to clarify and validate the right human problem to solve and the market opportunity, and to illustrate the outlines of a potential solution concept in an experimental and agile environment.  The lean Cross-Functional Squad is made of OM, Design, Development, Clinical SMEs, and Data Scientist (Optional).![MOA Activities](https://pages.github.ibm.com/watson-health-playbook/resources/images/foundation/moa-activities.png)The key deliverables for Market Opportunity & Approach include:Market POV and Business Model Canvas ExploreUser Personas and ScenariosSolution “Concept Car” (i.e, high level offering concept definition and illustration of the user experience)At Market Playback, the senior leadership team decides whether the opportunity warrants further definition and investment of resources, time, and effort (see Define and Prove), They can also decide NOT to invest, or to pivot and explore further. The Review Board decides if WH’s unique POV on market potential justifies committing additional time and resources to more fully design the offering and develop the business plan. As outlined on the Portfolio Management section, the Evaluation Criteria are:Business & Market Impact: Value to Buyer, Market Size & Growth, Competitive DifferentiationHuman Impact: Value to End-User, Adoption Barriers, Early Adopters & Sponsor UsersStrategy & Synergies: Strategic Target Areas, Relation to WH Capabilities & AssetsFeasibility: Technical Capabilities, Compliance/RegulatoryScale NPV & ROI: Time to Revenue, Investment & Cost StructureDefine and Prove--------------------The goal of Define and Prove is to decide whether a proposed offering will differentially address a market opportunity based on Sponsor Uservalidation. (See [Offering Management Academy](http://calmedia.atlanta.ibm.com/om_academy/index.php){:target=_blank}).In other words, the team works to further define, refine, test, and validate an offering from business, human/user experience, and technical perspectives before fully investing in developing and delivering it to the market. In short, the aim is to “nail it before you scale it”.By the end of the Define and Prove phase the team will have defined the initial scope of the offering in the form of validated Hills, defined and validated the user experience architecture, key interaction flows, and the overall user interface layout, look, and feel of the offering, defined and validated the technical architecture, and outlined an experience-based release roadmap.### The TeamDuring Define and Prove, the product team is made up of the following team members:| Squad                                              | Stakeholders     | Executives  ||--------------------------------------------------------|----------------------|-----------------|| Product Owner                                          | Development Manager  | Director        || Business Analyst                                       | Offering Manager     | Vice President  || Design Team - Lead/UX/UI/Research/FED/Content Designer | Architect            | General Manager ||                                                        | Design Practice Lead |                 |Within the Squad, the Product Owner, Business Analyst and Design Team meet on a daily basis to review work in progress.While the Stakeholders are brought into these daily meetings when necessary, typically the stakeholders meet with the squad weekly to review current designs, understand user feedback and discuss feasibility, etc.The Executives attend informal and formal playbacks, e.g. Hills Playback and Playback 0.Who does What and When?Getting to Hills Playback-------------------------Hills are essential in order to align a cross functional offering team on a shared mission to deliver specific outcomes (WHO) and compelling experiences(WOW) to defined target humans/users (WHO). Hills (along with an Experience-Based Roadmap) enable the team to focus on prioritized human needs and iteratively deliver valuable human/business outcomes and experiences as they work through human centered agile cycles of observation, reflection, and making.In order to define the Hills and hold a successful Hills playback, each discipline has an important role to play: Offering Management is accountable for the definition of the offering value proposition, strategy, and vision as well as the validated, viable, and prioritized Hills. Design is responsible for informing and validating the value proposition, defining the user experience architecture, understanding and modeling the goals, scenarios, work practices, and needs, mental models, and workflows of key target users/potential early adopters, and collaborating on the experience-based roadmap and Hills through iterative design and design research. Development is responsible for assessing technical feasibility of the offering concepts/vision and Hills and defining the requisite technical foundation and technical architecture.At this phase of the offering lifecycle, the team’s Offering Manager and Design Researcher has already produced key artifacts such as the lean business model canvas, market definition, competitive analysis (market and user experience), and user/buyer personas, and has engaged iteratively with Sponsor Users. At the Hills Workshop a synthesis of the information, perspectives, and insights is presented to the team, enabling team alignment on vision and strategy, the end users, and the human-business problems to be solved – resulting in the definition and prioritization of Hills for the team to tackle.![Hill Definition](https://pages.github.ibm.com/watson-health-playbook/resources/images/foundation/hill-definition.png)Hills Playback is a full team meeting of core, stakeholder and executives, it serves to inform and align the execute stakeholders on the offering’s Hills. At this stage executives can decide to proceed to Playback 0, cancel, or pivot.Getting to Playback 0---------------------To get to playback 0 the team focuses on iteratively defining, validating and refining the solution in line with the project Hills - essentially fleshing out the “how” we will deliver the “what” and the “wow” to the target people/users (the “who”). Each discipline works together to refine, test, and validate the details of the proposed offering in terms of business viability (business) feasibility (engineering) and human/user experience value/effectiveness (design) through iterative cycles of observing, reflecting, and making informed by engagement/assessment with representative target users (Sponsor Users, etc.).In short, by Playback 0, the team should have defined and validated (through continued human engagement/assessments), the business model, the user experience architecture, key user interactions and user interfaces, technical architecture/design, an experience-based roadmap and defined the backlog (Epics) for the initial release as potential input into Build & Deliver.![DAP Activities](https://pages.github.ibm.com/watson-health-playbook/resources/images/foundation/dap-activities.png)Playback 0 is a full team meeting of core, stakeholder and executives, it serves to inform and align the executive stakeholders on the offering’s solution and release plan. At this stage executives can decide to proceed to Build and Deliver, cancel, or pivot.Build and Deliver---------------------During Build and Deliver the team work together to iteratively build and deliver working software that aligns with the prioritized Hills, human/user needs and the release plan. (Note that Define & Prove may have produced user experience and technical prototypes/proofs of concept but would not functional releasable software).### The TeamDuring Build and Deliver, the size of the team will typically and multiple squads may actually be formed. The meeting/collaboration cadence between the core squad(s), stakeholders and executives meet also evolves:| Squad                                              | Stakeholders     | Executives  ||--------------------------------------------------------|----------------------|-----------------|| Product Owner                                          | Development Manager  | Director        || Squad Leader                                           | Offering Manager     | Vice President  || Business Analyst                                       | Architect            | General Manager || Design Team - Lead/UX/UI/Research/FED/Content Designer | Design Practice Lead |                 || Engineer(s)                                            |                      |                 || Tester(s)                                              |                      |                 |The Squad(s) meets at daily stand-ups, sprint planning and sprint retrospective sessions. The Stakeholders meet with the squad at end of sprint demos. The Executives attend informal and/or formal delivery playbacks.Who does What and When?Typically, the Design and Business members of the squad are at least one sprint ahead of Engineering.![Sprints](https://pages.github.ibm.com/watson-health-playbook/resources/images/foundation/sprints.png)![Sprint Timeline](https://pages.github.ibm.com/watson-health-playbook/resources/images/foundation/sprint-timeline.png)Sense and RespondDuring Sense and Respond the team works together to measure, assess, and gain insight into the market/user adoption and business-human impact of the offering (represented in the Offering scorecard, OBDR, NPS, SaaS dashboard, Adoption & Impact Measurement Analyses, etc.) to identify and understand barriers to market/user adoption and user success, and opportunities for offering optimization, enrichment, and innovation Insights gained during Sense & Respond are used to make decisions about adjustments to offering definition and/or GTM & Delivery approach (including sunsetting an offering). (See [Offering Management Academy](http://calmedia.atlanta.ibm.com/om_academy/index.php){:target=_blank} for more details)More specifically, insights are used to inform continuous improvement of the offering, inform and prioritize the backlog and roadmap, trigger and shape targeted adoption acceleration/GTM activities, and to surface and prioritize new potential areas for offering innovation (e.g., offering pivots, companion offerings, novel extensions of the offering etc.).Offering pivots, novel hypotheses/opportunities and potential offering extensions may trigger Market Opportunity & Approach like investigations before the Offering team invests significant resources in these opportunities.### The TeamDuring Build and Deliver, the size of the squad may decrease:| Squad              | Stakeholders     | Executives  ||------------------------|----------------------|-----------------|| Product Owner          | Development Manager  | Director        || Design Lead/Researcher | Offering Manager     | Vice President  || Architect              | Architect            | General Manager ||                        | Design Practice Lead |                 ||                        | Sales & Marketing    |                 ||                        |                      |                 |Who does What and When?During the Sense & Respond phase the Offering Manager engages with the Sales & Marketing team, customers and prospects, and the Design Researcher/Adoption Analyst to analyze and understand the customer adoption journey (including the digital try and buy experience) and end-user adoption experience/usage patterns. This includes but it not limited to analyzing qualitative and quantitativecustomer feedback (e.g., NPS and other surveys, customer user groups, etc.)![SAR Activities](https://pages.github.ibm.com/watson-health-playbook/resources/images/foundation/sar-activities.png)In addition, the Adoption Analyst/Design Researcher executes Adoption & Impact Measurement (AIM) activities in collaboration with the Design Lead and the Offering Manager -- analyzing offering usage patterns and key user adoption/success metrics, conducting targeted user assessments/testing and fieldresearch to evaluate adoption progress and offering impact and illuminate barriers/issues/opportunities impacting on full user adoption and scenario success.Insights from AIM may be used by the Offering Manager, Sales & Marketing, the Design Lead, and the Content Designer inform the creation of targeted Adoption Acceleration Plans and materials, serve as input into the backlog (new user stories, prioritization of user stories, etc.). for the delivery squad to work on in upcoming sprints/releases. Iterative user assessments/Sponsor User engagement are integrated into all sprints to inform and guide the execution/optimization of offering improvements.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/foundation/what/index/",
    },
    {
      "title": "Who We Are...sidebar: whobreadcrumb: Who We Are",
      "text": "---title: Who We Are...sidebar: whobreadcrumb: Who We Are---Who’s on the Offering Team ?The Offering Team can be divided into the Core Squad, Stakeholders and Executives. While the stakeholders and executives remain consistent through thelifecycle of the product, the composition of the squad changes as the offering progresses.![Composition of the Product Team](https://pages.github.ibm.com/watson-health-playbook/resources/images/foundation/composition-of-the-product-team.png)Executives…..Stakeholders…..The Core Squad……Who’s on the Core Squad?In order to understand how we all work together, let’s look at the roles and responsibilities within Business, Design and Engineering and the formation ofthe squad. It’s important to note that depending on skills, resourcing and bandwidth, one team member may assume multiple roles.The Business Team-----------------| Offering Manager                                                                                                                        | Product Owner                                                                                   | Business Analyst                                                                                  ||-----------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|| Owns product vision, roadmap & Hills                                                                                                    | Responsible for overall design and implementation of product                                    | Responsible for definition and delivery of product business requirements                          || Works with Product Owner, Design/Dev leads and team in defining epics and backlog prioritization                                        | Accountable for defining and prioritizing the product backlog.                                  | Reviews implementation of solution through all stages of development and associated FVT scenarios || Works closely with clients, marketing and business to understand competitive landscape, market differentiation and return on investment | Defines and drives product Epics based on product vision, Hills, prioritization and feasibility | Defines user stories/epics – who, what and why                                                    || Responsible for release management, pricing and licensing                                                                               | Ensures User Stories are clearly defined and have an established acceptance criteria            | Presents user stories and business context to scrum team                                          |The Design Team---------------| Design Lead                                                                                                                                                             | UX (Experience) Designer                                                                                                                                                                                             | Visual Designer                                                                                                                                                                                                                               | Design Researcher                                                                                                                                                                                                                                                                                                                | Design Front End Developer (FED)                                                                                                                                                                                                                                                                       | Content Designer                                                                                                                                                                                           ||-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|| Accountable for the offering’s design strategy and quality as well as ensuring efficient integration and delivery excellence of design within the cross functional team | Defines the structure and flow of the offering experience. This includes defining the user experience (UX) architecture, define interactions patterns, and creating UX wireframes to define the offering experience  | Defines typography, layout, colour, and style to support the product brand. Defines the visual presentation of data an information within an offering to support a users goals and create a compelling, satisfying, and accessible experience | Conducts quantitative and qualitative research to understand the humans our offerings serve (“users”), their needs, behaviors, mental models, and key work flows & evaluate the effectiveness, adoption, and impact of solutions and experiences for target users                                                                | Uses front-end web technologies to create impactful and accessible user experiences. Realizes                                                                                                                                                                                                          | Use the written word and other forms of content to help users to succeed and achieve their goals, evoke intended emotional reactions, & accelerate positive experiences with and adoption of our offerings || Drives design and experience- based innovation, best practices and quality                                                                                              | Produces experience/solution concept models, experience architectures, and detailed solution interaction flows and user interface wireframes/blueprints for the offering                                             | Produces low and high fidelity mock-ups, prototypes and design specifications                                                                                                                                                                 | Conducts observational (ethnography) research, analysis and modeling to ensure that offerings focus on the human problems and opportunities that matter most. Defines and conducts ongoing user assessments / testing / measurement throughout the product lifecycle. Defines and measures user experience/adoption success metrics. | Collaborates with the product team to make design concepts tangible and testable through rapid prototyping. Works to ensure that user interfaces deliver usable, high quality, seamless, and delightful experiences that enable users to successfully achieve their goals and accelerate user adoption | Produces written content for the offering user interface, digital publications and marketing material.                                                                                                     || Coordinates, delegates, and oversees design team tasks                                                                                                                  | Crafts stories based on user scenarios, tasks and experiences                                                                                                                                                        | Defines iconography and digital assets for product                                                                                                                                                                                            | Generates actionable human insights to inform offering backlog/requirements definition, design, roadmap, strategy, & continuous improvement                                                                                                                                                                                      | Delivers user experienced prototypes for user assessments and high quality front end production code that realizes the intended user experience. Peer review team members code deliverables                                                                                                            |                                                                                                                                                                                                            |The Engineering Team--------------------| Development Manager                                                        | Architect                                                                                                                                                                                                                                            | Squad Leader                                                            | Engineer (Frontend, Backend)                                        | Testing (SVT and FVT)                                       ||----------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------|---------------------------------------------------------------------|-------------------------------------------------------------|| Accountable for planning, executing and monitoring progress of the project | Accountable for the product’s technical strategy and quality of coded implementation. Defines the technical architecture of the offering ensures alignment between the technical approach and architecture and the user experience (UX) architecture | Ensures the team keeps to the values and practices of Agile             | Uses front-end and back-end technologies to implement User Stories. | Verifies product’s functional & non-functional requirements || Identifies and manages project risks                                       | Reviews team’s technical spikes/studies. Consults on technical feasibility of offering concepts and iterates on technical strategy/architecture based on team learning and pivots                                                                    | Removes impediments, identifies team dependencies & facilitate meetings | Conduct technical feasibility studies (spikes) for new features     | Delivers automated end to end testing                       || Produces project status reports for senior management/exec team            | Guides and mentors engineers                                                                                                                                                                                                                         | Has authority over the team’s agile process.                            | Peer review team members code deliverables                          | Deploy and maintain test servers                            |",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/foundation/who/index/",
    },
    {
      "title": "Our Mission...sidebar: whybreadcrumb: Our Mission",
      "text": "---title: Our Mission...sidebar: whybreadcrumb: Our Mission---Why do we need to define how we work?Empowered and highly collaborative cross functional teams with diverse backgrounds, skills, and perspectives are essential to achieving the Watson Health mission – addressing the most wickedly complex and pressing health challenges through innovative uses of data and cognitive insights.This playbook is intended to clarify who needs to do what (i.e., key “jobs to be done”), and when they need to do them, and to offer useful principles, best practices, and tools to help each person and team know how to work together and get their jobs done throughout the offering lifeOur Principles and Practices--------------------------------We apply a human-centered, business focused, and agile approach throughout the offering lifecycle that integrates and blends a number of IBM practice frameworks and principles:Offering Management Wheel – A phased adaptive approach outlining how we validate, define, build, launch, and managing our offerings throughout the lifecycle.IBM Design Thinking – An iterative human-centered approach and problem solving framework that enables and focuses our teams on delivering valuable outcomes and delightful experiences for the people they serveAgile– A lean iterative approach to development that enables small empowered cross functional squads to rapidly deliver value and adapt to change>   _( Note that due to the regulatory environment in the health domain, for selected offerings we sometimes have to apply the practices and procedures of a Quality Management System (QMS) – A set of practices required to demonstrate and ensure that our offerings are safe, effective, high quality and meet health related requlatory requirements. To learn more, see the Quality Management System section of the WH Playbook.)_![Practices in Action](https://pages.github.ibm.com/watson-health-playbook/resources/images/foundation/practices-in-action.png)[Offering ManagementWheel:](http://calmedia.atlanta.ibm.com/om_academy/process_artifacts.php){:target=_blank} IBM’s Offering Management Wheel outlines a phased adaptive approach to validating, defining, building, launching and managing our offerings from initial idea/opportunity hypothesis (Market Opportunity & Approach through design, definition, and further validation (Define & Prove), to building and launch (Build & Deliver) to continuous adoption & impact evaluation & improvement (Sense & Respond) [Learn more at the Offering Management Academy](http://calmedia.atlanta.ibm.com/om_academy/index.php){:target=_blank} .[Enterprise DesignThinking:](http://gbslearn-stg.atlanta.ibm.com/iSPO/design_thinking_university/index.html){:target=_blank} IBM’s Enterprise Design Thinking is a human centered design approach and framework for solving problems for people at speed and scale. It has three major parts:- The Principles: A relentless focus on human/user outcomes, restless reinvention (treating everything is a prototype), and empowerment of diverse teams guides the way we work- The Loop: Iteratively working through loops of observing, reflecting and making enables our teams to rapidly innovate, learn, and deliver value for humans and organizations- The Keys: A set of specific techniques and practices to align and scale our cross functional teams to deliver great human outcomes and value – e.g., Hills to align teams around delivering specific human outcomes and experiences, Sponsor Users to engage and learn from and test/validate/optimize what we make , and Playbacks to share feedback and learn together along the way.[Agile:](../../../dev/agile/ibm-squad-thinking) Agile is an iterative, adaptive, and pragmatic development process that empowers smallself-organizing cross functional teams to solve problems and deliver value efficiently and while accelerating learning and nimble adaptation. Agile relieson incremental, iterative work sequences that are commonly known as sprints to focus teams and enable them to respond quickly to theunpredictability of constructing software. [Learn more about the basics at [Agile\@IBM](https://agile-ibm.mybluemix.net/){:target=_blank} ]We strive to integrate these three practice frameworks into a coherent unified approach. The objectives and jobs to be done vary depending upon where anoffering is in the life cycle - which often requires shifting the precise composition (e.g., skill sets) and size of the cross functional team.The chart below presents a high level view of the relative involvement/efforts of varied disciplines across each of the offering stages:![The Product Lifecycle](https://pages.github.ibm.com/watson-health-playbook/resources/images/foundation/product-lifecycle.png)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/foundation/why/index/",
    },
    {
      "title": "How are we doing?breadcrumb: Survey",
      "text": "---title: How are we doing?breadcrumb: Survey---## How likely is it that you would recommend The Playbook to a friend or colleague?Not at all likely &nbsp; &nbsp; &nbsp; &nbsp; 01&nbsp;&nbsp;   02&nbsp;&nbsp;   03&nbsp;&nbsp;   04&nbsp;&nbsp;   05&nbsp;&nbsp;   06&nbsp;&nbsp;   07&nbsp;&nbsp;   08&nbsp;&nbsp;   09&nbsp;&nbsp;   10 &nbsp;&nbsp; &nbsp; &nbsp;  Extremely likely",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/nps/get-nps/",
    },
    {
      "title": "Offering Managementsidebar: ombreadcrumb: OM Home",
      "text": "---title: Offering Managementsidebar: ombreadcrumb: OM Home---## How To - Offering Management{% include banners-3-col-with-images.html    b1_title=Market Opportunity & Approach    b1_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/design-guide-black.png    b1_button=Learn More    b1_link=/om/market-opportunity/    b2_title=Define & Prove    b2_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/tribe.png    b2_button=Learn More    b2_link=/om/define-and-prove/    b3_title=Build & Deliver    b3_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/map-128.svg    b3_button=Learn More    b3_link=/om/build-and-deliver/%}{% include banners-1-col-left-with-images.html    b1_title=Sense & Respond    b1_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/hills_24.svg    b1_button=Learn More    b1_link=/om/sense-and-respond/%}## Supporting Processes{% include banners-1-col-left-with-images.html    b1_title=Portfolio Management    b1_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/who-we-are.svg    b1_img_size=26px    b1_button=Learn More    b1_link=/om/portfolio-management/%}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/index/",
    },
    {
      "title": "Creating a New Offeringsidebar: om",
      "text": "---title: Creating a New Offeringsidebar: om---## OverviewBefore an offering is brought to market, it must first be defined and validated.  The [OM Academy](http://calmedia.atlanta.ibm.com/om_academy/index.php){:target=_blank} provides in depth education for offering managers on the key skills needed to effectively define offerings.  In this section of the Playbook, we define how the [Offering Management Model](http://calmedia.atlanta.ibm.com/om_academy/process_artifacts.php){:target=_blank} fits into Watsons implementation of Agile.The basic process consists of three iterations:Each iteration expands on the former, adding detail and validation before bringing the new offering to the MMT for approval to move into ongoing development.  Working through all three iterations will varying by project. On average, plan for roughly 12 weeks to complete the full cycle.Work should be conducted with the guidance of an Offering Manager Program Manager (OMPM) and should be tracked in Aha!.Before proceeding to the first iteration, make sure these per-requisites are complete:1. Identify your OM Program Manager and as much of your exploratory team as possible.  This should include an OM, Designer(s), and a consulting Dev lead or architect.  If you cant secure Design or Development assistance early on, try to get a consult from each discipline, and then work with your OMPM to secure resources starting in Iteration 2.2. Create a new release in Aha!, inside the [Watson Health](https://watsonhealth.aha.io){:target=_blank}.3. Schedule your recurring Agile ceremonies. Your team will work in sprints during this process, and should use the basic Agile process to manage your work across all the disciplines.  This ensures everyone is aligned to a common set of goals, and a common timeline.4. Create new epics in Aha!, using the board view for communication to executive leadership.  As milestones are reached for each iteration, Aha! will be automatically updated (through the integration with Jira) to keep leadership informed of your overall progress and readiness for playbacks.## Iteration 1: Explore the MarketNow that youre set up in Aha!, its time to get to work!  In this iteration, the Offering Manager researches a potential market and business model to determine if its worth investing time and resources to explore further.Typical activities include:- Market Research- Generative User Research- Collaboration with other parts of IBM (GBS, Research, etc)- Creation of the [Business Model Canvas](https://ibm.box.com/s/rcrfyht8xmfhc0lczf4epdqwfheevz57){:target=_blank}> Please Note the templates and examples throughout this page are from the OM Academy – While they can be used as guidance be aware that [Watson Health has developed its own template to be used for the OM Playbacks] (https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wb1d543660cb8_44bc_b34a_efb359fb4b18/page/OM%20and%20Marketing%20Plan%20Templates%20and%20Training){:target=_blank}### Iteration 1: DeliverablesAt the end of this phase, a Business Model Canvas and Market POV are presented to the Offering Management VP during a Decision Playback.  Execs from Design and Development should also attend the playback to provide input, stay abreast of the projects progress, and secure resources for the next iteration.>[Download the Exploration Playback template and an example](https://ibm.box.com/s/y3xb3b9retdby0o1tte196b8cbbgqgjo){:target=_blank}## Iteration 2: Validate the OpportunityIn this iteration, the team expands the idea into a more detailed view of a specific market segment, and the segments need.  They then propose one, or more, solutions and conduct experiments with the market to validate or refute the proposed solution.Market experiments can take several different forms, but all should start with a statement of the problem in the form of Hills, and a proposed solution to test.The testing artifact will typically be a prototype (aka a solution concept or concept car).  Prototypes can take many forms, from interactive presentations used to collect feedback, all the way to semi-functional applications for usability testing.  To determine the correct type of prototype and level of fidelity, the Design Researcher should prepare a Market Experiment Plan with the agreement of OM and Dev.The team should not expect the initial market experiment to validate the opportunity.  In many situations, the initial solution or prototype may not produce the results desired.  In this case, the team needs to make a decision to pivot, and create a new solution, or abandon the opportunity and end the project.  If the decision is made to continue, a new solution concept should be proposed, a new plan documented, and another market experiment run.  If multiple pivots are required, this iteration of the project could take several months to complete.>[Download an example Solution Concept](https://ibm.box.com/s/blp3of5dnobhvwcsg7vxcywnhmqtdn6j){:target=_blank}>[Download the Market Experiment template and examples](https://ibm.box.com/s/n9x07z2bzywsqs1igsl8glfxqzas69tc){:target=_blank}### Iteration 2: DeliverablesAt the end of the iteration, if a validated solution concept has been produced, and a Decision Playback is conducted with the OM VP, as well as Design and Dev execs.  The team should present:- Validated Business Model/Canvas- Hills- Results of Market Experiment(s)- Initial Business Case>[Download the Market Validation Playback template and an example](https://ibm.box.com/s/y3xb3b9retdby0o1tte196b8cbbgqgjo){:target=_blank}## Iteration 3: Operationalize the OfferingThe team has validated the opportunity with the market and has feedback from potential users.  It is now time to update the solution concept and business case based on the knowledge gained from Iteration 2.  These updates culminate into a decision playback for the MMT.  This commitment pitch includes pricing & packaging, full business model, delivery method, KPIs, team (i.e. resources needed) and potential ROI.Key activities in Iteration 3: Update the Solution Concept/Prototype Revise Hills and define MVP Make a Resource Plan Pricing & Packaging Investigate/Architect Delivery Model KPIs (set the Success Criteria) Playback 0 demonstrating the validated Solution Concept.  Playback 0 should occur in advance of the decision playback so that MMT members have the opportunity to view the playback recording.### Iteration 3: Deliverables> [Download the Playback 0 template](http://calmedia.atlanta.ibm.com/om_academy/pdf/model/Playback_0_deck.pptx){:target=_blank}> [Download the Commitment Pitch Playback template and an example](https://ibm.box.com/s/y3xb3b9retdby0o1tte196b8cbbgqgjo){:target=_blank}## Taking the Next StepIf the offering is approved by the MMT, it is time to move into full Agile development and design.  During the Playback the offering leaders need to secure the following information: Dedicated resources from Development, Design, and Offering Management Priority level in relation to other existing offerings> Next Steps: [Organize the Squads](../../../dev/agile/ibm-squad-thinking) and [Build Your Backlog](../../../dev/agile/ongoing-delivery/hills-epics-stories-usecases/)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/new-offering-definition/",
    },
    {
      "title": "IBM Offering Launch Hub",
      "text": "---title: IBM Offering Launch Hub---",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/offering-launch-hub/",
    },
    {
      "title": "Offering Lifecycle & Cross-function Collaboration",
      "text": "---title: Offering Lifecycle & Cross-function Collaborationweight: 4sidebar: ombreadcrumb: Offering Lifecycle---We are empowering Offering Managers to set overall direction in a market, define the resources needed within the context of the unit’s strategy and establish priorities across disciplines. The Offering Management (OM) process outlines cross-discipline outcomes across an offering lifecycle, describes ways of working across Units and disciplines, and reinforces team accountability for market results.At the core of the OM model is continuous delivery and evaluation by cross-discipline product team. OM define business approach and validate offering viability, Dev lead define tech approach and ensure tech feasibility, and Design Lead define experience strategy and validate human value.The model outlines the following key stages:- Strategic Planing and Portfolio Management: Prioritize which markets to explore and invest against.- Market Opportunity and Approach: Develop IBM’s proprietary point of view on market segment needs, disruptive trends, and competitor positioning, and define potential offering(s) at concept level to address market opportunity.- Define and Prove: Complete detailed offering design, validated by sponsor users and ecosystem and create detailed business plan specifying cross-functional investment requirements and revenue / profit expectations by route to market.- Build and Deliver: Lead cross-functional execution against business plan to create offering and ensure go to market and delivery readiness.- Sense and Respond: Assessment of offering performance in market spanning customer experience, pipeline health, financial outcomes, and market share to inform real-time updates to portfolio management, offering design, and GTM and delivery approach (including sunsetting).![image](https://pages.github.ibm.com/watson-health-playbook/resources/images/how-we-work/PBSlide06.png)![image](https://pages.github.ibm.com/watson-health-playbook/resources/images/how-we-work/PBSlide07.png)![image](https://pages.github.ibm.com/watson-health-playbook/resources/images/how-we-work/PBSlide08.png)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/om-lifecycle/",
    },
    {
      "title": "Portfolio Managementsidebar: om",
      "text": "---title: Portfolio Managementsidebar: om---## Portfolio Management ProcessWe all want a simple, clear and standardized way of working together across Watson Health. To facilitate this, we have put together a portfolio management process that details the path from new idea generation to Watson Health offering.  This process creates standards for the way we work to give the organization clarity and make it easier to get things done. Some of the key items include: defining the elements involved in the process (why, what, who, how), intersection points across functions and with market segments, clarity around decision rights and escalation paths, metrics to measurements. The Evaluation Criteria are: Business & Market Impact: Value to Buyer, Market Size & Growth Human Impact: Value to End-User, Adoption Barriers Strategy & Synergies: Strategic Target Areas, WH Capabilities & Assets Feasibility: Technical Capabilities, Compliance/Regulatory Scale NPV & ROI: Time to Revenue, Investment & Cost StructureThe Portfolio Management process steps are:1. Idea Generation: To grow our business and stay ahead in the market we need to generate new ideas, that could strengthen our existing offerings, or create new offerings by solving the most burning industry pain points. These ideas could be for a certain segment or cross segment.These ideas can come in from anyone in Watson Health, Research, external conferences, hackathons, etc., and are reviewed by the Watson Health Triage team, for a go/no go decision. The Triage team is a cross disciplinary group of leaders in Innovation, Analytics, Research, Development, Clinical SMEs and Offering Management. Marie Angelopoulos is our Watson Health Innovation Funnel leader. We have set up an IBM connections wiki for the submission of the idea and have created an Exploration Playback template for the submission. 2. Market Opportunity & Approach (Idea Evaluation): We need to lead with the market and client. Our offerings have to be sufficiently differentiated to command competitive advantage. In this step the team goes deeper into the value proposition and use case as well as the market for it. If the team discovers sufficient signposts for traction in the market, and has reason to believe there is significant value to the end user, buyer and to Watson Health, than it takes their finding forward to the Watson Health Innovation Board. The Innovation Board includes the key segment VPs, OMs and our General Manager, Deborah Disanzo. The objective of the innovation board is to decide: should we go ahead with this and provide feedback to the team. To facilitate this step of the process we created the Market Playback template, and you can find it in the same Wiki. 3. Define & Prove (Idea Validation): Enter the Define & Prove Squad! A cross functional squad to validate to validate business value, human value, and technical feasibility and ensure we are solving the right problem. The Cross-Functional Squad is made of OM, Design, Development, Data Scientist & Analytics, Clinical SMEs, that work as a lean team for an average of 6 weeks to validate business hypothesis with users. The team will formulate an experience strategy, high-level concept, and prepare to comprehensive business review. The review includes the results of the business, human, and technology validation, as well as a business case. The OM and funding GM for the idea will take it forward to the last approval, the Watson Health Business Review Board, chaired by our Watson Health GM Deborah DiSanzo, run by Marie Angelopoulos, and including other board members – our Development, GTM, Delivery, and Strategy leaders. The Business Review Board will provide a go/no go funding decision and decide if we move the solution to Build & Deliver. To facilitate this step of the process we created the Business Review template.4. Build & Deliver (Idea Execution): What happens next? With the completion of the Business Review Board step, we link into an existing process, the monthly Watson Health Offerings meetings with Deborah. These meetings are for the solutions that approved and move into Build & Deliver, and continue through the launch readiness playback, and subsequently Sense and Respond. The meetings are run by our Operations Leader Debbie Barns and her team. Debbie published the monthly agenda and template ahead of time to the OM community  and there is a box folder where our OM leaders post their monthly offerings updates based on a standardized template. We welcome your participation and submission of ideas. Lets drive new solutions for the Watson Health business! ## The Innovation FunnelAs part of Watson Health Portfolio Management process, we have introduced the innovation funnel. Have you ever had a really promising idea for growing Watson Health’s business that you were not sure how to surface? We now have a structured process for submitting these ideas. To grow our business and stay ahead in the market we need ideas that are new, cross segment and solve a business and human problem that may have the potential of driving a new business offering for IBM.  The Innovation Funnel process steps are:1. Idea Generation:  We are aiming to solicit and rapidly progress innovative ideas that contribute to the growth of Watson Health. These ideas can come in from anyone in Watson Health, Research, external conferences, hackathons, etc. We have set up an [IBM connections wiki](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W429907b3f6ec_4019_81f5_dbe030251892/page/Watson%20Health%20Innovation%20Funnel){:target=_blank} for the submission of the idea and have created an exploration playback template for the submission which includes the information described below.   Exploration Playback Template: Problem & Solution  Human Impact Market Opportunity  Human Value Market Impact Uniqueness/Differentiation Buyer Value Prop Proposition Investment Estimates Value & Potential Opportunity Strategy & SynergiesThe ideas are reviewed by a Triage team (cross disciplinary group of folks across Watson Health and Research) with a go/no go decision. A go decision would funnel the idea to step 2 which is Market Opportunity & Approach. If an idea is specific to a segment and is already in their roadmap, the idea will be funneled to the vertical offering management (OM) process.2. Market Opportunity & Approach: The idea lead will provide enough information about the market opportunity in a market playback template which includes the information described below.  Market Playback Template: Market Evaluation  Human Value & Persona Macro Business Case Technology and Portfolio Alignment  Investment Envelope for Next PhaseThe market playbacks are reviewed by the Innovation Board Review that includes the key segment VPs, OMs and our General Manager, Deborah Disanzo. The objective of the innovation board is to decide should we go ahead with this, into the next step (step 3) which will be to work together with OM, Design, Development, Analytics, Data and Clinical SMEs in a team for 6 weeks to create the Business Review Template.  3. Define & Approve: In this step, the objective is to complete the business, human, and technology validation and develop a business review template described below.     Business Review Template: Executive Summary   Market Size and Growth; Top Down and Bottoms Up Signings and Revenue Assessment  Competitors Assessment  Pricing Technology Schema Development Plan Business Case, ROI, NPV Investment Ask The business review templates are reviewed by the Business Review Board consisting of the Business Review Board members, market segment OM and GM. The board will provide a go/no go funding decision and if a go move the solution to Build & Deliver. As the solution moves into Build & Deliver, it will go through the launch readiness playback that will progress it to sense and respond with monthly offerings review.  We welcome your participation and submission of ideas.  Lets drive new solutions for the Watson Health business! This Wiki has all the background information on the process, relevant templates and is the place to submit your ideas: [Wiki & Templates](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W429907b3f6ec_4019_81f5_dbe030251892/page/Watson%20Health%20Innovation%20Funnel){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/portfolio-management/",
    },
    {
      "title": "Our Roadmaps",
      "text": "---title: Our Roadmapsweight: 1---",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/roadmaps/",
    },
    {
      "title": "4 Week Ask/Commitsidebar: om-badbreadcrumb: 4 Week Ask/Commit",
      "text": "---title: 4 Week Ask/Commitsidebar: om-badbreadcrumb: 4 Week Ask/Commit---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/build-and-deliver/ask-commit-process/",
    },
    {
      "title": "Discuss Portfoliosidebar: om-badbreadcrumb: Discuss Portfolio",
      "text": "---title: Discuss Portfoliosidebar: om-badbreadcrumb: Discuss Portfolio---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/build-and-deliver/discuss-portfolio/",
    },
    {
      "title": "Build and Deliversidebar: om-badbreadcrumb: Build and Deliver Tasks (OM)",
      "text": "---title: Build and Deliversidebar: om-badbreadcrumb: Build and Deliver Tasks (OM)---# DRAFT (Coming Soon!)Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Build and Deliver phase tasks relevant to Offering Management_- _Hover OVER the task to see who OWNS the task_- _Tasks marked with a GxP Only label can be skipped for non-regulated offerings_- _Tasks marked with a CS Only label can be skipped for offerings that are NOT common services_                  svg {          background-image: url(https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/flows/vs-build-and-deliver-om.jpg);          background-size: 100% 100%;          background-repeat: no-repeat;          max-width: 900px;          width: 90%;        }        path {          fill: transparent;          cursor: pointer;          transition: fill 0.2s;        }        svg a:focus,        svg a:hover {          outline: none;        }        svg a:focus path,        svg a:hover path {          fill: rgba(255,255,0, 0.15);          cursor: pointer;       }                            OWNER: Project Manager - Initialize New Analytics Project Charter                                    OWNER: Project Manager - Create Risk Management Plan                                    OWNER: Offering Manager - Submit list of suppliers                                    OWNER: Tools Team - Submit list of tools                                    OWNER: Dev Lead - Start Contribution Package                                    OWNER: Architect - User Requirements Specification                                    OWNER: Offering Manager - Project Kick-Off                                                          OWNER: Offering Manager - See Begin Monthly Reviews                                    OWNER: Architect - WHCT CoC Team Review                                    OWNER: Dev Lead - Confirm SPRB Review Completed                                    OWNER: Dev Lead - CDT ORB Review                                    OWNER: Operations - Create or Provision CDT Environment                                    OWNER: Architect - Design Input Detailed Requirements                                    OWNER: Project Manager - Approve Design Input                                    OWNER: Architect - Send HL-SL-DL to Dev                                    OWNER: Architect - Document System Architecture Specification                                    OWNER: Project Manager - Start Recording Risk Analysis                                    OWNER: Architect - Planning Requirements Design Review                                    OWNER: Test Lead - Document Verification and Validation Plan                                    OWNER Dev Lead - Create-Groom Stories (Define Design Output)                                    OWNER: Dev Lead - Implement Stories                                    OWNER: Architect - Review and Approve Design Output                                    OWNER: Test Lead - Testing                                    OWNER: Dev Lead - Code Reviews                                    OWNER: Security Lead - Complete Secure Engineering Virus Scans (Code Scans)                                    OWNER: Architect - Database Reviews                                    OWNER: Architect - Architecture Reviews                                    OWNER: Test Lead - Document and Approve Validation Build Standard                                    OWNER: Operations - Install Build to Formal V&V                                    OWNER: Test Lead - Review and Approval of Install Verification Protocol Execution Records                                    OWNER: Test Lead - Document and Approve Pre-Execution V&V Test Protocols                                    OWNER: Test Lead - V&V Readiness Design Review                                    OWNER: Test Lead - V&V Test Execution                                    OWNER: Test Lead - Review and Approve V&V Test Protocol Execution Records                                    OWNER: Test Lead - Document V&V Summary Report                                    OWNER: Dev Lead - Analytics and Informatics Impact Analysis                                    OWNER: Project Manager - Analytics and Informatics Impact Analysis Action Plan                                    OWNER: Architect - AC Review of Contribution Package                                    OWNER: Project Manager - AC Review Action Plan                                    OWNER: Dev Lead - Staging ORB Review                                    OWNER: Operations - Promote Offering to Staging                                    OWNER: Dev Lead - Demo to Sponsors                                    OWNER: Project Manager - Lessons Learned Retrospective                                    OWNER: Security Lead - Complete Secure Engineering Virus Scans (Staging Environment)                                    OWNER: Dev Lead - Release Readiness Review                                    OWNER: Test Lead - Integration Testing                                    OWNER: Operations - External Penetration Testing on Staging                                    OWNER: Security Lead - Gather SecOps Evidence                                    OWNER: Security Lead - Final Health Check Vulnerability Scans                                    OWNER: Dev Lead - Support Training (L1 L2 L3)                                    OWNER: Architect - IBM Cloud Framework Review                                    OWNER: Compliance - HIPAA Evidence Closure                                    OWNER: Compliance - GDPR Evidence Closure                                    OWNER: Compliance - Final Validate Information Gov Catalog                                    OWNER: Dev Lead - Analytics and Informatics Initiate Methodology Guide and White Paper                                    OWNER: Compliance - PSRA Evidence Closure                                    OWNER: Dev Lead - Common Services Readiness Review                                    OWNER: Operations - Operational Readiness Checkpoint                                    OWNER: Architect - Final SPRB Review                                    OWNER: Test Lead - Validate all Data Approvals Received                                    OWNER: Project Manager - Approve Risk Analysis                                    OWNER: Project Manager - Approve Risk Management Report                                    OWNER: Tools Team - Update Tools List and Versions                                    OWNER: Projet Manager - Design Transfer Design Review                                    OWNER: Project Manager - Document and Approve Production Build Standard                                    OWNER: Project Manager - Document and Approve Device Master Record                                    OWNER: Test Lead - Final Review and Approval of Install Verification Protocol Execution Records                                    OWNER: Project Manager - Document and Approve Servicing Work Instructions                                    OWNER: Project Manager - Document and Approve Device History Record                                    OWNER: Project Manager - Document and Approve Design History File                                    OWNER: Tools Team - Final Check - Ensure all tools are assessed                                    OWNER: Dev Lead - Release Readiness Design Review                                    OWNER: Project Manager - Add Client Install to Distribution Log                                    OWNER: Project Manager - Product and Document Identified Risks                                    OWNER: Project Manager - Ensure Suppliers are on Approved Suppliers List                                    OWNER: Operations - Release Stories to Production                                    OWNER: Test Lead - Execute Install Verification Tests                                    OWNER: Operations - Add to Service Catalog                                    OWNER: Operations - Refresh Catalog                                    OWNER: Offering Manager - Launch Readiness                                    OWNER: Operations - Release Stories to Customer                                                          Back to main flow                                    OWNER: Offering Manager - Discuss Portfolio                                    OWNER: Offering Manager - Prioritize Detailed Level Requirements                                    OWNER: Offering Manager - 4 week ask-commit process                    ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/build-and-deliver/index/",
    },
    {
      "title": "Launch Readinesssidebar: om-badbreadcrumb: Launch Readiness",
      "text": "---title: Launch Readinesssidebar: om-badbreadcrumb: Launch Readiness---After your new offering is approved by the MMT, or if youre an offering thats already Generally Available (GA), you will enter a state of perpetual development and design, i.e. ongoing delivery.  Existing Hills will be taken, new ones created, and the cycle will repeat infinitely.  This corresponds to the loops around the [OM wheel](http://calmedia.atlanta.ibm.com/om_academy/process_artifacts.php){:target=_blank}.  Each Hill has a refinement step in the backlog (i.e. Define and Prove) where it gets detailed and validated through market experiments, the decomposed to Epics, and eventually rises to the top of the backlog where it is completed (i.e. Build and Deliver).  All the while, data is gathered from both quantitative sources (financials and usage metrics) and qualitative sources (NPS survey data, customer feedback, user research) to help the OT make smart decisions about what to prioritize next (Sense and Respond).During Build and Deliver, the team sets a milestone schedule and Launch dates after decomposing their Hills into Epics. As you near each release of your offering (Experimental, Beta, GA), you will complete a Launch Readiness Playback with your Offering Team (OT). There is a [Launch Readiness Template](https://apps.na.collabserv.com/files/form/api/library/ad308a7e-2720-48a0-b90a-5c8417db2f99/document/a925ad42-5193-43fd-bb19-d10e9a5d7135/media/Watson%20Health%20Launch%20Readiness%20Playback%20June%202018.pptx){:target=_blank} in Power Point format that can be downloaded, completed, and stored on each OTs wiki. The Offering Team Program Manager (OTPM) will create the deck for the offering and facilitate the review cadence with the OT. The Launch Readiness Playback serves two purposes:1. To Playback the results of the Launch efforts to the broader team, which can be coupled with a [Retrospective](../../dev/agile/play-by-play/retrospectives/)2. To record the decisions, actions, and assets/records in one place that auditors can review as needed.The Launch Readiness is made up of 3 main areas:1. Offering Readiness - Owned by the Release Manager to ensures that all of the Development specific activities are complete. The Release Manager may work with various development functions (Dev Managers, Architects, Documentation, ID) as well as other key functions (Legal, Brand, Pricing, RFA writers, etc) to ensure that the offering itself is ready (Coded, Verified, Validated, Production Ready) and that other Key Deliverables (Legal, Globalization, Accessibility, etc) are complete. The number of additional deliverables will depend on the type of release and the delivery method of the offering. If you are delivering on Bluemix, there are additional requirements from the platform team that must be completed and incorporated into your checklist. The Release Manager hosts their own cadence outside of the OT and manages their squad in GitHub with their own team ceremonies as needed.2. Compliance Readiness - Owned by the Offering Manager and the Compliance team to ensure that the proper activities required by the Watson Health Quality Management System (QMS) have been completed.3. Go To Market (GTM) Readiness - Owned by the Offering Manager. OM will decide based on the scope of the release which GTM items are required and will work together with Sales, Marketing, and other groups to create the assets and communications channels needed. In this way, the OM acts as a decision maker and as a project manager to ensure that we choose the right activities for the launch and that activities get completed at the right time to match the launch dates. They may need to manage the work with their own GTM squad in GitHub with their own team ceremonies as needed to ensure coverage and completion.Sometimes there is cross-over with members of both teams and it makes sense to combine some of the tasks/cadences (especially for smaller releases). Overall, the Launch Plan must include the Offering Readiness and GTM Readiness with collaboration across the OT for the final Launch Readiness Playback.The Sense and Respond part of the OM Wheel should be happening on a continuous basis. The OT should decide which metrics are most important to the Offering and will set up how/when to track them. These metrics are also frequently used for Executive communication. Many do track revenue attainment on the Product Management Dashboard or come up with their own version of a dashboard to track the key metrics that are important to their team.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/build-and-deliver/launch-readiness/",
    },
    {
      "title": "Prioritize Detailed Level Requirementssidebar: om-badbreadcrumb: Prioritize Detailed Requirements",
      "text": "---title: Prioritize Detailed Level Requirementssidebar: om-badbreadcrumb: Prioritize Detailed Requirements---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/build-and-deliver/prioritize-detailed-req/",
    },
    {
      "title": "Project Kick-Offsidebar: om-badbreadcrumb: Project Kick-Off",
      "text": "---title: Project Kick-Offsidebar: om-badbreadcrumb: Project Kick-Off---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/build-and-deliver/project-kick-off/",
    },
    {
      "title": "Submit List of Supplierssidebar: om-badbreadcrumb: Submit List of Suppliers",
      "text": "---title: Submit List of Supplierssidebar: om-badbreadcrumb: Submit List of Suppliers---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/build-and-deliver/submit-list-of-suppliers/",
    },
    {
      "title": "Commitment Pitch Playbacksidebar: om-dapbreadcrumb: Commitment Pitch Playback",
      "text": "---title: Commitment Pitch Playbacksidebar: om-dapbreadcrumb: Commitment Pitch Playback---## What is the Commitment Pitch playback?The Commitment Pitch is a strategic decision checkpoint to decide whether to commit resources required to build and deliver your offering.This step is the end of the Define and Prove workflow that sees the Playback being reviewed by the MMT.#### The Activities during Define and Prove phase are:- Complete detailed offering design, validated by sponsor users and ecosystem.- Create detailed business plan specifying cross-functional investment requirements and revenue / profit expectations by route to market### How do I get started?When you worked on the [select the Commitment Pitch template](../../define-and-prove/add-epics-to-commitment-pitch/) task, you have downloaded the template needed for this playback and, hopefully, you have worked through the various slides.If your offering is a [Common Service](../cs-assessment), you should have downloaded light version of the template.At this point your deck should be ready to be reviewed with your Offering Team (OT) and then the MMT.MMT Possible Decisions Outcomes:- Approve: The Playback checkpoint is approved and the team proceeds with follow on activities. Issues or action items may be identified but the Offering Team does not need additional permission to proceed.- Come back: Offering Leader does not have sufficient information to make a decision or there is disagreement about the approach or design.  Issues or action items must be addressed and information provided back to the Offering Manager and their Offering Leader for an approval decision.  It is assumed that the Offering Team can continue to work on the offering development while the redirect is being addressed, unless directed otherwise.- Suspend: Project is put on hold for a specified period of time as outlined by the Offering Leader. Resources will be redeployed during this time.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/define-and-prove/commitment-pitch-playback/",
    },
    {
      "title": "Create Commitment Pitchsidebar: om-dapbreadcrumb: Create Commitment Pitch",
      "text": "---title: Create Commitment Pitchsidebar: om-dapbreadcrumb: Create Commitment Pitch---## What is the Commitment Pitch?Commitment Pitch is a strategic decision checkpoint to decide whether to commit resources required to build and deliver your offering.The Commitment Pitch includes business information like offering pricing, business case, Go-to-Market consideration as well as the Hills and Epics that will be part of the release being planned.The decision checkpoint will take place with the [Commitment Pitch Playback](../../define-and-prove/commitment-pitch-playback/) being reviewed by the MMT.#### The Activities during Define and Prove phase are:- Complete detailed offering design, validated by sponsor users and ecosystem.- Create detailed business plan specifying cross-functional investment requirements and revenue / profit expectations by route to market### How do I get started?- Templates and training on how to perform the commitment pitch review can be found on [Watson Health OM and Marketing Plan Templates and Training wiki](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wb1d543660cb8_44bc_b34a_efb359fb4b18/page/OM%20and%20Marketing%20Plan%20Templates%20and%20Training){:target=_blank}.    - If your offering is a [Common Service](../cs-assessment), make sure you download the light version of the template.- As you work through the slides make sure that the [Epics developed and prioritized](../../define-and-prove/develop-epics-groom-backlog) are added to the Commitment Pitch deck.  - A view from your Aha! board will work just fine!",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/define-and-prove/create-commitment-pitch/",
    },
    {
      "title": "Create New Hills (OM)sidebar: om-dapbreadcrumb: Create New Hills (OM)",
      "text": "---title: Create New Hills (OM)sidebar: om-dapbreadcrumb: Create New Hills (OM)---## Hill: The big goalContains a who, what, and wow factor. Created in [Aha!](https://watsonhealth.aha.io/){:target=_blank}Hills turn users needs into project goals, helping the team align around a common understanding. Hills arent detailed requirements - theyre statements of intended outcome.Address who the outcome will serve, what they will be enabled to do, and the differentiator that will make this outcome worth the users time.Hills are integral to IBM Design Thinking.  Without Hills as our starting point, we wont be focused on the user, and will fall back into old habits of developing features instead of experiences.Define as many hills as needed, however dividing the squads attention across multiple Hills at once will reduce efficiency and focus.## How do I get started?### Step by step1. working in collaboration with your Design lead, Technical leads, and other stakeholders as needed, define your hills.|                 |               | Insert story content        |  Example   || -------------   | ------------- | --------------------------- | ---------- || Who             | As a...       | [User Archetype]            | As Mary the business owner || What            | I want to...  | [Need]                      | I want to use technology to answer common customer questions || Wow             | so that...    | [Measurable business value] | so that we can reduce calls into customer service by 15% in one year |> As Mary the business owner, I want to use a self-service solution to answer common customer questions, so that we can reduce calls into customer service by 15% in one year.Notice that in the example above, Mary is not the end-user of our offering.  Its important to remember that Hills can apply to any of the users for our offerings -- the end-user, the developer, the business user, IBM partners, and even IBMers that might have a role in implementing an offering for a client.Lets not forget about Technical Foundation. Technical Foundation is not a Hill, but rather an investment made towards development work in support of cross-cutting quality, serviceability, and consumability requirements.For more information on Hills, refer to the [IBM Design Thinking guide](https://www.ibm.com/design/thinking/keys/hills/){:target=_blank}.Also refer to:[Create new Hills (Design)](../../../design/define-and-prove/create-new-hills)[Playback 0 (Design)](../../../design/define-and-prove/playback-0)2. At this time you can add your Hills to Aha! or wait until later in the phase when you will [review and approve the Hills](../../om/define-and-prove/refine-and-approve-hills)    - Navigate to your Product in [Aha!](https://watsonhealth.aha.io/){:target=_blank}    - Click on Strategy -> Hills    - Click on the _Add Hill/Initiatives_ button![Create Hill](https://pages.github.ibm.com/watson-health-playbook/resources/images/aha/aha-create-hill.gif)>ProTip: Assign Hills to the release that lines up with the desired date for the Hill. Remember, a Roadmap is a wish list of things we want to do. The further out your Roadmap goes, the less accurate it becomes.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/define-and-prove/create-new-hills/",
    },
    {
      "title": "Create Release Asksidebar: om-dapbreadcrumb: Create Release Ask",
      "text": "---title: Create Release Asksidebar: om-dapbreadcrumb: Create Release Ask---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/define-and-prove/create-release-ask/",
    },
    {
      "title": "Determine Development Tool Listsidebar: om-dapbreadcrumb: Determine Development Tool List",
      "text": "---title: Determine Development Tool Listsidebar: om-dapbreadcrumb: Determine Development Tool List---## The Software Tools that are used within Watson Health during the production of a Watson Health offering need to be assessed and categorized to demonstrate Watson Health’s commitment to maintaining control over regulated systems.This is achieved through the Master Regulatory Asset Planning (MRAP) process. MRAPs are frequently requested during an audit by regulatory investigators or representatives of clients when performing audits.[Link to WH_QMS_SOP_0023 Master Reg Asset Planning SOP](https://lsgrcoe-csfe-1.ibmcloud.com/OTCS/cs.exe?func=ll&objaction=overview&objid=6417989){:target=_blank}.[The Project Development Plan (PDP)](../../../dev/define-and-prove/create-proj-dev-plan/), developed in collaboration with Design Quality Assurance (DQA), contains the list of the tools that will be used to develop the offering. The MRAP Tools inventory is derived from the PDP, that needs to be completed before the Commitment Pitch Playback (exit of the Define and Prove phase).## How do I get started?### Step by step1. Basing on initial information, start consolidating the list of the Software Tools that will be used.2. Any System Owner, SME(s), Tools Focal, Environment Owners or designee can notify the Validation Team of any new systems that are considered for use at Watson Health and completes an MRAP Tool Request leveraging the [Master Planning GxP Assessment Form](https://lsgrcoe-csfe-1.ibmcloud.com/OTCS/cs.exe?func=ll&objId=6961140&objAction=browse&viewType=1){:target=_blank}    - Before submitting a new request check if the tool has already been assessed. The full list of the tools already assessed and categorized is available [here](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/W6a642739bb36_44d9_90cd_f2ec86efebbe/page/List%20of%20Validated%20Tools){:target=_blank} and is updated periodically. The always up-to date view is available in [RTC](https://ibmwh.clm.ibmcloud.com/ccm/web/projects/WH%20Master%20Regulatory%20Asset%20Planning#action=com.ibm.team.workitem.runSavedQuery&id=_2wUicCTKEeeUhLy26ezHEg){:target=_blank}3. If needed, after the [PDP](../../../dev/define-and-prove/create-proj-dev-plan/) has been finalized, you will complete and submit the assessment form to the Validation Team.Note: tool validation is required if your offering is GxP. The [Offering GxP Assessment Results and whats needed for MRAP](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/W6a642739bb36_44d9_90cd_f2ec86efebbe/page/Offering%20GxP%20Assessment%20Results%20and%20whats%20needed%20for%20MRAP){:target=_blank} wiki page clearly shows the requirement based on the offering GxP assessment:        - GxP (Regulated)        - GxP Lite (May be regulated in the future)        - Non-GxP (Not regulated)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/define-and-prove/determine-dev-tool-list/",
    },
    {
      "title": "Develop Epics and Groom Backlogsidebar: om-dapbreadcrumb: Develop Epics and Groom Backlog",
      "text": "---title: Develop Epics and Groom Backlogsidebar: om-dapbreadcrumb: Develop Epics and Groom Backlog---## Decompose the Hills into EpicsMmm, decompose...sounds pretty gross!  Really its just an Agile term for breaking big things down into smaller things because big things are hard to work on.  Theyre ambiguous and risky.  We dont like risk. The smaller you make a piece of work, the easier it is to complete on time and accurately.Our goal is to decompose work all the way down to stories.  Most of the time, however, its too big of a mental leap to go from the big goal of Hill all the way down to the dozens (or hundreds) of stories it will take to complete a Hill.  To make the process easier, we simply decompose the Hill into slightly smaller units called epics.  If the hill is the big goal, then the epics are the capabilities, behaviors, or user experiences that allow us to reach the goal.  There is no time limit on an epic, but its a good idea to keep them relativity compact, a few sprints, or so.  If it looks like itll take a year to complete an epic, keep decomposing!  You probably have multiple epics masquerading as one.### How do I get started?> Who: Collaboratively by the technical leads, OM and Design are reviewers>Epics follow a similar pattern to Hills, but replace wow with why to give us a who/what/why pattern.  Epics use the standard story format of As a [user archetype], I want [desired experience] so that [why the user cares about the experience/capability].Unlike Hills, Epics arent done with just a who/what/why.A good Epic needs requirements to establish its boundaries (i.e. how we know weve completed the epic).  But we dont want to write our requirements the old-fashioned way, the system shall....  Instead, we want to describe our requirements in a user-centric manner.  This approach has many labels: use cases, user scenarios, behavior driven development, etc.Each technique is slightly different based on its origin, but they all aim to accomplish the same thing. Use the format of your choice, just be sure to write your requirements from the perspective of the user, not the system.Intended Use- Reflective of a scenario- Provides value (what) to the user (who)- Aids in organization & grouping of detailed requirementsRecommended Format: As a WHO I need the ability to [do] WHAT in order to [goal/value] WHY",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/define-and-prove/develop-epics-groom-backlog/",
    },
    {
      "title": "Ensure Data Governance is Understoodsidebar: om-dapbreadcrumb: Ensure Data Governance is Understood",
      "text": "---title: Ensure Data Governance is Understoodsidebar: om-dapbreadcrumb: Ensure Data Governance is Understood---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/define-and-prove/ensure-govern-understood/",
    },
    {
      "title": "Finish GxP Assessmentsidebar: om-dapbreadcrumb: Finish GxP Assessment",
      "text": "---title: Finish GxP Assessmentsidebar: om-dapbreadcrumb: Finish GxP Assessment---## What is the GxP Assessment?The GxP Assessment is used to evaluate an offering to get an understanding of its intended use. This assesment identifies level of regulation required by the offering, whether it is subject to GxP regulations and to determine the Quality Management System (QMS) processes that apply to the offering.The GxP Assessment must be completed and signed before the Commitment Pitch Playback.This way, as the offering enters Build and Deliver, the offering team is aware of the necessary design and development controls.[GxP Assessment SOP can be found here](https://lsgrcoe-csfe-2.ibmcloud.com/OTCS/cs.exe?func=ll&objaction=overview&objid=6646406){:target=_blank}, and the [template can be found here](https://lsgrcoe-csfe-1.ibmcloud.com/OTCS/cs.exe?func=ll&objaction=overview&objid=10614031){:target=_blank}.## How do I get started?## Step by Step1. While in the Market Opportunity phase you should have [started the assessment](../../market-opportunity/start-gxp-assessment): at this point you should have all the details needed to complete it.2. Complete the form and contact the [Regulatory Affair team](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/W6a642739bb36_44d9_90cd_f2ec86efebbe/page/Contact%20Us){:target=_blank}, responsible for the regulatory assessment of the Offering.3. You will submit the form and review it with the Regulatory team - they will advise on the next steps.Note:If you already have a GxP assessment for your offering and you are now going through a Commitment Pitch update for a subsequent release, you still need to update it and send to the Regulatory Affair team for validation.## What to do with it after it is completed?The GxP Assessment is a decision point in the [Aha!](https://watsonhealth.aha.io){:target=_blank} workflow, and the completed assessment record will be placed in [Aha!](https://watsonhealth.aha.io){:target=_blank} at the appropriate step in the workflow.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/define-and-prove/finish-gxp-assessment/",
    },
    {
      "title": "Define and Provesidebar: om-dapbreadcrumb: Define And Prove Tasks (OM)",
      "text": "---title: Define and Provesidebar: om-dapbreadcrumb: Define And Prove Tasks (OM)---# DRAFT (Coming Soon!)Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Define and Prove phase tasks relevant to Offering Management_- _Hover OVER the task to see who OWNS the task_- _Tasks marked with a GxP Only label can be skipped for non-regulated offerings_- _Tasks marked with a CS Only label can be skipped for offerings that are NOT common services_<!--                                                                                                                                        -->                  svg {          background-image: url(https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/flows/vs-define-and-prove-om.jpg);          background-size: 100% 100%;          background-repeat: no-repeat;          max-width: 900px;          width: 90%;        }        path {          fill: transparent;          cursor: pointer;          transition: fill 0.2s;        }        svg a:focus,        svg a:hover {          outline: none;        }        svg a:focus path,        svg a:hover path {          fill: rgba(255,255,0, 0.15);          cursor: pointer;       }                            OWNER: Project Manager - Create Project Development Plan                                    OWNER: Architect - Initial High Level Architecture                                    OWNER: Offering Manager - Start Common Services Definition Package                                    OWNER: Offering Manager - Create New Hills                                    OWNER: Operations - Operational Hello World                                    OWNER: Dev Lead - Document Technical Foundation                                    OWNER: Designer - Document Experience Architecture                                    OWNER: Dev Lead - Apply for slot in CDT Sandbox Environment                                    OWNER: Architect - Begin Solution Architecture                                    OWNER: Offering Manager - Determine Development Tool List                                    OWNER: Designer - Design Wireframe Prototype                                    OWNER: Offering Manager - GDPR Triage                                    OWNER: Offering Manager - Data Access Compliance Board                                    OWNER: Offering Manager - Content Governance Review                                    OWNER: Offering Manager - Data Governance Review                                    OWNER: Offering Manager - HIPAA Assessment                                    OWNER: Offering Manager - Privacy and Security Risk Assessment                                    OWNER: Offering Manager - GDPR Assessment                                    OWNER: Designer - Usability Study and Validate Prototype                                    OWNER: Offering Manager - Finish GxP Assessment                                    OWNER: DQA - Appropriate GxP Level Training                                    OWNER: Offering Manager - Ensure Data Governances is Understood                                    OWNER: Tools V&V Team - Ensure Development Tools are Identified                                    OWNER: Offering Manager - Conduct Tool GxP Assessment                                    OWNER: Offering Manager - Review and Approve Hills                                    OWNER: Offering Manager - Develop Epics and Groom Backlog                                    OWNER: Offering Manager - Refine Epics                                    OWNER: Architect - AC Review                                    OWNER: Release Manager - SRB Engagement Request                                    OWNER: Project Manager - Create Design Planning Review                                    OWNER: Offering Manager - Create Release Ask                                    OWNER: Release Manager - Conditional Commit Release Plan                                    OWNER: Offering Manager -Create Commitment Pitch                                    OWNER: Offering Manager - Playback 0                                    OWNER: Offering Manager - Commitment Pitch Playback                    ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/define-and-prove/index/",
    },
    {
      "title": "Playback 0 (OM)sidebar: om-dapbreadcrumb: Playback 0 (OM)",
      "text": "---title: Playback 0 (OM)sidebar: om-dapbreadcrumb: Playback 0 (OM)---## What is the Playback 0?During the Define and Prove phase OM and Design partner to complete the detailed offering design and validate it with the sponsor users and ecosystem.The goal of the Playback 0 is to help the team decide whether the offering will differentially address the market opportunity based on sponsor user validation.By clearly defining the most important user outcomes in Hills and engaging active sponsor users to validate those outcomes, teams can come together to produce market ready offerings.General guidance is to have a Playback 0 right before the Commitment Pitch Playback, however teams may decide to bring this forward all together including the Playback 0 content into the Commitment Pitch deck.## How do I get started?### Step by step1. The [OM Process & Artifacts] (http://calmedia.atlanta.ibm.com/om_academy/process_artifacts.php) page provides [a template](http://calmedia.atlanta.ibm.com/om_academy/pdf/model/Playback_0_deck.pptx) that also includes guidance.2. The key elements of the Playback 0 that you will develop working primarily with Design and Development are:        1. What the offering is and the intended value for the clients        2. Key User Personas        3. Hills definition and prioritization        4. Experience based roadmap        5. As is and To be (Scenario Mapping)        6. Sponsor user engagement status        7. Early client validation3. Review with the OT, collect feedback and refine4. Present to the MMT prior or together with your Commitment Pitch",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/define-and-prove/playback-0/",
    },
    {
      "title": "Refine Epicssidebar: om-dapbreadcrumb: Refine Epics",
      "text": "---title: Refine Epicssidebar: om-dapbreadcrumb: Refine Epics---## Improve your EpicsOnce the Epics have been developed then iterate on the Epics to make them better and groom them into something usable.## How do I get started?Review the Epics with the stakeholders and incorporate their feedback.When satisfied you can proceed with Adding Epics to your Hills in Aha!> Who: Offering Manager- Navigate to your Hill in Aha!- Click on Details- Click the (+) button next to _Epics_![Aha - Create Epic Under Hill](https://pages.github.ibm.com/watson-health-playbook/resources/images/aha/aha-create-epic-under-hill.gif)>ProTips:> - Always create Epics as children of a Hill, this will make it easier to find.> - Assign Epics to the milestone that lines up with the desired date for the Epic. Remember, a Roadmap is a wish list of things we want to do. The further out your Roadmap goes, the less accurate it becomes.> - The Create Epic dialog has a handy Create Epic & Add Another button that makes it fast to create a number of Epics that all roll up to the same Hill.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/define-and-prove/refine-epics/",
    },
    {
      "title": "Review and Approve Hillssidebar: om-dapbreadcrumb: Review and Approve Hills",
      "text": "---title: Review and Approve Hillssidebar: om-dapbreadcrumb: Review and Approve Hills---## As previously said, the Hill is the big goal. It contains a who, what, and wow factor and is created in [Aha!](https://watsonhealth.aha.io/){:target=_blank}## How do I get started?### Step by step1. Earlier in this phase you have collaborated with your Design lead, Technical leads, and other stakeholders as needed, and [created your hills](../../om/define-and-prove/create-new-hills).2. At this time, make sure that the Hills previously defined are still valid and, if needed, refine them.3. Obtain buy in from the Stakeholders and review the Hills with the OT.4. Then, add your Hills to Aha!    - Navigate to your Product in [Aha!](https://watsonhealth.aha.io/){:target=_blank}    - Click on Strategy -> Hills    - Click on the _Add Hill/Initiatives_ button![Create Hill](https://pages.github.ibm.com/watson-health-playbook/resources/images/aha/aha-create-hill.gif)>ProTip: Assign Hills to the release that lines up with the desired date for the Hill. Remember, a Roadmap is a wish list of things we want to do. The further out your Roadmap goes, the less accurate it becomes.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/define-and-prove/review-and-approve-hills/",
    },
    {
      "title": "Start Common Services Definition Packagesidebar: om-dapbreadcrumb: Start CS Definition Package",
      "text": "---title: Start Common Services Definition Packagesidebar: om-dapbreadcrumb: Start CS Definition Package---## My offering will be a WH Common Service, but what is the Definition Package?The [Definition Package](../../../dev/common-services/definition-process/#definition-package-content) is a checklist of input documentation, requirements and other artifacts needed by the [WH Common Services Definition Process](../../../dev/common-services/definition-process/) as part of the minimum set of information needed to successfully complete a review of the viability and business need of a service.While the creation of the [Definition Package](../../../dev/common-services/definition-process/#definition-package-content) is a step in the full Watson Health Development process, and therefore is a required artifact, the details for the [WH Common Services supplemental process](../../../dev/common-services/) should be examined.## How do I get started?To begin the process of Definition Package evaluation, please follow the [Submitting a Common Service Proposal for Evaluation](https://watsonhealth.aha.io/products/WHXSEG/pages/WHXSEG-N-1){:target=_blank} process. This will show you how to create an idea in Aha! and attach your Definition Package to it and initiate the evaluation process.### Step by step1. Start by downloading the [Definition Package template]() and fill it in with as much details as you can, making sure you change the file name to replace Service Name with your Common Service name.2. Then follow the instructions on how to create an “idea” in Aha! and attach your Definition Package to it and initiate the evaluation process.3. Click on the + in the top right4. Select Idea5. Navigate down to Watson Health Cross-Segment MMT - Evaluation Squad.  Select the squad that will need to evaluate the proposal.  If in doubt, select General.Select the following fields:    - Offering:  Select the squad which to which idea should be submitted    - Summary: Name of the common service    - Description: Brief description of the common service    - Categories: [Leave blank]    - Org Name and ID: None    - Market Segment: WH Cross Segment    - Type of Request: Other (To be changed to: Common Service Evaluation)    - Market Opportunity: Type in some text like See Files.  Then click Attach files and upload the definition package.  (Provide the Links)6. Click Create idea. ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/define-and-prove/start-cs-def-package/",
    },
    {
      "title": "Conduct Tool GxP Assessmentsidebar: om-dapbreadcrumb: Tool GxP Assessment",
      "text": "---title: Conduct Tool GxP Assessmentsidebar: om-dapbreadcrumb: Tool GxP Assessment---This task is required if your offering is GxP.Watson Health offerings that have been classified as Medical Device are subject to applicable industry regulations (e.g FDA, EMA).- Software tools used to Build, Develop or Test these types of regulated Watson Health Offerings, are required to be validated for their intended use.- Software tools used for the implementation of the WH QMS (e.g software that records and maintains the device history record)  are also required to be validated.## How do I get started?At the beginning of this phase you have started to [determine the list of tools](../../../dev/define-and-prove/determine-dev-tool-list/) and conducted a GxP assessment for your offering.You then need to make sure that the tool(s) being used have been validated for use in a GxP environment based on the intended use.- The [Offering GxP Assessment Results and whats needed for MRAP](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/W6a642739bb36_44d9_90cd_f2ec86efebbe/page/Offering%20GxP%20Assessment%20Results%20and%20whats%20needed%20for%20MRAP) wiki page clearly shows the requirement based on the offering GxP assessment:    - GxP (Regulated)    - GxP Lite (May be regulated in the future)    - Non-GxP (Not regulated)### Step by step1. Start with reviewing the list of Validated Tools    - A list of validated Software Tools and the status of tools that have yet to be assessed or tools where validation is in process is available [here](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/W6a642739bb36_44d9_90cd_f2ec86efebbe/page/List%20of%20Validated%20Tools){:target=_blank}.    - The above list is periodically update, however the always up-to date view is available in [RTC](https://ibmwh.clm.ibmcloud.com/ccm/web/projects/WH%20Master%20Regulatory%20Asset%20Planning#action=com.ibm.team.workitem.runSavedQuery&id=_2wUicCTKEeeUhLy26ezHEg){:target=_blank}2. RTC Tool Request -  If a tool is not is not listed in RTC (as a Validated Tool or Validation Not Needed tool), then a [Tools Request](https://ibmwh.clm.ibmcloud.com/ccm/web/projects/WH%20Master%20Regulatory%20Asset%20Planning#action=com.ibm.team.workitem.runSavedQuery&id=_2wUicCTKEeeUhLy26ezHEg){:target=_blank} must be submitted to request an assessment on the tool, typically by an individual on a project/offering team.    - From the RTC action bar select Work Items and then Welcome to Work Items    - Clicking on Create a work item will open the MRAP Tool Request form    - Fill out the 3 sections of the form: Intended Use, Business Justification and Detailed Tool Description    - Save    - The Tools Validation Team reviews the Tool Request, works with the Requestor and determines whether the tool should proceed to the Validation Assess phase.3. RTC Tool Record - An RTC Tool Record is created by the Tools Validation Team after the RTC Tool Request is approved.  The Tool GxP Assessment is then completed by the Tools Validation Team to determine GxP applicability and if a validation exercise is required for the submitted tool.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/define-and-prove/tool-gxp-assessment/",
    },
    {
      "title": "Analytics Assessmentsidebar: om-moabreadcrumb: Analytics Assessment",
      "text": "---title: Analytics Assessmentsidebar: om-moabreadcrumb: Analytics Assessment---## What is the GxP Assessment?In order to properly size the Analytics requirements and incorporate these into the [Market Opportunity Playback](../../../dev/market-opportunity/market-opportunity-playback) presentation, an assessment of these needs will be required.## How do I get started with this?### Step by StepThere is a [sizing spreadsheet]() which should be used to assess this impact. The outcome of this assessment should be added to this process step in the workflow, since it will need to be incorporated later into the [Market Opportunity Playback](../../../dev/market-opportunity/market-opportunity-playback) presentation.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/market-opportunity/analytics-assessment/",
    },
    {
      "title": "Identify IBM Cloud Migration Patternsidebar: om-moabreadcrumb: Cloud Migration",
      "text": "---title: Identify IBM Cloud Migration Patternsidebar: om-moabreadcrumb: Cloud Migration---## What is IBM Cloud Migration patternIt is important to understand at the beginning of a project what kind of support will be required for an offering when it is to be deployed into the IBM Cloud. There are several patterns to choose from, and generally the pattern you choose will have everything to do with whether or not this is a new offering, or an offering existing elsewhere and needs some strategy to get it moved to the IBM Cloud.## How do I get started?### Step by Step1. Details on the current patterns can be found in the [Watson Health Cloud Transformation CoC Guild](../../../dev/cloud-trans-guild/cloud-transformation/).2. Examine the patterns in the guild listed above, and choose the correct pattern from the list of accepted patterns in the [Aha!](https://watsonhealth.aha.io){:target=_blank} workflow. Justification for this choice must also be given since this will be documented as a key Architectural Decision later on in the [Define and Prove](../../market-opportunity/define-and-prove/) phase.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/market-opportunity/cloud-pattern/",
    },
    {
      "title": "Common Services Assessmentsidebar: om-moabreadcrumb: Common Services Assessment",
      "text": "---title: Common Services Assessmentsidebar: om-moabreadcrumb: Common Services Assessment---## What is the Common Services Assessment?When starting a new offering, some work should be done to evaluate whether or not the offering will be offered up as a Watson Health Common Service. This is important since if the answer is Yes then additional steps designed to take into consideration the special concerns for [Common Services](../../../dev/common-services/) will need to be added to the [Watson Health Development process](../../../dev/).## How I get started with this?### Step by StepIn [Aha!](https://watsonhealth.aha.io){:target=_blank} one of the workflow steps will be to choose if this service is a Watson Health Common Service (its a yes or no question), therefore there is nothing special you need to do other than be aware of the question and answer it appropriately. Answering yes to this question will add the Common Service process steps into your [Aha!](https://watsonhealth.aha.io){:target=_blank} and Jira workflows.These new steps are summarized in the [Watson Health Common Services Guild Guide](../../../dev/common-services/).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/market-opportunity/cs-assessment/",
    },
    {
      "title": "Identify Sponsor Userssidebar: om-moabreadcrumb: Identify Sponsor Users",
      "text": "---title: Identify Sponsor Userssidebar: om-moabreadcrumb: Identify Sponsor Users---## What are Sponsor Users?Sponsor Users are individuals who are existing or prospective IBM customers who are the experts in the area of an IBM product. Sponsor Users help teams close the gap between teams’ assumptions and the user’s reality. In the case of Power, a Sponsor User could be, among many other roles, anyone from a System Administrator to an IT Manager to an application developer. Sponsor Users give feedback to product teams on a regular basis as the team is realizing the product that one day the Sponsor User herself will likely use.The Sponsor User is a co-creator with a product team, and actively influences the direction of the product’s development, making sure that the product team is staying true to her needs. The Sponsor User often gets to see everything from early draft concepts, help the product team prioritize ideas, see low-, mid- and high-fidelity versions of the product, and often gets access to early code. Additionally, Sponsor Users who were actively engaged through the process are acknowledged in the final deliverable.### How do I get startedTo learn more about the anatomy of a Sponsor User and how to best collaborate, visit the [Enterprise Design Thinking page](https://www.ibm.com/design/thinking/page/framework/keys/sponsor-users){:target=_blank}.### Working with Sponsor usersSponsor User relationships are owned by Offering Management and Design, but it’s worth connecting with your Sales and Marketing teams to provide candidates.While Sponsor Users don’t replace formal design research and usability studies, every interaction you have with them will close the gap between your assumptions and their reality. Treat them as a part of the team. As collaborators, they’ll leave a significant mark on the project.To be representative of your intended user and to be invested in the outcome, here are two sources of potential sponsor users:Build on Existing Customer RelationshipsEngaging with existing customers enables us to gain feedback on active users of the system (sense and respond) as well as provide more support and attention to the customer. As the design researchers usually spend a lot of time listening to the customers, we got a great amount of positive feedback from customers engaging in the program.Feed from the pipeline of potential customersIf no customers are yet available or the existing customers are not interested in participating in the Sponsor User Program, another opportunity is to engage with potential customers in the sales pipeline of product the team. Due to the new status of the relationship with the customer, initially this engagement might be lower touch than with existing customer, but yet again, can help the customer understand that we are truly interested in solving their users issues by listening and shadowing their users. Eventually leading to a more ongoing sponsor user engagement.### How do I get started### Step by StepThis checklist will help you set the foundations for a successful and perdurable Sponsor User Program (SUP).1. Identify the key actors (OM, Design Researcher, Design Lead, Implementation Manager _(if applicable)_)2. Identify the intended users: What are we looking for in a Sponsor User? (OM and Design Researcher)3. Identify the potential Sponsor User Organizations (OM, Sales and Design Researcher)4. Schedule an introductory call with the client to present the Sponsor User Program (OM or Design Researcher)5. Get Sponsor User to sign Sponsor User Agreement (if existing customer, this might be covered by contract)6. Identify a gate keeper for this SUP: A team member responsible for managing the engagement with the Sponsor User to make sure we present a unified and non-overwhelming engagement with them (OM or Design Researcher)7. Schedule first engagement (on-site or remote). This can be aligned with an already planner engagement by OM, Sales, or others, or it can be independently planned to match the product development time-line.8. Document insights and engagements so that future engagements can be informed and build upon the knowledge we have already gathered.![SUP - Who does What](https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/dap/su-who-does-what.jpg)### What do I do with this?The list of Sponsor Users will be included in the [Market Opportunity Playback](../../market-opportunity/market-opportunity-playback/).As you progress through Define and Prove, the information on Sponsor Users and their feedback will be incorporated into [Playback 0](../../define-and-prove/playback-0/) and the [Commitment Pitch Playback](../../define-and-prove/commitment-pitch-playback).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/market-opportunity/identify-sponsor-users/",
    },
    {
      "title": "Market Opportunity and Approachsidebar: om-moabreadcrumb: Market Opportunity Tasks (OM)",
      "text": "---title: Market Opportunity and Approachsidebar: om-moabreadcrumb: Market Opportunity Tasks (OM)---Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Market Opportunity and Approach phase tasks relevant to Offering Management_- _Hover OVER the task to see who OWNS the task_- _Tasks marked with a GxP Only label can be skipped for non-regulated offerings_- _Tasks marked with a CS Only label can be skipped for offerings that are NOT common services_<!--                                        -->                  svg {          background-image: url(https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/flows/vs-market-opportunity-om.jpg);          background-size: 100% 100%;          background-repeat: no-repeat;          max-width: 900px;          width: 90%;        }        path {          fill: transparent;          cursor: pointer;          transition: fill 0.2s;        }        svg a:focus,        svg a:hover {          outline: none;        }        svg a:focus path,        svg a:hover path {          fill: rgba(255,255,0, 0.15);          cursor: pointer;       }                            OWNER: Offering Manager - Process and Tool Onboarding                                    OWNER: Offering Manager - Review Market Analysis and Prioritize                                    OWNER: Offering Manager - Review Market Analysis and Prioritize                                    OWNER: Offering Manager - Common Services                                    OWNER: Compliance Lead - Open New Documentation Project                                    OWNER: Offering Manager - Identify IBM Cloud Migration Pattern                                    OWNER: Project Manager - ICTQ                                    OWNER: Offering Manager - Start GxP Assessment                                    OWNER: Design Lead - Concept Car                                    OWNER: Offering Manager - Identify Sponsor Users                                    OWNER: Offering Manager - Market Opportunity Playback                                    OWNER: Offering Manager - Use OMD Light Template                    ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/market-opportunity/index/",
    },
    {
      "title": "Market Opportunity Playbacksidebar: om-moabreadcrumb: Market Opportunity Playback",
      "text": "---title: Market Opportunity Playbacksidebar: om-moabreadcrumb: Market Opportunity Playback---## What is the Market Opportunity playback?Market Opportunity is a strategic decision that helps the team decide if IBM’s unique POV on market potential justifies committing additional time and resources to design offering and develop business plan.This step is the end of the Market Opportunity workflow that sees the Playback being reviewed by the MMT.#### The Activities during Market Opportunity phase are:- Develop IBM’s proprietary point of view on market segment needs, disruptive trends, and competitor positioning.- Define potential offering(s) at concept level to address market opportunity### How do I get started?### Step by Step1. During the [Review Market Opportunity and Prioritize](../../market-opportunity/review-ma-prioritize/) task, you have downloaded the template needed for this playback and, hopefully, you have worked through the various slides.    - If your offering is a [Common Service](../cs-assessment), you should have downloaded light version of the template.2. At this point your deck should be ready to be reviewed with your Offering Team (OT) and then the MMT.MMT Possible Decisions Outcomes:- Approve: The Playback checkpoint is approved and the team proceeds with follow on activities. Issues or action items may be identified but the Offering Team does not need additional permission to proceed.- Come back: Offering Leader does not have sufficient information to make a decision or there is disagreement about the approach or design.  Issues or action items must be addressed and information provided back to the Offering Manager and their Offering Leader for an approval decision.  It is assumed that the Offering Team can continue to work on the offering development while the redirect is being addressed, unless directed otherwise.- Suspend: Project is put on hold for a specified period of time as outlined by the Offering Leader. Resources will be redeployed during this time.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/market-opportunity/market-opportunity-playback/",
    },
    {
      "title": "Review Market Opportunity and Prioritizesidebar: om-moabreadcrumb: Review and Prioritize",
      "text": "---title: Review Market Opportunity and Prioritizesidebar: om-moabreadcrumb: Review and Prioritize---## Market Opportunity KickoffThis is the beginning of the Market Opportunity workflow which encompasses all the activities needed for the [Market Opportunity Playback](../../market-opportunity/market-opportunity-playback/) with your MMT.- This checkpoint is required for new offerings.- For existing offerings the Market Opportunity Playback is optional    - If the capabilities you are introducing have an impact on the Market Opportunity considerations, you can either take to the MMT an updated Market Opportunity Playback OR incorporate those changes into the Commitment Pitch Playback, part of [Define and Prove](../../define-and-prove)## How do I get started?### Step by step> If your offering is new to Aha! then start here: [Planning and Tracking Work - Getting Organized](../../../dev/planning-and-tracking-work/getting-organized)1. If you havent already done so, start by creating a release for your offering in [Aha!](https://watsonhealth.aha.io){:target=_blank}, adjusting the duration of the various tasks as needed. ([How To Video](https://pages.github.ibm.com/watson-health-playbook/resources/videos/CreatingaReleaseinAhawithPhaseTodos.mp4){:target=_blank})    - Note: As you create the release you will have to select the appropriate [Aha!](https://watsonhealth.aha.io){:target=_blank} template which includes a checklist with the necessary to-dos that you will need to complete.2. Now that the release is set up, the Gantt chart will show the Onboard Project Offering Tasks as the first task to tackle. Select it and go through the to-dos:    - Submit Request for New Offering Setup ([Aha!](https://watsonhealth.aha.io){:target=_blank}, Jira, Confluence)    - Submit users requests as needed    - Note: While a release needs to be created each time, this Onboard step needs to be done only the first time you create the release for a new offering. When adding subsequent releases for an existing offering you can skip this task, unless additional users need access.3. Next select the Market Opportunity Approach Gantt chart and click on Review Market Analysis and Prioritize. ([How To Video](https://pages.github.ibm.com/watson-health-playbook/resources/videos/WorkingthroughMarketOpportunityandApproachinAhawithConfluence.mp4){:target=_blank}) - this video also shows how to create a Confluence Space.    - Templates and training on how to perform the market opportunity review can be found on [Watson Health OM and Marketing Plan Templates and Training wiki](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wb1d543660cb8_44bc_b34a_efb359fb4b18/page/OM%20and%20Marketing%20Plan%20Templates%20and%20Training){:target=_blank}.    - Download the latest template from the wiki, save it with a meaningful name and upload it into Confluence. Confluence has version control: next time you upload, it will save the file as a new version.    - When completed, this deck will be used to review the [Market Opportunity Playback](../../market-opportunity/market-opportunity-playback) with the MMT.    - If your offering is a [Common Service](../cs-assessment), make sure you select the appropriate template.    - Typically the Market Opportunity Playback is not needed for subsequent releases of an existing offering, in which case in [Aha!](https://watsonhealth.aha.io){:target=_blank} you can mark this step as not required.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/market-opportunity/review-ma-prioritize/",
    },
    {
      "title": "Start Recording GxP Assessmentsidebar: om-moabreadcrumb: GxP Assessment",
      "text": "---title: Start Recording GxP Assessmentsidebar: om-moabreadcrumb: GxP Assessment---## What is the GxP Assessment?The GxP Assessment is used to evaluate an offering to get an understanding of its intended use. This assesment identifies level of regulation required by the offering, whether it is subject to GxP regulations and to determine the Quality Management System (QMS) processes that apply to the offering.[GxP Assessment SOP can be found here](https://lsgrcoe-csfe-2.ibmcloud.com/OTCS/cs.exe?func=ll&objaction=overview&objid=6646406){:target=_blank}, and the [template can be found here](https://lsgrcoe-csfe-1.ibmcloud.com/OTCS/cs.exe?func=ll&objaction=overview&objid=10614031){:target=_blank}.## How do I get started?### Step by Step1. Download the latest template from the link above.    - At this phase, you are just beginning to draft the GxP Assessment as you may not know all the details needed to complete it.    - The GxP Assessment must be completed and signed before the Commitment Pitch Playback (Define and Prove phase), before the offering enters Build and Deliver, to ensure that the appropriate design and development planning begins at the start of Build and Deliver.        - Individuals from within Quality and Regulatory team are responsible for the regulatory assessment of the Offering.2. The GxP Assessment is a decision point in the [Aha!](https://watsonhealth.aha.io){:target=_blank} workflow, and the completed assessment record will be placed in [Aha!](https://watsonhealth.aha.io){:target=_blank} at the appropriate step in the workflow.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/market-opportunity/start-gxp-assessment/",
    },
    {
      "title": "Assess Promotional Materialssidebar: om-sarbreadcrumb: Assess Promotional Materials",
      "text": "---title: Assess Promotional Materialssidebar: om-sarbreadcrumb: Assess Promotional Materials---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/sense-and-respond/assess-promotional-materials/",
    },
    {
      "title": "Enhance or Adapt Offeringsidebar: om-sarbreadcrumb: Enhance or Adapt Offering",
      "text": "---title: Enhance or Adapt Offeringsidebar: om-sarbreadcrumb: Enhance or Adapt Offering---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/sense-and-respond/enhance-or-adapt-offering/",
    },
    {
      "title": "Ensure Usage / Adoption (part 1)sidebar: om-sarbreadcrumb: Ensure Usage and Adoption (part 1)",
      "text": "---title: Ensure Usage / Adoption (part 1)sidebar: om-sarbreadcrumb: Ensure Usage and Adoption (part 1)---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/sense-and-respond/ensure-usage-adoption-part-1/",
    },
    {
      "title": "Ensure Usage / Adoption (part 2)sidebar: om-sarbreadcrumb: Ensure Usage and Adoption (part 2)",
      "text": "---title: Ensure Usage / Adoption (part 2)sidebar: om-sarbreadcrumb: Ensure Usage and Adoption (part 2)---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/sense-and-respond/ensure-usage-adoption-part-2/",
    },
    {
      "title": "Gather User Feedback and NPS Survey / Interviewssidebar: om-sarbreadcrumb: Gather User Feedback",
      "text": "---title: Gather User Feedback and NPS Survey / Interviewssidebar: om-sarbreadcrumb: Gather User Feedback---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/sense-and-respond/gather-user-feedback-nps-survey/",
    },
    {
      "title": "Sense and Respondsidebar: om-sarbreadcrumb: Sense and Respond Tasks (OM)",
      "text": "---title: Sense and Respondsidebar: om-sarbreadcrumb: Sense and Respond Tasks (OM)---# DRAFT (Coming Soon!)Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Sense and Respond phase tasks relevant to Offering Management_- _Hover OVER the task to see who OWNS the task_- _Tasks marked with a GxP Only label can be skipped for non-regulated offerings_- _Tasks marked with a CS Only label can be skipped for offerings that are NOT common services_                  svg {          background-image: url(https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/flows/vs-sense-and-respond-om.jpg);          background-size: 100% 100%;          background-repeat: no-repeat;          max-width: 900px;          width: 90%;        }        path {          fill: transparent;          cursor: pointer;          transition: fill 0.2s;        }        svg a:focus,        svg a:hover {          outline: none;        }        svg a:focus path,        svg a:hover path {          fill: rgba(255,255,0, 0.15);          cursor: pointer;       }                            OWNER: Offering Manager - Ensure Usage - Adoption                                    OWNER: Dev Lead -  L1 / L2 / L3 Support                                    OWNER: Offering Manager - Gather User Feedback and NPS Survey / Interviews                                    OWNER: Offering Manager - Enhance or Adapt Offering                                    OWNER: Offering Manager - Re-Evaluate offering as a Common Service                                    OWNER: Offering Manager - Assess Promotional Materials                                    OWNER: Offering Manager - Release Promotional Materials                                    OWNER: Offering Manager - Ensure Usage / Adoption                    ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/sense-and-respond/index/",
    },
    {
      "title": "Re-evaluate offering as a Common Servicesidebar: om-sarbreadcrumb: Re-evaluate offering as a Common Service",
      "text": "---title: Re-evaluate offering as a Common Servicesidebar: om-sarbreadcrumb: Re-evaluate offering as a Common Service---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/sense-and-respond/re-evaluate-offering-as-a-common-service/",
    },
    {
      "title": "Release Promotional Materialssidebar: om-sarbreadcrumb: Release Promotional Materials",
      "text": "---title: Release Promotional Materialssidebar: om-sarbreadcrumb: Release Promotional Materials---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/om/sense-and-respond/release-promotional-materials/",
    },
    {
      "title": "Boo! I’m a Secret Page!",
      "text": "---title: Boo! I’m a Secret Page!---Youre not supposed to know about me. Sneaky, sneaky!",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/secret/boo/",
    },
    {
      "title": "sidebar: breadcrumb: ",
      "text": "---title: sidebar: breadcrumb: ---## ## How do I get started?### Step by step",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/secret/task_template/",
    },
    {
      "title": "Watson Health sidebar: defaultbreadcrumb:  Home",
      "text": "---title: Watson Health sidebar: defaultbreadcrumb:  Home---## How To - template{% include banners-3-col-with-images.html    b1_title=Market Opportunity & Approach    b1_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/design-guide-black.png    b1_button=Learn More    b1_link=/template/market-opportunity/    b2_title=Define & Prove    b2_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/tribe.png    b2_button=Learn More    b2_link=/template/define-and-prove/    b3_title=Build & Deliver    b3_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/map-128.svg    b3_button=Learn More    b3_link=/template/build-and-deliver/%}{% include banners-3-col-with-images.html    b1_title=Sense & Respond    b1_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/hills_24.svg    b1_button=Learn More    b1_link=/template/sense-and-respond/    b2_title=template TBD    b2_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/who-we-are.svg    b2_img_size=26px    b2_button=Learn More    b2_link=/template/tbd/    b3_title=template TBD    b3_img=https://pages.github.ibm.com/watson-health-playbook/resources/images/homepage/who-we-are.svg    b3_img_size=26px    b3_button=Learn More    b3_link=/template/tbd/%}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/secret/template/index/",
    },
    {
      "title": "template Guildsidebar: templatebreadcrumb: template Guild",
      "text": "---title: template Guildsidebar: templatebreadcrumb: template Guild---## TBD",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/secret/template/tbd/",
    },
    {
      "title": "Build and Deliversidebar: defaultbreadcrumb: Build And Deliver Tasks (template)",
      "text": "---title: Build and Deliversidebar: defaultbreadcrumb: Build And Deliver Tasks (template)---# COMING SOON!",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/secret/template/build-and-deliver/index/",
    },
    {
      "title": "Define and Provesidebar: defaultbreadcrumb: Define And Prove Tasks (template)",
      "text": "---title: Define and Provesidebar: defaultbreadcrumb: Define And Prove Tasks (template)---# COMING SOON!",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/secret/template/define-and-prove/index/",
    },
    {
      "title": "Market Opportunity and Approachsidebar: templatebreadcrumb: Market Opportunity Tasks (template)",
      "text": "---title: Market Opportunity and Approachsidebar: templatebreadcrumb: Market Opportunity Tasks (template)---# COMING SOON!",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/secret/template/market-opportunity/index/",
    },
    {
      "title": "Sense and Respondsidebar: defaultbreadcrumb: Sense And Respond Tasks (template)",
      "text": "---title: Sense and Respondsidebar: defaultbreadcrumb: Sense And Respond Tasks (template)---# COMING SOON!",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/secret/template/sense-and-respond/index/",
    },
    {
      "title": "Market Opportunity and Approachsidebar: om-moabreadcrumb: Market Opportunity Tasks (OM)",
      "text": "---title: Market Opportunity and Approachsidebar: om-moabreadcrumb: Market Opportunity Tasks (OM)---Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Market Opportunity and Approach phase tasks relevant to Offering Management_- _Hover OVER the task to see who OWNS the task_## SVG TEST                  svg {          background-image: url(https://pages.github.ibm.com/watson-health-playbook/resources/images/vs/flows/vs-market-opportunity-om.jpg);          background-size: 100% 100%;          background-repeat: no-repeat;          max-width: 900px;        }        path {          fill: transparent;          cursor: pointer;          transition: fill 0.2s        }        svg a:focus,        svg a:hover {          outline: none;        }        svg a:focus path,        svg a:hover path {          fill: rgba(255,255,0, 0.15);          cursor: pointer;       }                            SNAP TEST                                    OWNER: Offering Manager - Process and Tool Onboarding                                    OWNER: Offering Manager - Review Market Analysis and Prioritize                                    OWNER: Offering Manager - Review Market Analysis and Prioritize                                    OWNER: Offering Manager - Common Services                                    OWNER: Compliance Lead - Open New Documentation Project                                    OWNER: Offering Manager - Identify IBM Cloud Migration Pattern                                    OWNER: Project Manager - ICTQ                                    OWNER: Offering Manager - Start GxP Assessment                                    OWNER: Design Lead - Concept Car                                    OWNER: Offering Manager - Identify Sponsor Users                                    OWNER: Offering Manager - Market Opportunity Playback                                                  OWNER: Offering Manager - Use OMD Light Template                    ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/secret/test/test_map/",
    },
    {
      "title": "Market Opportunity and Approachsidebar: om-moabreadcrumb: Market Opportunity Tasks (OM)",
      "text": "---title: Market Opportunity and Approachsidebar: om-moabreadcrumb: Market Opportunity Tasks (OM)---Process Flow------------- _Click on a task in the flow for details_- _BLUE colored shapes are Market Opportunity and Approach phase tasks relevant to Offering Management_- _Hover OVER the task to see who OWNS the task_                                                ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/secret/test/test_snap/",
    },
    {
      "title": "Hosting Events",
      "text": "---title: Hosting Events---So, youre going to hold an event. This page is a collection of things weve found helpful when running events around the Watson Universe...OutcomeBefore you start planning for an event, stop and ask yourself if you even need it. Why are you holding the event? What outcome are you trying to achieve? Teach people something? Change the way a team works? Increase Unit Test Coverage? Figure that out first before you do anything else. Events are expensive from a resource perspective, make sure that the outcome will benefit everyone that attends.PlanningOnce I understand the outcome I want to achieve, I break it down into topics that will help achieve that.  I do this fast and low tech. Sticky notes and whiteboards. One sticky note per hour, draw a few quick columns, and start mapping out the day(s). Edit, edit, edit. Work on limiting yourself.Everyone that attends your event is a human being and as such, needs downtime.  Much more than youd think. Based on feedback Ive gotten, 30 mins in the morning, 45 mins for lunch, 30 mins in the afternoon. Dont punish anyone for having to get up and briefly leave. Dont lock the doors. People need to feel free to come and go, tell them that.You should make sure you have proper buy-in so that people can attend your event without their day job interfering. Also, think about holidays and vacations! Work around these things.Buy-inNow that youve figured out an agenda that will achieve the desired outcome, you need buy-in from leadership. Not yours, leadership from each of your attendees should provide support for their people to attend without having to duck out for meetings. Ask managers to send a note that says something like This is important, cancel or reschedule any meetings you might have during the event, we want you to be able to fully participate.WhoBottom line, you want the whole team involved with most kinds of events. Have you only invited Engineering? Did you invite specialists in OM? Ops? Design? Have you excluded anyone by band? Not all change comes from above, most revolutions start from below, dont forget to include those that might not normally get a seat at the table.Web ConferencesFace to face communication works far better than anything else. Weve all been on countless remote meetings where ten minutes or more is wasted on trying to get a web conference running. Dont waste peoples time.If you absolutely MUST have a remote web conference, book yourself and any presenters into a pre-meeting 30 minutes before the web conference to get set up and work through any kinks. People should be able to dial in, hit the conference and see the title slide / screen the moment youre scheduled to start.RoomsBooking a room is usually just a matter of using the Find Rooms option in your calendar. Some rooms are managed by people that approve the use of your room.All of the labs have a variety of room types; classrooms, conference rooms, all hands rooms and more.Littleton- If youre going to use one of the all hands rooms in Littleton, MA, you have to open a work ticket (http://ibm.biz/workticket){:target=_blank} _after you reserve the room_ to specify what room layout you want.- A1407 is the large all hands room- A1409 is the smaller all hands room- A1611/12/16/17 are the training roomsWhenIf youve traveled to a location, remember that the people coming to your event live there. As such you should remember that people have lives, horrible commutes, need coffee, etc.- Schedule your event to start at 9AM, but plan for a 9:20AM start.- Schedule your event to end at 5PM but plan for a 4:30 stop.Bake that into your schedule.InvitationsUse an inviter. Event Central is the main one I use. Its not incredibly intuitive but it gets the job done. The single biggest confusing thing that confused me at first is that an Event is really more like a Series of events. You create an Event like CodeRetreat and then add Sessions in that event. The session invites are what you send out. Heres a quick step by step:- [Go to Event Central](https://learn.atlanta.ibm.com/ec/){:target=_blank}- Create a New Event- Once youve created an event, click Schedule and then click By Date- Now you can create a session for your event by clicking the New Session buttonTo send out invites, do the following:- Click on your Session- Click Inviter Options- Click Share Link- Copy the second link in the dialog (this will auto-enroll users)- Paste that link into your mass mailing/blog post/etcContent- Less is more. Keep your slides simple and clean. Follow [Guy Kawasackis 10/20/30 rule for slides](http://guykawasaki.com/the_102030_rule/)- Dont put up an Agenda slide - you want to surprise and delight your audience - dont preview what youre going to talk about- In a multi-day session, dont have a presentation about what the other presentations are going to be about.Prepare & PracticeTalking to slides? Run through your pitch every day on the way to work for at least a week.Doing a demo? Run through it at least 10 times before.- Have screenshots as backup for those days that the system/network/internet explodesEnergyYou are putting on an event, an event! You need to keep the energy going in the room. Keep them awake, alert and excited! You need to show them how much youre excited and be bigger than life.That being said, be aware that too much enthusiasm can be off-putting. Remember to look around the room for someone that gets it and pull them into your presentation.RetrospectiveAlways hold a Retrospective at the end of your event. Use the feedback to make the next one better.Never run a [Retrospective](../dev/agile/play-by-play/retrospectives/)?",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/support/hosting-events/",
    },
    {
      "title": "IBM Guidelines",
      "text": "---title: IBM Guidelines---[IBM Analytics](http://apguide.stage1.mybluemix.net/){:target=_blank}[IBM Cognitive Naming](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/IBM%20Watson%20Naming%20Guidelines/page/Cognitive%20Naming%20Guidelines){:target=_blank}[IBM Design Language](http://www.ibm.com/design/language/){:target=_blank}[IBM Design Thinking](http://www.ibm.com/design/thinking/){:target=_blank}[IBM Design Thinking University](http://gbslearn.atlanta.ibm.com/iSPO/design_thinking_university/index.html){:target=_blank}[IBM Design Research](http://design.ibm.com/design/research/){:target=_blank}[IBM Security](http://security-design-guide.stage1.mybluemix.net/){:target=_blank}[IBM User Experience Guide](http://idl-xp-preview.rtp.raleigh.ibm.com/design/language/experience/?pk_campaign=IBM_DL-DesignStudiosWW_160614){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/support/ibm-guidelines/",
    },
    {
      "title": "Career and Communitiestemplate: _layout.html",
      "text": "---title: Career and Communitiestemplate: _layout.html---### Career[You and IBM](http://w3-01.ibm.com/hr/web/navigation/index.html){:target=_blank}[Checkpoint](https://checkpoint.w3bmix.ibm.com){:target=_blank}[Your Learning (aka THINK40)](https://yourlearning.w3bmix.ibm.com){:target=_blank}[Technical Leadership Mentors](https://w3-connections.ibm.com/wikis/home?lang=en#!/wiki/Watson%20%26%20Watson%20Health%20Operations/page/Technical%20Leadership%20Mentors){:target=_blank}[IBM CareerSmart](https://w3-01.sso.ibm.com/hr/careersmart/html/home.html){:target=_blank}[1-3-9 Our Purpose, Values & Practices](https://w3-workplace.ibm.com/ibm/ibmer/overview/){:target=_blank}### CommunitiesFor a _very_ long time, IBM Connections was the go to place for information. Today, collaboration happens in GitHub and Slack, reference material is here on the Playbook. You may find these useful references to older information...[IBM Watson](https://w3-connections.ibm.com/communities/service/html/communitystart?communityUuid=76f4974e-15fb-41d1-8fa5-5ad4abc1ae4d){:target=_blank}This is the main internally-public Watson community available to everyone in IBM.  There are multiple sub communities under this main which are restricted and members needs to be added/invited to join.[IBM Watson Group](https://w3-connections.ibm.com/communities/service/html/communitystart?communityUuid=6d4a4008-c282-456b-86cf-0aacd6d53eab){:target=_blank}This a a sub community of the main public Watson Group and intended for Watson Group employees only.### Older Communities / Links...Some of these Connections Communities are from the _early_ days of Watson. Were linking them here as they contain a wealth of useful historical information.[New Hire Introduction](https://w3-connections.ibm.com/wikis/home?lang=en#!/wiki/Wedf3228cf5a3_4449_8fd7_ba8a9f97fcbd/page/Introduction){:target=_blank}This page has great links for information on legacy projects.[Watson Core Technology Team](https://w3-connections.ibm.com/communities/service/html/communitystart?communityUuid=9f0074ee-a126-43db-8d77-7c44df79dba5){:target=_blank}The _original_ Watson Connections Community. It goes back to the days just after Jeopardy! Youll find lots of classic Watson information here...[Engineering Productivity](https://w3-connections.ibm.com/wikis/home?lang=en#!/wiki/W3c6a35d8589e_4f9d_8510_fba9f861c0db){:target=_blank}Engineering Productivity partners with Watson Innovations teams in order to drive continuous improvement in software engineering such that teams can rapidly develop and deliver high quality products.[Watson Managers](https://w3-connections.ibm.com/communities/service/html/communitystart?communityUuid=244537c5-4672-47ca-8a63-875137e47a91){:target=_blank}This is a restricted community for the Watson Managers.[Watson Innovations Managers](https://w3-connections.ibm.com/communities/service/html/communitystart?communityUuid=69269805-4f9b-4d15-8268-d9c26f4a95b8){:target=_blank}This is a restricted community for the Innovations Managers.### Optional CommunitiesOptional Communities you may wish to sign up for assuming they align to your teams focus.[Digital IBMer](https://w3-connections.ibm.com/communities/service/html/communitystart?communityUuid=6c2eb3d7-595b-47f5-97e0-5eae31faf9d5){:target=_blank}This community is designed to help IBMers build their digital eminence by being smart, social and secure.[Watson Group Blogs](https://w3-connections.ibm.com/blogs/6d4a4008-c282-456b-86cf-0aacd6d53eab?lang=en){:target=_blank}These are private blog posts intended for members of the Watson Group Community ONLY.[IBMs TAP](https://ibm.biz/BdxtKD){:target=_blank}The Technology Adoption Program (TAP) is where you can find, try, and share emerging technology! TAP brings together IBMers – from every location, business unit, and job role – who have innovative projects (innovators) and those who are willing to try new technology that helps them work smarter (early adopters). Initial link will direct to the Community / Wiki. You can also sign up to Subscribe to the newsletter.[IBM Agile Academy](https://w3-connections.ibm.com/communities/service/html/communitystart?communityUuid=f14aa341-aeef-4a21-bf4c-df41faf817c7){:target=_blank}This community is a cross-IBM Agile center of learning and capability development to create a shared understanding of Agile at IBM. We will do this by providing training and coaching to help IBMers grow their skills, a framework for measuring our maturity, and this community as a means to IBMers to support each other in their journey to become agile.[Mac Community](http://w3-connections.ibm.com/communities/service/html/memberjoinsubmit?returnto=communityview&communityUuid=5387b4bb-23ee-4a4e-8948-fc5fc9666697&dangerousurlnonce=9D4G092D5B5EEF59414B9AF1F7A66C002F7D){:target=_blank}This community is intended for those MAC users within IBM. It includes Tips & Tricks, as well as a Forum and Support Site.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/support/index/",
    },
    {
      "title": "WH New Hire Onboardingsidebar: defaultbreadcrumb: WH New Hire Onboarding",
      "text": "---title: WH New Hire Onboardingsidebar: defaultbreadcrumb: WH New Hire Onboarding---The following tools are relevant for all of Watson Health. Development tooling is being configured and controlled by Watson Health, and not the CIOs office. Please refer to the [Watson Health Integrated Tools Solution documentation](../../tools/index/) for further information.### MURAL / Box.comAll IBMers automatically have access to, [MURAL](https://mural.ly){:target=_blank}, [Box.com](https://ibm.box.com){:target=_blank}. Hit those links and you can log right in with your w3ID!> ProTip: If you need to add a contributor to a GitHub Organization and/or Team - thats something the owner of the Organization and/or Team can do for you...### Slack[Slack](../../tools/slack/) is messaging done right. We live in Slack.  IBM has hundreds of Slack Teams, you should join a few...Join the Watson Health Slack TeamTo join this team you must first complete HIPAA compliance training.- Complete your HIPAA training at the [Watson Health Training Wiki](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/W6a642739bb36_44d9_90cd_f2ec86efebbe/page/HIPAA%20Training){:target=_blank} (if youre not able to access this wiki please email [wht@us.ibm.com](mailto:wht@us.ibm.com)).- If you have already completed your HIPAA training but have not recorded it in BPM, please record it by selecting the HIPAA processing link in the [BPM portal.](https://portal.watson-health.ibm.com:9443/ProcessPortal/login.jsp){:target=_blank}- Once you have completed your HIPAA Training, please [request to join the Watson Health Slack](https://w3-connections.ibm.com/blogs/902efee5-3b0e-4cc3-890f-5b4ba4192f58/entry/Watson_Health_Slack_Access?lang=en_us){:target=_blank}Do not share PHI in Slack.### Other IBM Slack TeamsNext, join one of the many other fine Slack Teams at IBM- Search for teams at [ibm.enterprise.slack.com](https://ibm.enterprise.slack.com/signin/find-teams){:target=_blank}If you don’t find the right team, it may be unlisted or not yet on Slack Enterprise Grid. In that case, please search the list of additional teams and follow the instructions to get access.- [List of additional teams](https://whitewater.ibm.com/tools/slack/additional-teams-directory){:target=_blank}See the [Slack](../../tools/slack/) page for information about how we use Slack...### Development ToolingFor development teams, please see the [Development Tooling](../../tools/index/) resource guide.### Other Common New Hire Onboarding Tasks...Here are some common onboarding tasks that new hires typically have to do. [Get on the IBM WiFi Network](https://w3.ibm.com/help/#/article/install_digicert/install_overview){:target=_blank} [Request VPN Access](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/Wa0ede813c737_4a33_bdde_5788e9bede66/page/Request%20a%20Remote%20VPN%20Client){:target=_blank} [Create AT&T Teleconference Account](http://conferencecenter.uc.att.com/GAC/IBM/Page9.aspx){:target=_blank} [Setup Notes for the first time on a workstation](https://w3.ibm.com/help/#/en/article/install_notes){:target=_blank}If you joined a team maintaining legacy products, you may require additional access requirements. Access request instructions can be found [here](http://watsonuniv.swg.usma.ibm.com/get_access.html){:target=_blank} and [here](https://w3-connections.ibm.com/wikis/home?lang=en#!/wiki/Wa0ede813c737_4a33_bdde_5788e9bede66/page/Accounts%20&%20Systems%20Access){:target=_blank}. Your manager (or Squad Leader) will let you know if there are other tasks you need to complete when you join.#### Read the Slack at IBM training guide from the Whitewater Team- [http://ibm.biz/slack-at-ibm-training-guide](http://ibm.biz/slack-at-ibm-training-guide){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/support/onboarding/",
    },
    {
      "title": "Watson Glossarytemplate: _markdown.html",
      "text": "---title: Watson Glossarytemplate: _markdown.html---##### A running wiki of Watson teams lexicon and lingo___## BotIn regards to Watson, were still working on a clear definition for bot.In the world outside of Watson, a bot is an application that performs an automated task, such as setting an alarm, telling you the weather or searching online.A Watson Bot is an application that is able to interact with end users with a very “natural” user experience.  Although not mandated most of these interactions will be by either typing natural language or by speaking.A bot does not have an end-user interface itself.  The bot communicates through an API, which is accessed by an application running in a channel (web, iOS, etc.)> [Strategy for Bots](https://medium.com/@ahhhlvaro/to-bot-or-not-to-bot-8a8b5a816543#.6fgo4wx26){:target=_blank} by Watson Conversation Team Lead, Alvaro Soto> [Whats a Bot](https://w3-connections.ibm.com/blogs/weameetings/entry/Watson_Bots?lang=en_us){:target=_blank} by Watson Distinguished Engineer, Rob Yates___## Cognitive Computing A category of technologies that uses natural language processing and machine learning to enable people and machines to interact more naturally to extend and magnify human expertise and cognition.Corpus: A collection of source documents that have been ingested by the system, but not yet trained for a specific domain or target solution.___## Hypotheses The process of producing possible answers to a given question. When asked a question, Watson relies on hypothesis generation and evaluation to rapidly parse relevant evidence and evaluate responses from disparate data.___## IBM Watson Group A new IBM business unit formed in January 2014 with the goal of boosting the development and adoption of cloud-delivered cognitive applications and services.___## Ingestion The process of feeding data into the system to create its base of knowledge. Processing is performed on the content as it is added to the system, including the creation of derived data resources such as search indexes and a formal knowledge base, and natural language preprocessing of text corpora.___## Machine Learning Model The application of past experience, such as training data, to determine or predict the correct outcome of future experiences based on characteristics of the data. These past experiences are captured in the form of a model by calculating feature scores for each candidate answer or evidence and combining that with known outcomes.___## Natural Language Processing (NLP) A field of artificial intelligence and linguistics that studies the problems inherent in the processing and manipulation of natural language, with an aim to increase the ability of computers to understand human languages.___## SkillA piece of Watson technology translated into an API so products are able to use. Customers use [Bluemix](http //www.ibm.com/cloud-computing/bluemix/watson/) to browse, demo and purchase skills.___## Tooling The administration, configuration, and set up interface for a product___## Training Data A set of question and answer pairs that are used to teach the machine learning models in the system. These questions and answers are representative of the types of questions that users might ask and answers expected in the use case.___## Unstructured Information Management Architecture (UIMA) An Apache architecture that defines a framework for implementing systems, such as Watson systems, for the analysis of unstructured data.___## Unstructured Data Any data that is stored in an unstructured format rather than in fixed fields. Data in a word processing document is an example of unstructured data.___## Watson A cognitive computing system that specializes in understanding the meaning of questions posed in natural human language and that draws on a broad domain of knowledge to respond quickly.___## Watson Company Analyzer Helps users reduce the time and effort to collect, digest and synthesize information for building strategic business relationships through comprehensive company profiles—enabling them to better understand customers and accelerate opportunities.___## Watson Engagement Advisor Interacts with customers, listens to questions and offers solutions, learning with every human interaction and growing its collection of knowledge—quickly adapting to the way people think.___## Watson Explorer Accesses and analyzes structured and unstructured content—presenting data, analytics and cognitive insights in a single view, giving users the information they’re looking for while uncovering trends, patterns and relationships.___## Watson Health Solutions From advancing personal training to cancer treatment, from clinical trial matching to insulin pumps that think, Watson Health is transforming the way organizations deliver health and wellness.___## Watson Knowledge Studio Enables subject matter experts and developers to teach Watson the linguistic nuances of industries and knowledge domains—without writing a single line of code.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/support/watson-glossary/",
    },
    {
      "title": "Watson Librarytemplate: _layout.html",
      "text": "---title: Watson Librarytemplate: _layout.html---##### Recommended articles, books and videos for understanding the cognitive future___### Books[Thinking, Fast and Slow](https://smile.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman-ebook/dp/B005MJFA2W/ref=sr_1_1?s=books&ie=UTF8&qid=1470250794&sr=1-1&keywords=Thinking%2C+Fast+and+Slow#navbar)    {:target=_blank}[Beyond the Brain](https://smile.amazon.com/Beyond-Brain-Environment-Shape-Animal/dp/0691165564/ref=sr_1_1?ie=UTF8&qid=1470250509&sr=8-1&keywords=Beyond+the+Brain){:target=_blank}[Proust and the Squid: The Story and Science of the Reading Brain](https://smile.amazon.com/Proust-Squid-Story-Science-Reading/dp/0060933844/ref=sr_1_1?s=books&ie=UTF8&qid=1470250578&sr=1-1&keywords=Proust+and+the+Squid){:target=_blank}[Supersizing the Mind](https://smile.amazon.com/Supersizing-Mind-Embodiment-Cognitive-Philosophy/dp/B004MDLRQW/ref=sr_1_1?s=books&ie=UTF8&qid=1470250613&sr=1-1&keywords=Supersizing+the+Mind#navbar){:target=_blank}[Metaphors We Live By](https://smile.amazon.com/Metaphors-We-Live-George-Lakoff/dp/0226468011/ref=sr_1_1?ie=UTF8&qid=1471972766&sr=8-1&keywords=metaphors+we+live){:target=_blank}[Seeing What Others Dont](https://smile.amazon.com/Seeing-What-Others-Dont-Remarkable/dp/1610393821/ref=sr_1_1?s=books&ie=UTF8&qid=1470250680&sr=1-1&keywords=Seeing+What+Others+Don%E2%80%99t){:target=_blank}[The Way We Think](https://smile.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Dstripbooks&field-keywords=The+Way+We+Think){:target=_blank}[Women, Fire, and Dangerous Things](https://smile.amazon.com/Women-Fire-Dangerous-Things-Categories/dp/B009PS2RXG/ref=sr_1_1?s=books&ie=UTF8&qid=1470250747&sr=1-1&keywords=Women%2C+Fire%2C+and+Dangerous+Things#navbar){:target=_blank}[Predictably Irrational](https://smile.amazon.com/Predictably-Irrational-Hidden-Forces-Decisions-ebook/dp/B002RI9QJE/ref=sr_1_1?s=books&ie=UTF8&qid=1470250772&sr=1-1&keywords=Predictably+Irrational#navbar){:target=_blank}[Kanban: Successful Evolutionary Change for Your Technology Business](http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402/ref=sr_1_1?ie=UTF8&qid=1458779210&sr=8-1&keywords=kanban){:target=_blank}### Free Books on [Safari Books Online](http://safaribooksonline.com){:target=_blank}[Site Reliability Engineering](https://www.safaribooksonline.com/library/view/site-reliability-engineering/9781491929117/){:target=_blank}[Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation, Video Enhanced Edition](https://www.safaribooksonline.com/library/view/continuous-delivery-reliable/9780321670250/){:target=_blank}[Lean Enterprise](https://www.safaribooksonline.com/library/view/lean-enterprise/9781491946527/){:target=_blank}[The Progress Principle: Using Small Wins to Ignite Joy, Engagement, and Creativity at Work](https://www.safaribooksonline.com/library/view/the-progress-principle/9781422142738/){:target=_blank}[The Phoenix Project](https://www.safaribooksonline.com/library/view/the-phoenix-project/9781457191350/){:target=_blank}[Agile Testing: A Practical Guide for Testers and Agile Teams](https://www.safaribooksonline.com/library/view/agile-testing-a/9780321616944/){:target=_blank}### Videos[AI, Deep Learning, and Machine Learning: A Primer](https://vimeo.com/170189199#collections){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/support/watson-library/",
    },
    {
      "title": "Watson Universitytemplate: _markdown.html",
      "text": "---title: Watson Universitytemplate: _markdown.html---##### IBMs internal educational resources for learning about Watson and cognitive technology___### About Watson[Watson 101](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W0f52bbf68d89_4c26_8981_016213442e59/page/Watson%20101){:target=_blank}[Watson Academy](http://lt.be.ibm.com/watsonacademy){:target=_blank} (note, this site is tailored to classic Watson solutions)[Watson Continuing Education](http://watsonuniv.swg.usma.ibm.com/welcome.html){:target=_blank}[Watson University](https://w3-connections.ibm.com/communities/service/html/communityoverview?communityUuid=3aabb03b-4ff7-49db-9e16-198a9a87b765){:target=_blank}[Become a Watson Ambassador](https://yourlearning.w3bmix.ibm.com/#activity/BLOG-42C66){:target=_blank}[Watson Brand Community Wiki](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W0f52bbf68d89_4c26_8981_016213442e59){:target=_blank}[Watson Outthink](http://www.ibm.com/cognitive/outthink/?iio=CHQ&cmp=C3440&cm=k&csr=agus_outthink&cr=google&ct=C34403YW&cn=Cognitive_General_BMM_BR&S_PKG=&S_TACT=C34403YW&campaign=Agenda%20-%20Cognitive_General_Broad_BR&group=Cognitive_General_BMM_BR&mkwid=0f97ee50-17e9-4360-a835-e145518b2502|447|132549900767&ck=%2Bibm%20%2Bcognitive&cs=b&ccy=US){:target=_blank}### Watson Products[Wiki for all Watson Products and Industries](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W9d6c1069a159_40a3_a3ec_187b00f55c3f/page/Watson%20Integrated%20Toolbox?section=Watson%20Core){:target=_blank}[IBMs Marketplace / Cognitive IBM Products](https://www.ibm.com/marketplace/cognitive/us/en-us)     {:target=_blank}[IBMs Marketplace / Cognitive App Gallery](http://www.ibm.com/marketplace/cognitive/cognitive-apps/)    {:target=_blank}### The Watson Organization[The Watson Ecosystem](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W9d6c1069a159_40a3_a3ec_187b00f55c3f/page/Ecosystem)[The Watson Organization Chart](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W9d6c1069a159_40a3_a3ec_187b00f55c3f/page/Watson%20Organization){:target=_blank}[Watson Org Resources Wiki](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W9d6c1069a159_40a3_a3ec_187b00f55c3f/page/Resources){:target=_blank}### Cognitive[IBM Marketplace: Watson APIs](http://www.ibm.com/cloud-computing/bluemix/watson/){:target=_blank}[Think Academy: Cognitive in 20 Minutes](https://w3-workplace.ibm.com/ibm/thinkacademy/?cache=7-23-9#/home){:target=_blank}[Welcome to the Cognitive Era by IBM Think Academy](https://w3-workplace.ibm.com/ibm/thinkacademy/?cache=7-2-14#/cognitive-business/all-ibmers){:target=_blank}[Watson Cognitive Build: Outthink Challenge 2016](https://cognitivebuild.w3bmix.ibm.com/launch/){:target=_blank}[Watson Outthink: How the world is using Watson](http://www.ibm.com/cognitive/outthink/?iio=CHQ&cmp=C3440&cm=k&csr=agus_outthink&cr=google&ct=C34403YW&cn=Cognitive_General_BMM_BR&S_PKG=&S_TACT=C34403YW&campaign=Agenda%20-%20Cognitive_General_Broad_BR&group=Cognitive_General_BMM_BR&mkwid=0f97ee50-17e9-4360-a835-e145518b2502|447|132549900767&ck=%2Bibm%20%2Bcognitive&cs=b&ccy=US){:target=_blank}### Watson Social[Watsons YouTube](https://www.youtube.com/c/ibmwatsonsolutions){:target=_blank}[Watsons Facebook](https://www.facebook.com/ibmwatson){:target=_blank}[Watsons Twitter](https://twitter.com/IBMWatson){:target=_blank}[Watsons Google+](https://plus.google.com/+IBMWatsonSolutions){:target=_blank}[Watsons LinkedIn](https://www.linkedin.com/company/ibm-watson){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/support/watson-university/",
    },
    {
      "title": "Glossarysidebar: defaultbreadcrumb: Glossary",
      "text": "---title: Glossarysidebar: defaultbreadcrumb: Glossary---##### A running wiki of Watson teams lexicon and lingo___## Cognitive Computing A category of technologies that uses natural language processing and machine learning to enable people and machines to interact more naturally to extend and magnify human expertise and cognition.Corpus: A collection of source documents that have been ingested by the system, but not yet trained for a specific domain or target solution.___## Hypotheses The process of producing possible answers to a given question. When asked a question, Watson relies on hypothesis generation and evaluation to rapidly parse relevant evidence and evaluate responses from disparate data.___## Ingestion The process of feeding data into the system to create its base of knowledge. Processing is performed on the content as it is added to the system, including the creation of derived data resources such as search indexes and a formal knowledge base, and natural language preprocessing of text corpora.___## Machine Learning Model The application of past experience, such as training data, to determine or predict the correct outcome of future experiences based on characteristics of the data. These past experiences are captured in the form of a model by calculating feature scores for each candidate answer or evidence and combining that with known outcomes.___## Natural Language Processing (NLP) A field of artificial intelligence and linguistics that studies the problems inherent in the processing and manipulation of natural language, with an aim to increase the ability of computers to understand human languages.___## Tooling The administration, configuration, and set up interface for a product___## Training Data A set of question and answer pairs that are used to teach the machine learning models in the system. These questions and answers are representative of the types of questions that users might ask and answers expected in the use case.___## Unstructured Information Management Architecture (UIMA) An Apache architecture that defines a framework for implementing systems, such as Watson systems, for the analysis of unstructured data.___## Unstructured Data Any data that is stored in an unstructured format rather than in fixed fields. Data in a word processing document is an example of unstructured data.___## Watson A cognitive computing system that specializes in understanding the meaning of questions posed in natural human language and that draws on a broad domain of knowledge to respond quickly.___## Watson Company Analyzer Helps users reduce the time and effort to collect, digest and synthesize information for building strategic business relationships through comprehensive company profiles—enabling them to better understand customers and accelerate opportunities.___## Watson Engagement Advisor Interacts with customers, listens to questions and offers solutions, learning with every human interaction and growing its collection of knowledge—quickly adapting to the way people think.___## Watson Explorer Accesses and analyzes structured and unstructured content—presenting data, analytics and cognitive insights in a single view, giving users the information they’re looking for while uncovering trends, patterns and relationships.___## Watson Health From advancing personal training to cancer treatment, from clinical trial matching to insulin pumps that think, Watson Health is transforming the way organizations deliver health and wellness.___## Watson Knowledge Studio Enables subject matter experts and developers to teach Watson the linguistic nuances of industries and knowledge domains—without writing a single line of code.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/support/wh-glossary/",
    },
    {
      "title": "Tools & Resources Guide...breadcrumb: Tools Guidesidebar: tools",
      "text": "---title: Tools & Resources Guide...breadcrumb: Tools Guidesidebar: tools---# Watson Health ToolsThe following tool set consists of tools that are specifically customized and hosted for Watson Health, giving teams an integrated set of best-in-class tools to take projects from idea to production.- [Aha!](../aha/) - Team based offering management tool for project status and high-level requirements grooming.- [GitHub](../github/) - IBMs internal deployment of GitHub Enterprise- [Jira](../jira/) - Web-based Agile project management tool used to plan and track development efforts, assign tasks, and decide story points.- [Confluence](../confluence/) - Collaborative document management integrated with Jira. Provides document control and version management of documents.- [Xray](../xray/) - Xray Test Management tool for Jira that supports test planning, test design, test execution and test reporting.The following are additional tools which are used by Watson Health extensively.- [Slack](../slack/) - Team-based collaborative communication- [Cognitive Architect](../ca/) - Team-based online architectural modeling tool using the IBM Team Solution Design Method templates.## Tool Integration planWhile the tools listed below are the intended tooling for Watson Health, there currently is an effort underway to integrate all of the tools together into a cohesive whole that will allow:- Traceability between all artifacts from high-level requirements down to builds against stories.- Common template with a seamless workflow across Aha!, Jira, Confluence and GitHub.- Integration between the Watson Health Playbook tasks and the tasks in the tooling workflows.- Common tool licensing for Watson Health so that all teams can get up to speed quickly without too much bureaucracy.- Support ISO 9001 and the WH QMS needs in the same flow as Non-GxP projects. This means that a common set of templates and consistent set of documentation will be created for all projects, but the process will support taking Validation and Verification to the next level when needed.At a high level the Traceability Metamodel is as follows:![Traceability Metamodel](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/metamodel.png)This translates to a metamodel tooling implementation that looks like the following:![Implementation of Traceability Metamodel](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha-jira-github-overview.jpg)The integration landscape that is under construction can be seen in the following diagram:![Tool Integration Plan](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/WHPlaybookToolTopology.jpg)_Please understand that the tool integration is not completed, but when it is, training will be made available. At such a time everyone will be expected to use this process. Therefore getting to know it now while it is still under construction is recommended._### Onboarding- [Onboarding a Project Offering to the WH Application Lifecycle Management (ALM) Solution](../onboarding/request_onboarding_project_offering)- [Onboarding a user to the WH Application Lifecycle Management (ALM) Solution](../onboarding/request_onboarding_user/)- [Manager with a new employee?](../../support/onboarding/) -  Just joined a Squad? Start here...### Watson Health Developer ToolingWe have a whole section of the site dedicated to Watson Health Developer Tooling.- [Developer Guide](../../dev/developer-guide/index/)### Software License Management (SLM)Watson Health (and many other [Business Segments](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/Software%20Group%20Software%20License%20Management/page/Find%20Your%20Admin%20Contact){:target=_blank}) can request licenses for software through the SLM (Software Licence Management) Portal.- [https://slm.w3ibm.mybluemix.net/SLM/Products](https://slm.w3ibm.mybluemix.net/SLM/Products){:target=_blank}### Productivity- Microsoft Office - Microsoft Office is available for all IBMers- Box.com - Unlimited, secure file storage and sharing for the enterprise.### Video ConferencingThe full list of approved video conferencing solutions can be found here: Allowed Video Conferencing Tools. Here are our favorites...- Slack has been [approved](https://github.ibm.com/Whitewater/Slack/blob/master/security-assessments/videoconference.md){:target=_blank} for IBM Confidential audio and video calling - this is a GREAT solution for Squad-based video conferencing. Just click the phone handset icon to initiate a call!- WebEx works for large groups, and allows screen sharing. [Click here](https://w3-connections.ibm.com/blogs/9b423260-ec3f-4c33-9e8e-91cd8d26e688/entry/Webex_for_All?lang=en_us){:target=_blank} to start using WebEx.### Designing#### Plug-Ins<!-- - Craft  Sketch 3 plug-in for using and editing Watsons design libraries -->- Marketch#### Design- Type Scale Base ratios for your type sizes#### Animation- Principle makes it easy to design animated and interactive user interfaces.#### Accessibility- Colour Contrast Analyzer- Color Oracle is a free color blindness simulator for Window, Mac and Linux. It takes the guesswork out of designing for color blindness by showing you in real time what people with common color vision impairments will see.### Communicating- Watson Health PowerPoint Templates - Watson Health Email Signature- Watson Health Business Cards#### Career- [You and IBM](http://w3-01.ibm.com/hr/web/navigation/index.html){:target=_blank}- [Your Learning (aka THINK40)](https://yourlearning.ibm.com/){:target=_blank}- [Checkpoint](https://w3.ibm.com/hr/performance/checkpoint/){:target=_blank}- [Technical Leadership Mentors](https://w3-connections.ibm.com/wikis/home?lang=en#!/wiki/Watson%20%26%20Watson%20Health%20Operations/page/Technical%20Leadership%20Mentors){:target=_blank}- [Careers@IBM](https://w3.ibm.com/careers/){:target=_blank}- [1-3-9 Our Purpose, Values & Practices](https://w3-workplace.ibm.com/ibm/ibmer/overview/){:target=_blank}### The Archive - Older content you may want to refer to...#### CommunitiesFor a _very_ long time, IBM Connections was the go to place for information. Today, collaboration happens in GitHub and Slack, reference material is here on the Playbook. You may find these useful references to older information...- [IBM Watson Health](https://w3-connections.ibm.com/communities/service/html/communitystart?communityUuid=902efee5-3b0e-4cc3-890f-5b4ba4192f58){:target=_blank}This is the main internally-public Watson Health community available to everyone in IBM.  There are multiple sub communities under this main which are restricted and members needs to be added/invited to join.#### Optional CommunitiesOptional Communities you may wish to sign up for assuming they align to your teams focus.- [Digital IBMer](https://w3-connections.ibm.com/communities/service/html/communitystart?communityUuid=6c2eb3d7-595b-47f5-97e0-5eae31faf9d5){:target=_blank}This community is designed to help IBMers build their digital eminence by being smart, social and secure.- [Watson Health Group Blogs](https://w3-connections.ibm.com/blogs/902efee5-3b0e-4cc3-890f-5b4ba4192f58?lang=en){:target=_blank}These are private blog posts intended for members of the Watson Health Group Community ONLY.- [IBMs TAP](https://ibm.biz/BdxtKD){:target=_blank}The Technology Adoption Program (TAP) is where you can find, try, and share emerging technology! TAP brings together IBMers – from every location, business unit, and job role – who have innovative projects (innovators) and those who are willing to try new technology that helps them work smarter (early adopters). Initial link will direct to the Community / Wiki. You can also sign up to Subscribe to the newsletter.- [IBM Agile Academy](https://w3-connections.ibm.com/communities/service/html/communitystart?communityUuid=f14aa341-aeef-4a21-bf4c-df41faf817c7){:target=_blank}This community is a cross-IBM Agile center of learning and capability development to create a shared understanding of Agile at IBM. We will do this by providing training and coaching to help IBMers grow their skills, a framework for measuring our maturity, and this community as a means to IBMers to support each other in their journey to become agile.- [Mac Community](http://w3-connections.ibm.com/communities/service/html/memberjoinsubmit?returnto=communityview&communityUuid=5387b4bb-23ee-4a4e-8948-fc5fc9666697&dangerousurlnonce=9D4G092D5B5EEF59414B9AF1F7A66C002F7D){:target=_blank}This community is intended for those MAC users within IBM. It includes Tips & Tricks, as well as a Forum and Support Site.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/index/",
    },
    {
      "title": "Aha! FAQstemplate: _markdown.htmlbreadcrumb: FAQsidebar: tools",
      "text": "---title: Aha! FAQstemplate: _markdown.htmlbreadcrumb: FAQsidebar: tools---## IntroductionThe document provides context and definitions required for migration to Aha.NOTE: Do not upload attachments in Aha!Upload attachments in our enterprise box account and link to Aha artifacts.## AccessHow do I request access to Aha?[Request access to Aha Watson Health](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/W7aedad6003f2_46dd_914b_1a3b5195108e/page/2%20-%20Request%20access%20to%20Aha%20Watson%20Health){:target=_blank}## Roles and PermissionsProduct Owner (paid seat)A Product Owner is typically a product, project, marketing, or engineering manager who actively manages strategy, releases, ideas, features, and product launches.Contributor (paid seat)A Contributor has the same capabilities as a Product Owner but cannot manage users or change most product configuration settings.Reviewer (unlimited and not paid for)A Reviewer is a user who can see data about products they have been given permission to view. They can also comment on, create and complete to-dos. It is a perfect way to increase visibility across your organization by engaging management, engineering, marketing and other key stakeholders.Viewer (unlimited and not paid for)A Viewer is a user who can see data about products they have been given permission to view. They can also answer to-dos.Who will be granted Paid seats in Aha?1.	Offering Managers with a legitimate business need.2.	Senior leaders in Development3.	Release Managers assisting in the prioritization and sprint planning activities.## StrategyWhere do I document my Offering strategy?Your product overview captures your overall product vision, your business model, your personas and your competitors.- Vision: Your vision provides a high level view of the opportunity, how you are going to pursue it and the challenges you will need to overcome. It captures the essence of what you want to achieve and it is critical information your team must understand to develop and maintain a product, component or service.  http://support.aha.io/hc/en-us/articles/206533465-Define-your-vision- Business Model (Lean Canvas): Your business model represents the foundation of your product. The business model builder in Aha allows you to clearly articulate, develop, innovate, and pivot your business model — on a single page.  http://support.aha.io/hc/en-us/articles/205738519-Build-a-business-model- Personas: Personas represent those very real people who need your product. They allow your entire team to empathize with your customers pain points and better understand their needs. Weve added a persona field to Hills and Epics.  It is important to set these fields as they are using in persona based road maps.- Competitors: Defining your competitors in Aha! allows you to better prioritize your own product roadmap based on competitive movement. You can easily share this competitive information with team by adding it to a Notebook. This is not a replacement for the CPO office.  Competitive summaries that are relevant for strategy and planning should be selectively included.  ## Organization and StructureWatson Health OrganizationThe organization and structure of the business unit is represented in the flow of the entities.  It is important to gain consensus at levels of the Team hierarchy to promote visibility into the scope of work. Decomposing the effort from the top down promotes traceability from commitment to development deliverable.  Watson Health represents the top most level of our hierarchy.  Offering strategy will be loaded into Aha at different points of the hierarchy.  Please pay close attention to where the information is to be loaded so we can provide consistent reports to key stakeholders.#### SegmentsSegments are used to break Watson Health down into large functional units. We have identified the following Segments:- Payer- Provider- Life Sciences- Oncology & Genomics- Government Health & Human Services- Consumer- Watson Platform for Health- VBC FoundationMore Segments will be added as adoption spreads across more business units in IBM.#### TribesA Tribe is used to further break down the segment into teams that have clear and distinct ownership over parts of the business and delivery of our Strategic Priority.#### Component/ServicesComponents/Services represent functional units that are used to either create the foundation of the platform or sold directly to customers for consumption.  Some of our Services are also key system components as they are the building blocks used to create the Watson Health experience.  Components/Services are not 1 to 1 mapping of Squads.  Multiple squads are often used to deliver a system component or service.## Entities and ObjectsWhat is an Watson Health Entity?An Entity is an Object about which information is stored.  Entities will have multiple instances and have relationships to other Entities.  To provide consistent organization of data, it is important to understand how entities are stored and managed across our tools.  The following diagram describes the Entity and identifies the systems that are used to store the information about the instances.### Strategic PriorityStrategic Priority are used to communicate investment to the SVP and CEO level.  Strategic Priority should be achievable within a given half and expressed in terms of the benefit to the IBM Business.  Strategic Priority must have measurable success criteria.  Success criteria could be defined and measured in terms of “users added”, “market share added”, “improvement in MQ/Wave”, “revenue growth” etc.  Strategic Priority must be linked to supporting strategy and business model documentation.Segment - Segments are aligned to major cloud units.  Segment Commitments should link to an IBM Cloud Strategic Priority and further refine the course grained EC at the IBM Cloud level as it pertains to the segment.### HillsHills are used to express value to the customers/persona along with a measurable outcome.  You should define and refine hills into what could be reasonably achieved in a quarter.  A hill must contain an articulate description and related information pertaining to the business value.  In some cases a hill will be selected for the ICP program.  In  that case there are several fields that must be maintained on a monthly basis:  Most Likely Date, Pessimistic Date, Optimistic Date.  They values are used for PERT analysis.https://www.ibm.com/design/thinking/keys/hills/### EpicsEpics represent the further decomposition of hills.  They too express value and measurable outcome but are scoped to a feature in the context of a broader experience. What if an Epic is related to multiple Hills or a Hill is related to multiple Strategic Priority?There are circumstances where an epic might be used to move multiple hills forward.  That is an ideal situation as we are gaining advantages across initiatives with a single investment.  In this case, the OM should identify a primary hill and set that accordingly.  Other hills can be linked using “Universal Dependencies” http://blog.aha.io/universal-dependencies/?utm_source=heading&utm_medium=product_3&utm_campaign=newsletterWhat is a Universal DependencyUniversal Dependencies can be created to link any of our Entities using a variety of descriptors.  To create a UD, you will leverage the “action” button on the EntityWhat is the life cycle of an Epic?- New - Developing concept based on market data or customer feedback/Idea  (Only in Aha)- Defining – Creating an articulate Epic with all necessary data and Aha Epic Attributes set. This includes who the Epic is Assigned To, the Value Statement, the Announcement Tier, the Description and more.- Ready for Design - Problem statement is complete.  Validated with sponsor users and market data.- In Design - Part of the current Design Sprint- Ready for Development - Design is complete.  Ready to be prioritized and included in a Development sprint- In Development - Part of the current development sprint- Dev Complete - Development and testing is complete.  In staging, not yet deployed to production instances.- Shipped - Deployed to all production instances.  Public/Dedicated/Local where appropriate.  (GitHub = Closed)- Will not do - An epic that we don’t intend to implement due to priority change or duplication.  (GitHub = Closed)## MilestonesWe are aligned with development Milestones.  Aha! team will create Product milestones periodically.It is the responsibility of the OM with commitment from Development to ensure that Epics are properly placed in the correct Milestone.  Anything that is not in a Milestone should be placed in the Parking Lot/Backlog.Milestone naming convention should adhere to the format YYYY-MMThis will ensures we can sort by Milestone name chronologically.What is an Idea and how do they relate to Epics?   Ideas represent Internal and External product feedback.  Offering managers should follow the Triage process to ensure the feedback is relevant and actionable.  Ideas are linked to Epics.  Ideas are not sync’ed with GitHub.  When an Epic is “Shipped” the Idea lifecycle will be complete and will need to be updated in the Aha system to inform customers and field representatives that we’ve addressed their request.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/aha/aha-faq/",
    },
    {
      "title": "Creating an Epic in Aha!sidebar: toolsbreadcrumb: Creating an Epic in Aha!",
      "text": "---title: Creating an Epic in Aha!sidebar: toolsbreadcrumb: Creating an Epic in Aha!---# DRAFT## Before You BeginAha! is the home for everything related to business strategy, user personas, and product roadmaps. The Watson Health Application Lifecycle Management (ALM) Solution integrates Aha! with Jira to enable full traceability for an Offering’s lifecycle across key elements including requirements, development stories, and test cases.Aha! Hills are decomposed into smaller units called Epics. An Epic in Aha! is a collection of customer value centered on a common theme. Epics follow a similar pattern to Hills, but replace “wow” with “why” to establish a who, what, and why pattern. If the Hill is the big goal, then the Epics are the capabilities, behaviors, or user experiences that enable us to reach the goal.Epics represent the further decomposition of Hills. Hills also express value and measurable outcome but are scoped to a feature level in the context of a broader experience.Applicable Role(s):  Offering Manager or any person with an Aha! Contributor role## Procedure1. From the Epic/features tab of your Offering, click the Add epic/feature button.![Add epic/feature button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_create_epic_add_epic_btn.png Add epic/feature button)1. In the Create Epic/feature window, click the For release drop-down and select the release you are associating the Epic to. Populate the Name field and select a Type. You can also provide a description.![Create epic/feature window](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_create_epic_window.png Create epic/feature window)1. Click the Create epic/feature button.![Create epic/feature button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_create_epic_create_btn.png Create epic/feature button)1. The Epic/feature window displays for the Epic that was created.![Epic/feature window](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_create_epic_feature_window.png Epic/feature window)1. Associate the Epic to a Hill by clicking the Hill/initiative field.![Hill/initiative field](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_create_epic_associate_hill.png Hill/initiative field)The Hills display in a drop-down list. Type the name of the Hill to narrow the results and select the desired Hill.![Hill drop-down list](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_create_epic_associate_hill2.png Hill drop-down list)>Tip: The item in bold is the offering name (“WH Demo” in this example).1. Populate the fields in the Epic/feature window. The following fields are required for an Epic/Feature Requirement in Aha! to be pushed to Jira: - Name - Release - Aha Feature Acceptance Criteria - Client Facing Description - Priority - Patient Safety Related - Prior Release (only if this is a copy of an Epic from a previous release) - Change to Prior Release (only if this is a copy of an Epic from a previous release) - Requirement Statement![Aha! Epic/feature window](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_create_epic_required_fields1.png Aha! Epic/feature window)![Aha! Epic/feature window](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_create_epic_required_fields2.png Aha! Epic/feature window)1. When you have completed the Epic/feature window, click outside the window to close it.1. The new Epic displays in its release swim lane on the Kanban board view in Aha!![Kanban board view in Aha!](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_create_epic_created.png Kanban board view in Aha!)>Tip: Epics that have been previously pushed to Jira are denoted by an integration (![Jira integration link](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_create_epic_integration_link.png Jira integration link)) link at the bottom of the card which is the key of the work item in Jira.## What to do nextOnce you have completed the Commitment Pitch/Playback approval process and it is approved, the [Aha! Epic can be pushed to Jira](../aha_push_epic_to_jira/).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/aha/aha_create_epic/",
    },
    {
      "title": "Creating a Hill in Aha!sidebar: toolsbreadcrumb: Creating a Hill in Aha!",
      "text": "---title: Creating a Hill in Aha!sidebar: toolsbreadcrumb: Creating a Hill in Aha!---# DRAFT## Before You BeginAha! is the home for everything related to business strategy, user personas, and product roadmaps. The Watson Health Application Lifecycle Management (ALM) Solution integrates Aha! with Jira to enable full traceability for an Offering’s lifecycle across key elements including requirements, development stories, and test cases.Hills are created in Aha! A Hill is the big goal. It contains a who, what, and wow factor. Hills turn users’ needs into project goals, helping the team align around a common understanding. Hills aren’t detailed requirements - they’re statements of intended outcome. Hills address who the outcome will serve, what they will be enabled to do, and the differentiator that will make this outcome worth the users’ time. Hills are eventually decomposed in Aha! into smaller units called Epics.Hills are used to express value to customers along with a measurable outcome. Hills should be defined or refined into work that can reasonably be achieved in a quarter of a year. Hills contain an articulate description of the value and contain information pertaining to the business value.Applicable Role(s):  Offering Manager or any person with an Aha! Contributor role## Procedure1. From your Offering, click the Strategy tab and select Hills/Initiatives.![Select Hill/Initiatives](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_create_hill_btn.png Select Hill/initiatives)1. On the Strategic hill/initiatives screen, click the Add hill/initiative button.![Add hill/initiative button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_create_hill_add_hill_btn.png Add hill/initiative button)1. In the Create hill/initiative window, provide a name in the Hill/initiative name field. You can also add a description, assign a roll up offering, and link it to a strategic priority/goal.![Create hill/initiative details window](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_create_hill_details.png Create hill/initiative details window)1. Click the Create hill/initiative button.![Create hill/initiative button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_create_hill_btn2.png Create hill/initiative button)The newly created Hill displays on the Strategic hill/initiatives screen in Aha!![The newly created Hill](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_create_hill_created.png The newly created Hill)## What to do next[Create an Epic in Aha!](../aha_create_epic/)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/aha/aha_create_hill/",
    },
    {
      "title": "Pushing an Approved Epic in Aha! to Jirasidebar: toolsbreadcrumb: Pushing an Approved Epic in Aha! to Jira",
      "text": "---title: Pushing an Approved Epic in Aha! to Jirasidebar: toolsbreadcrumb: Pushing an Approved Epic in Aha! to Jira---# DRAFT## Before You BeginAha! is the home for everything related to business strategy, user personas, and product roadmaps. The Watson Health Application Lifecycle Management (ALM) Solution integrates Aha! with Jira to enable full traceability for an Offering’s lifecycle across key elements including requirements, development stories, and test cases.Once the Commitment/Pitch/Playback of an Epic has been approved, an Offering Manager can push the Epic in Aha! to Jira. The Epic in Aha! is cloned as a non-modifiable Epic in Jira and the Epic in Jira is automatically associated to the Design Change Release (DCR) for the Offering’s release.- If the Offering is following a 2 Tier requirements model: When the Epic in Jira is created, the system automatically creates a High Level Feature Requirement (non-modifiable) and a System Level (SL) User Requirement. The SL User Requirement has a one-to-one mapping to the Epic in Jira.- If the Offering is following a 3 Tier requirements model: When the Epic in Jira is created, the system automatically creates a High Level (HL) Feature Requirement. This HL Feature requirement has a one-to-one mapping to the Epic in Jira.Applicable Role(s):  Offering Manager or any person with an Aha! Contributor role## Procedure1. From the Epic/feature window of the approved Aha! Epic, scroll to the Integrations section and click the Send link.![Integrations section - Send link](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_push_jira_send_link.png Integrations section - Send link)1. Select Send to Jira.![Integrations section - Send to Jira](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_push_jira_send_jira.png Integrations section - Send to Jira)1. A link to the Jira Epic is created in the Integrations section of the Aha! Epic/feature window.![Integrations section - Integration link to Jira Epic](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_push_jira_integration_link.png Integrations section - Integration link to Jira Epic)The Aha! Epic with the link to the Jira Epic can also be viewed from the Kanban board in Aha!![Epic displayed on Kanban board with integration link to Jira](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/aha/aha_push_jira_epic_link.png Epic displayed on Kanban board with integration link to Jira)## What to do nextLearn about working with [requirements in Jira](../../jira/jira_reqs_overview/) and working with DCRs in Jira. <>",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/aha/aha_push_epic_to_jira/",
    },
    {
      "title": "Aha! Idea Portalssidebar: toolsbreadcrumb: Aha! Idea Portals",
      "text": "---title: Aha! Idea Portalssidebar: toolsbreadcrumb: Aha! Idea Portals---> Our highest priority is to satisfy our users through the early and continuous delivery of valuable software.## Overview Ideas in Aha! are similar to requests for enhancement. Externally available Portals allow us to collaborate with our stakeholders and prioritize their feedback. Ideas can be upvoted by registered users. Accepted Ideas are then taken forward and linked to Epics, Hills, and Strategic Priorities.This allows us to track and Idea from thought to production in a closed loop fashion.> ProTip: Before submitting an Idea, [](https://www.ibm.com/blogs/bluemix/2016/10/think-write-submit/)read the blog post by Tim Brantner called [Think, Write, Submit: New Ideas Portal for IBM Cloud](https://www.ibm.com/blogs/bluemix/2016/10/think-write-submit/). This incredibly useful article will help you get the most out of Ideas. Theres also an [Aha! Ideas Portals Presentation](https://ibm.box.com/s/0umrd4mygcznc2nap12zed1h8xjv7d2t) you should watch.## Ideas Portals for Watson and Cloud Platform## Watson Health Organization- [Watson Health Ideas Portal](https://demo3.ideas.aha.io/)## Working with Ideas...The Idea is reviewed by the team to determine if the request is “actionable”.If it is Accepted, the Idea is:- Marked Accepted by a Status Change- Prioritized against existing backlogs- Linked to Hills or Epics already created or in plan. Or promoted to Hill or Epic by the teamIf an Idea is Rejected, the status is changed to Will Not Implement. This may be if it is determined to be:- Not aligned with our Strategy- Too costly to implement based on revenue opportunityThe person that submits the Ideas is stored as the “Creator”The Creator receives an email when:| The Owner is responsible to:-----------------------------------|----------------------------The Idea is created | Add a public comment requesting or providing informationThe Idea is updated with a public comment | Link the Idea to an Hill or Epic where appropriateThe Idea transitions states | Transition the state of the Idea_Note: The Owner should comment on the Idea whether it is Accepted or Not, to allow an end-to-end communication with the submitter and the subscribers to the Idea._## Idea Reports and StatusTo begin reviewing your Ideas:1. Create an Ideas List Report that shows the data your team is interested in (for example):- Idea Name- Idea Status- Assigned To- Created By- Record Links- Date Created- Idea Priority2. Filter the Ideas List so that it contains Ideas specific to your team (for example):- Select Product Names- Owning Segment/Owning Team- Idea Priority- Idea Status3. If you would like to see your Ideas Status as a Pie Chart for your team, similar to how they are presented in the Overview (for example):- Reports --> Charts- +New Report --> Start with Example Chart - Pie chart: Structured Ideas Status- Select Product Names- Filter Structured Ideas by Owning Teams",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/aha/ideas/",
    },
    {
      "title": "Aha! - New Offerings Start Heresidebar: toolsbreadcrumb: Aha! Enterprise",
      "text": "---title: Aha! - New Offerings Start Heresidebar: toolsbreadcrumb: Aha! Enterprise---## OverviewThe Watson Health Organization uses Aha! to define our Personas and Strategy, get ideas from our customers, and build our Roadmaps. It integrates with Jira to allow full traceability of key attributes (Hills, Epics, Stories and test cases). You may need to request access differently based on your role in the Organization.## Accessing Aha!Once you have [requested (and received) access](https://apps.na.collabserv.com/wikis/home?lang=en-us#%21/wiki/W7aedad6003f2_46dd_914b_1a3b5195108e/page/2%20-%20Request%20access%20to%20Aha%20Watson%20Health){:target=_blank} to Aha!, you can log in using your w3ID:- [Aha! for IBM Watson Health](https://watsonhealth.aha.io/how_aha_works){:target=_blank}- [Ideas Portals](../ideas/)## Getting Organized in Aha!If your Product is new to Aha! then start here: [Planning and Tracking Work - Getting Organized](../../../dev/planning-and-tracking-work/getting-organized)## Using Aha! for Ongoing DeliveryOnce youve gotten organized, learn how to use Aha! here: [Planning and Tracking Work - Ongoing Delivery](../../../dev/planning-and-tracking-work/ongoing-delivery)## Considerations for working with Hills and Epics in the Watson Health ALM Solution1. [Creating a Hill in Aha!](../aha_create_hill/)1. [Creating an Epic in Aha!](../aha_create_epic/)1. [Pushing an Approved Epic in Aha! to Jira](../aha_push_epic_to_jira/)## Using Aha! NotebooksNotebooks are an easy way to take almost any view from Aha! and publish it as a PDF or a secure web page: [Notebooks](../notebooks)## HelpNeed help? Hit Slack...- [Watson Health Aha! Slack channel](https://ibm-watsonhealth.slack.com/messages/C4262R1JT){:target=_blank}- [Aha Website with Videos, FAQ and Product Management Guidance](http://www.aha.io/roadmapping/guide/product-roadmap){:target=_blank}- [Global OM Site to Learn more about how IBM uses Aha!](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/We1a1010f4f7d_4fe6_bf15_948315eab9d7/page/LEARN%20about%20Aha){:target=_blank}- [Internal Demo with Q&A](https://ibm.ent.box.com/s/7143ppzoficpesaizgvdvbqp71whrmvx){:target=_blank}- [Aha FAQs](../aha-faq)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/aha/index/",
    },
    {
      "title": "Aha! Notebookssidebar: toolsbreadcrumb: Aha! Notebooks",
      "text": "---title: Aha! Notebookssidebar: toolsbreadcrumb: Aha! Notebooks---## OverviewNotebooks are an easy way to take almost any view from Aha! and publish it as a PDF or a secure web Page.## Creating a NotebookTo create or add to an existing notebook simply select export at the top right of any screen and select Create new Notebook or Add to Notebook.  Save as image and save as PDF just saves the current view and does not create a notebook.+ or to add to an existing notebook select an existing notebook+ Hover over Reports-> Notebooks and select Notebooks Overview    + The default name will look like _Notebooks dd/mm/year hr:min._    + Select your Notebook and rename it appropriately.  + Change the Public Title to Product -- Report Type  + Set Public Subtitle to the creation / latest date of the Notebook (e.g. Aug. 17, 2017)  + Set Public description to the following Disclaimer Language (cut and paste the language from below)    + Copyright IBM Corporation 2017.  All rights reserved.  U.S. Government Users Restricted Rights - use, duplication, or disclosure restricted by GSA ADP Schedule Contract with IBM Corporation.    + IBM, the IBM logo, and ibm.com are trademarks or registered trademarks of International Business Machines Corporation in the United States, other countries, or both.  If these and other IBM trademarked terms are marked on their first occurrence in this information with a trademark symbol (® or TM), these symbols indicate U.S. registered or common law trademarks owned by IBM at the time this information was published.  Such trademarks make also be registered or common law trademarks in other countries. A current list of IBM trademarks is available on the Web at “Copyright and trademark information at:  www.ibm.com/legal/copytrade/shtml.    + The information contained in this presentation is provided for informational purpose only.  While efforts were made to verify the completeness and accuracy of the information contained in this presentation, it is provided “as is” without warranty of any kind, expressed or implied. IBM shall not be responsible for any damages arising out of the use of, or otherwise related to, this presentation or any other documentation.    + Any statements of performance are based on measurements and projections using standard IBM benchmarks in a controlled environment. The actual throughput or performance that any user will experience will vary depending upon many factors, including considerations such as the amount of multi-programming in the user’s job stream, the I/O configuration, the storage configuration, and the workload processed. Therefore, no assurance can be given that an individual user will achieve results similar to those stated.    + IBM’s statements regarding its plans, directions, and intent are subject to change or withdrawal without notice at IBM’s sole discretion. The development, release, and timing of any future features or functionality described for our products remains at our sole discretion. Information regarding potential future products is intended to outline our general product direction and it should not be relied on in making a purchasing decision.+ After the notebook is created you will have the option to Generate a PDF or Create a Secure WebPage that contains the content of the notebook.    + When sharing a web page you can control access by selecting the gear and setting Enhance Security appropriately.+ Set the Footer to IBM Confidential and the other fields to your needs.  ",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/aha/notebooks/",
    },
    {
      "title": "Boxsidebar: toolsbreadcrumb: Box Enterprise",
      "text": "---title: Boxsidebar: toolsbreadcrumb: Box Enterprise---Box enables you to securely store and access content in the cloud. It also allows you to share files and collaborate with other IBMers from anywhere on any registered device.Unlimited storage._Unlimited storage!_Box.com is not only approved for IBM Confidential material, but some kinds of client and sensitive data as well. See [Box@IBM Help](https://w3.ibm.com/help/#/article/40138){:target=_blank} for details.Log in here: [https://ibm.box.com](https://ibm.box.com){:target=_blank}> ProTip: Sharing Files with all IBMersBy default, Box.com sets the default permissions to people you invite to share (one by one, using their email address). For _much_ of the content we all work with, you can set the access rights to People in your company. This will open access up to all IBMers. Obviously, you should use this option appropriately, use your judgement.## Troubleshooting> ProTip: Documents and folders have owners, make sure your team takes care of that before people leave, heres a [link with details](https://community.box.com/t5/Collaboration-and-Sharing/How-Do-I-Change-The-Owner-Of-A-Folder/ta-p/149){:target=_blank}.Q: A former IBMer left the company already and I need access to data they previously owned.A: If you need access to data from an inactive Box@IBM account, a Box@IBM Admin can transfer all or some of the data stored in the inactive account to another Box@IBM account.  In order for this request to be processed, the IBM@Box Admin will need the following information emailed to ibmbox@us.ibm.com with a subject line Transfer Ownership- The w3id of the inactive account (ex. ibmbox@us.ibm.com)- The specific folder or data which needs to be transferred- A functional managers approval of this transfer. To speed up the process, please have the functional managers approval before sending the initial email to Box@IBM.Other troubleshooting information [can be found on w3](https://w3.ibm.com/help/#/mac/us_imt/en/article/41366){:target=_blank}.## Watson Health Box FolderComing Soon&trade;",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/box/index/",
    },
    {
      "title": "Cognitive Architectsidebar: toolsbreadcrumb: Cognitive Architect",
      "text": "---title: Cognitive Architectsidebar: toolsbreadcrumb: Cognitive Architect---## OverviewCognitive Architect is the online, IBM Built, replacement for Rational System Architect as a primary tool to build method driven architectures in a team driven manner.## Why Cognitive Architect- Team Driven: Cognitive Architect allows multiple editors on an architecture. This has always been an issue with other Architecture tools, including Rational System Architect.- Artifacts based on [Team Solution Design](http://method.ibm.com/rmchtml_teamsd/index.htm#core.default.nav_view.extend-ibm_lic/guidances/supportingmaterials/welcome_umf_B16D0AC2.html){:target=_blank}, an IBM approved architectural method.- Simple to use! While it doesnt have all the capabilities of larger tool suites, it is under constant development and it is a strategic IBM tool that will continue to improve.## Onboarding- [Info](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/Wb12ce21f626a_40bb_8186_a9781ec83663/page/Cognitive%20Architect){:target=_blank} on Cognitive Architect can be found here.- Access [Cognitive Architect](http://ibm.biz/cogarch-app){:target=_blank} directly from here.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/ca/index/",
    },
    {
      "title": "About Working with Artifacts in Confluencesidebar: toolsbreadcrumb: About Working with Artifacts in Confluence",
      "text": "---title: About Working with Artifacts in Confluencesidebar: toolsbreadcrumb: About Working with Artifacts in Confluence---# DRAFT## Before You BeginConfluence is a collaborative, content management system that is integrated with the WH Jira Solution for the storage and maintenance of project offering documentation that is quality controlled and non-quality controlled. With the right permissions, you can contribute, collaborate and share knowledge and manage documents across teams.When a Project Offering is added to the WH Jira Solution, a structured set of pages are created in Confluence for Market Opportunity & Approach, Offering Releases which includes Define & Prove as well as Build & Deliver, and Sense & Respond, which aligns with the [Offering Management (OM) Wheel](../../../foundation/why/index/).![WH Confluence Page Tree](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_pagetree.png WH Confluence Page Tree)As such, it is important that you understand which type of information you are working with and which category of the Offering Wheel the information appliesfor.-   Market Opportunity & Approach (MOA) page – Designed to hold MOA artifacts,    such as Market Analysis and Prioritization, GxP Assessments or Market Opportunity Playback, to this page.-   Offering Releases page – For a specific release of a Project Offering, the phases of the   OM Wheel that apply are:    -   Define & Prove  ![Define & Prove Pages](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_defineandprove.png Define & Prove Pages)    -   Build & Deliver  ![Build & Deliver Pages](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_buildanddeliver.png Build & Deliver Pages)    For each Project Offering in the Watson Health Jira Solution, the system will create custom pages that are organized by release for Define & Prove and Build & Deliver pages. These pages offer a “dashboard” view of the applicable artifacts for the Offering Release phase. To work (edit/modify) these pages, the Author must follow and apply appropriate WH process and QMS process to complete release-specific artifacts on release-specific pages.  -   Sense & Respond page – Designed to hold Offering level retrospectives to    aid Offering Management in ensuring market viability of Offering Features    from release to release.After attaching appropriate artifacts to the appropriate pages within the Page Tree, the documents can be reviewed.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/confluence/confl_about_artifacts/",
    },
    {
      "title": "Attaching Artifacts in Confluencesidebar: toolsbreadcrumb: Attaching Artifacts in Confluence",
      "text": "---title: Attaching Artifacts in Confluencesidebar: toolsbreadcrumb: Attaching Artifacts in Confluence---# DRAFT## Before You BeginFor each Project Offering in the Watson Health Jira Solution, a structured setof custom pages are created in Confluence for Market Opportunity & Approach, Offering Releases which includes Define & Prove as well as Build & Deliver, and Sense & Respond, which aligns with the [Offering Management (OM) Wheel](../../../foundation/why/index/).![WH Confluence Page Tree](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_pagetree.png WH Confluence Page Tree)With view and edit permissions, an Author can attach artifacts to the appropriate page. Once an artifact is attached, the Author can initiate a Reviewand/or an Approval workflow on the artifact.Applicable role(s): An Author with view and edit capabilities in Confluence.Procedure1.  The Author navigates to the appropriate Confluence page in the Page Tree where the artifact type will reside. For example, locate the Release Ask/Plan artifact on the Project Management page within the Define & Prove section of Offering Releases.    ![Define and Prove Project Management Page](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_dp_projmgmt_relask_a.png Define and Prove Project Management Page)1.  Before the Author attaches the desired artifact to the appropriate Artifacts page in the Uploaded Artifacts section, the Author must carefully determine the filename of the artifact.  >   IMPORTANT TIP: Before attaching the artifact to a specific Artifacts page, it is important to determine the filename of the artifact. Document versioning is dependent on the filename of the document.  >   Every artifact that is uploaded to a Confluence page automatically generates a version of itself. The first time you upload a document, the system assigns this document as Version 1. If you upload an updated document with the same filename, the system up versions the version number to Version 2.  >   Each upload of a document to the system with the same filename up-versions the document version number. However, if you change the filename of the document and upload the document to Confluence, the version number of this document (with a different filename) is set to Version 1.  >   So, choose your document filenames thoughtfully, as you must keep the same filename of your document to continue document versioning on the same document.1.  The Author attaches the desired artifact to the appropriate Artifacts page in the Uploaded Artifacts section. Drag and drop file or use Browse to attach files. Any type document format can be added to the Confluence page. The Uploaded Artifacts section displays information about the attached artifacts, including version history information.    ![Define and Prove, Project Management, Release Ask Plan](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_dp_projmgmt_relask_b.png Define and Prove, Project Management, Release Ask Plan)What to do nextThe document can be readied for a review. See [Reviewing Artifacts in Confluence](../confl_reviewing_artifacts/).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/confluence/confl_attaching_artifacts/",
    },
    {
      "title": "Reviewing Artifacts in Confluencesidebar: toolsbreadcrumb: Reviewing Artifacts in Confluence",
      "text": "---title: Reviewing Artifacts in Confluencesidebar: toolsbreadcrumb: Reviewing Artifacts in Confluence---# DRAFT## Before You BeginFor each Project Offering, a structured set of pages are created in Confluencefor Market Opportunity & Approach, Offering Releases which includes Define& Prove as well as Build & Deliver, and Sense & Respond, which aligns with the [Offering Management (OM) Wheel](../../../foundation/why/index/).Once an artifact is attached to the appropriate page, the Author can initiate a Review on the artifact.Applicable role(s):-   Author with view and edit capabilities in Confluence.-   Reviewer with view and edit capabilities in Confluence.Procedure1.  The Author navigates to the appropriate Confluence page in the Page Tree where the artifact type resides. For example, locate the Release Ask/Plan artifact on the Project Management page within the Define & Prove section of Offering Releases.    ![Define and Prove, Project Management, Release Ask Plan](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_dp_projmgmt_relask_b.png Define and Prove, Project Management, Release Ask Plan)1.  The Author determines the document is ready for review and ensures the “ready for review” document is attached using the same filename.    >   IMPORTANT TIP:  Before attaching the artifact to a specific Artifacts page, it is important to determine the filename of the artifact. Document versioning is dependent on the filename of the document.    >   Every artifact that is uploaded to a Confluence page automatically generates a version of itself. The first time you upload a document, the system assigns this document as Version 1. If you upload an updated document with the same filename, the system up versions the version number to Version 2.    >   Each upload of a document to the system with the same filename up-versions the document version number. However, if you change the filename of the document and upload the document to Confluence, the version number of this document (with a different filename) is set to Version 1.    >   So, choose your document filenames thoughtfully, as you must keep the same filename  of your document to continue document versioning on the same document.1.  The Author clicks Add Review/Approval on the Artifacts page.    ![Add DPP Review/Approval](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_add_dpp_reviewapproval.png Add DPP Review/Approval)1.  From the WH Reviews & Approvals dialog, specify the following information:    a. Name of the Review - This is a free text field.    >   Tip: Include “Review” as part of the name.    b.  Artifact for review – From the drop-down menu, select the attached document for review.    c.  Select WH Quality Review (the default).    ![WH Reviews and Approvals Wizard page](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_reviewapprove_wizard.png WH Reviews and Approvals Wizard page)1.  Click Create. This defines the specified review workflow for the    specified artifact. The review workflow applies for the most current version    (see version history) of the artifact.1.  The Author of the review can view the named Review from the Page Tree    structure in the left navigation as a sub-page to the Artifacts page. The    following screen capture illustrates:    1.  The named Review in the Page Tree    2.  The status of the Review    3.  This is a WH Quality Artifact Review    4.  The Artifact under Review    5.  The status of the Review    ![D&P Release/Ask Plan - Review in Draft status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_review_relask_draft.png D&P Release/Ask Plan - Review in Draft status)1.  The Author of the review clicks Draft (item 2) to work with the review. The Author can Cancel the review or change the status to “In Progress”. If the review is cancelled, the named review is not deleted, and it displays as cancelled. To progress the Review, the Author selects “In Progress”, adds an optional comment, and clicks Submit. Comments added to the review workflow are captured and displayed with the Review Activity information.    ![Changing Review status from Draft to In Progress](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_review_draft_to_inprogress.png Changing Review status from Draft to In Progress)1.  For this Review, the Author clicks Add reviewer to add one or more reviewers.    IMPORTANT: The Author of the Review is the one that initiates the Review workflow. The Author of a Review (or Approval) cannot participate as a Reviewer (or Approver). Once Reviewers are assigned, the reviews occur in parallel, meaning that all Reviewers receive their review assignment simultaneously.    ![Quality Review - Add Reviewer page](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_reviewapprove_addreviewer.png Quality Review - Add Reviewer page)    > Tip: When you have multiple browser pages open, such as the Assign Reviewers page and the Artifact Review page, be sure to refresh the individual browser pages so that the information you are viewing is the most current.1.  The Author of the Review can view information about the review by locating    the named Review from the Page Tree structure. The following screen capture    illustrates:    1. The named Review in the Page Tree    2. The title of the Review    3. The status of the Review    4. This is a WH Quality Artifact Review.    5. The Artifact under Review    6. Information about the Artifact Review    7. Activity Information about the Artifact Review – Note the participants and the pending action for the reviewer.    ![Review page - In Progress](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_review_relask_inprogress.png Review page - In Progress)1.  The Reviewer of the Artifact receives an email notification of the review    assignment. The review assignment is also displayed on the Reviewer’s    Confluence dashboard page under My Comala Workflows Tasks. Comala is a    plug-in to Confluence which handles reviews and approvals.2.  The Reviewer clicks the link for the Review to open the Review page.3.  From the named Review page, you can see from (1) that this is a WH Quality    Artifact Review for the specified artifact. To open the Quality Review    dialog, the Reviewer clicks the In Progress link as illustrated in (2).    ![Review page for Reviewer](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_reviewer_opens_assignment.png Review page for Reviewer)1.  From within the Quality Review dialog, the Reviewer enters a Comment    (required field) and clicks either Approve or Reject. Comments added    to the review workflow are captured and displayed with the Review Activity    information.    ![Reviewer response](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_reviewer_responds.png Reviewer response)    Important: Even though this is a review workflow, the Reviewer must either Approve or Reject the document under Review. The Reviewer must provide a comment in the Quality Review dialogue. This comment applies to the activity of reviewing the artifact. If the Reviewer wants to provide detailed comments within a copy of the document to the Author, the Reviewer can share their comments directly with the Author of the Review outside of the review workflow. The Reviewer cannot attach an updated document which includes their comments to the Artifact Review. The document in the Review workflow cannot be altered by any individual or the system.1.  Once the Reviewer clicks Approve or Reject for the review, the    Activity section of the named Review page reflects the approval or rejection    of the document for the Reviewer.    ![Reviewer approves](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_reviewer_approves.png Reviewer approves)    Note:    -   If one Reviewer rejects the document, the review workflow is rejected, and the status of the Review is “Rejected”.    -   After all assigned Reviewers approve the document, the review workflow is approved, and the status of the Review is “Approved”.1.  Once the Review is completed, the Activity panel of the named Review page displays the information about the review for the artifact. The time stamps values reflect time stamps of the server.    ![Review page - Approved](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_review_relask_approved.png Review page - Approved)1.  (Optional) The Author of the Review can optionally view a detailed audit    trail or log of the Review by viewing the Activity Log for the Review. To    view the Activity Report, complete the following steps:    1.  Locate the named Review page. You can locate the link to the named        Review page from the Artifacts page.    2.  Click the status link.    3.  Click the 3 dots icon for more options.    4.  Click Activity Report.    ![Finding the Review Activity Report](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_review_relask_activityreport_find.png Finding the Review Activity Report)    The following shows the Activity Report for the example Review.  The Activity Report is exportable in CSV format.    ![Review Activity Report](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/confluence/confl_review_relask_activityreport.png Review Activity Report)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/confluence/confl_reviewing_artifacts/",
    },
    {
      "title": "Confluencesidebar: toolsbreadcrumb: Atlassian Confluence",
      "text": "---title: Confluencesidebar: toolsbreadcrumb: Atlassian Confluenceweight: 5---Confluence Enterprise is our Watson Health document management solution integrated with Jira.Confluence provides a single place to store documentation and tie it to requirements, process flows, design and issues. It also provides a comprehensive collaboration capability that allows our teams to provide feedback on documentation and edit collaboratively.## Getting Access### WARNING: Jira/Confluence is still under development and is not in production yet for Watson Health- Confluence can be accessed [here](https://vbc-confluence.watson-health.ibm.com/){:target=_blank}.## Considerations for Working in a WH Confluence Spaces1. [About Working with Artifacts in Confluence](../confl_about_artifacts)1. [Attaching Artifacts in Confluence](../confl_attaching_artifacts)1. [Reviewing Artifacts in Confluence](../confl_reviewing_artifacts)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/confluence/index/",
    },
    {
      "title": "Configuring Git Commit Message Promptssidebar: toolsbreadcrumb: Configuring Git Commit Message Prompts",
      "text": "---title: Configuring Git Commit Message Promptssidebar: toolsbreadcrumb: Configuring Git Commit Message Prompts---# DRAFT## Before You BeginWatson Health development teams require the ability to reliably associate their source code commits to repositories hosted at [github.ibm.com](https://github.ibm.com/){:target=_blank} with issues managed in their respective Jira Development and Test projects.The IBM hosted [github.ibm.com](https://github.ibm.com/){:target=_blank}  environment does not offer server-side hook support for operations, such as those associated with Git commit formatting standards.  Therefore, it is the responsibility of Watson Health development teams working in the [github.ibm.com](https://github.ibm.com/){:target=_blank} environment to self-manage their Git repositories and the commit procedures for those repositories.This topic describes options available for Watson Health development teams to configure local Git repository commit procedures. Review the techniques for referencing the correct Jira Issue ID when commits are made.Options 1 and 2 are relevant when using the Git command line client and Option 3 is relevant when working exclusively in Eclipse. Option 1 is relevant for all development environments.Applicable Role:  WH Developer## Option 1:  Creating a local Git repository hook (_Recommended in all development environments_)Option 1 describes how to implement a local Git repository hook. For each repository that a user loads locally to their workstation, they will install a `prepare-commit-msg` hook to programmatically enforce the following comment standard:`  comment describing change `### Example:`WOSD-23 change to implement new functionality`### Dependencies1. You must manually create a `prepare-commit-msg` hook in each local Git repository you are working with.1. Private branch names must be named identically to the Jira issue you are working on; for example: `WHDD-40`.1. You must complete your commits from the command line using the following syntax:    `git commit -m comment describing change`    Example:    ```    Lewiss-MacBook-Pro:test1 lewiswhite$ vi test1.md    Lewiss-MacBook-Pro:test1 lewiswhite$ git add test1.md    Lewiss-MacBook-Pro:test1 lewiswhite$ git commit -m auto prepend branch name    [WHDD-40 a005078] WHDD-40 auto prepend branch name     1 file changed, 1 insertion(+)    ```        The resulting commit message which identifies the commit with the specified Jira Issue ID is as follows:    `[WHDD-40 a005078] WHDD-40 auto prepend branch name`### Procedure1. Manually create a `prepare-commit-msg` hook in each local Git repository you are working with.1. For each local repository that you are working with, create a private branch named identical to the Jira Issue ID you are working on; for example: `WHDD-40`.1. Create a file in your `hooks` directory named `prepare-commit-msg`.    ![Create prepare-commit-msg file](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/github/git_create_preparecommitmsg.png Create prepare-commit-msg file)1. Populate the file with the following hook script content:    ```bash    #!/bin/bash    # This is how you can customize which branches should be    # skipped when prepending a commit message.    if [ -z $BRANCHES_TO_SKIP ]; then      BRANCHES_TO_SKIP=(master develop test)    fi    BRANCH_NAME=$(git symbolic-ref --short HEAD)    BRANCH_NAME=${BRANCH_NAME##/}    BRANCH_EXCLUDED=$(printf %s\n ${BRANCHES_TO_SKIP[@]} | grep -c ^$BRANCH_NAME$)    BRANCH_IN_COMMIT=$(grep -c \[$BRANCH_NAME\] $1)    if [ -n $BRANCH_NAME ] && ! [[ $BRANCH_EXCLUDED -eq 1 ]] && ! [[ $BRANCH_IN_COMMIT -ge 1 ]]; then      sed -i.bak -e 1s/^/$BRANCH_NAME / $1    fi    ```    1. Now that the hook script is created, issue the following command from the command line to execute the hook:    `chmod u+x .git/hooks/prepare-commit-msg`.1. To use the hook, perform your Git commits from the command line; for example:    ```    Lewiss-MacBook-Pro:test1 lewiswhite$ vi test1.md    Lewiss-MacBook-Pro:test1 lewiswhite$ git add test1.md    Lewiss-MacBook-Pro:test1 lewiswhite$ git commit -m auto prepend branch name    [WHDD-40 a005078] WHDD-40 auto prepend branch name (resulting commit message)     1 file changed, 1 insertion(+)    ```## Option 2: Creating custom commit messages for Command Line CommitsUse the Git `commit.template` custom commit template to provide a customized reminder of the proper format and style when creating a commit message.  Using this custom commit function provides a prompt when running the `git commit-m` command to use the proper format.Complete the following client-side implementation to create the custom commit message.### Procedure1. Create a file named `.gitmessage.txt` and add the file to your user `home` directory.1. Populate the gitmessage file with the following content:    ```    WH Development commit format:     what changed in less than 50 characters    Ex: WHDD-40 app install path change    ```1. Issue the following command from the command line to set the `commit.template` path to the location of the `.gitmessage.txt` file:    ```    git config --global commit.template \~/.gitmessage.txt    ```        Sample commit message prompt:    ```    WH Development commit format:     what changed in less than 50 characters    Ex: WHDD-40 app install path change    ```        For additional information, reference: [Customizing Git - Git Configuration](<https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration){:target=_blank}## Option 3:  Creating local dictionary file for Git Commits from EclipseWhen using Eclipse for Git commits, use a local dictionary file to help ensure that your Git commits are associated with the correct Jira Issue ID.### Procedure1.  Create a local user dictionary text file, with the filename, `userdictionary.txt`,  and put this file in your user `home` directory.  This file acts as a spell-checker to ensure that the Jira Issue ID associated with your Git commits via Eclipse are properly spelled.1. At minimum, add your Jira project keys to the dictionary text file. By adding your Jira project keys to the dictionary file, the system will prompt you if there are misspellings of the Jira Issue ID in your Git commit.    For example, the Jira project keys for the Watson for Oncology project development and test areas are `WOSD` and `WOST`, respectively. By adding the Jira project keys `WOSD` and `WOST` to your local user dictionary file, you will receive a prompt on your Git commit if you misspelled the Jira Issue ID.    Once implemented, use `CNTRL +1` on Windows or `COMMAND +1` on the Mac which offers auto correct options, as depicted in the following illustration:    ![Example Auto correct options](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/github/git_exampleautocorrectoptions.png Example Auto correct options)1. Once your `userdictionary.txt` file is created in your `home` directory, from Eclipse, select Eclipse > Preferences.     ![Select Eclipse > Preferences](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/github/git_eclipsepreferences.png Select Eclipse > Preferences)1. Expand General-\>Editors-\>Test Editors, then select Spelling    ![Spelling Test Editor](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/github/git_spellingtesteditor.png Spelling Test Editor)    a. In Spelling preferences, clear the selection of (deselect) the following:    ```    Ignore words with digits    Ignore upper case words    ```        b. Browse for and select your User defined dictionary.    c. Click Apply and Close.        ![Change Spelling preferences](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/github/git_changespellingpreferences.png Change Spelling preferences)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/github/github_configcommitmsg/",
    },
    {
      "title": "GitHub Enterprisesidebar: toolsbreadcrumb: GitHub Enterprise",
      "text": "---title: GitHub Enterprisesidebar: toolsbreadcrumb: GitHub Enterprise---GitHub Enterprise (GitHub, or GHE) is a web-based [Git](http://git-scm.com){:target=_blank} repository hosting service offered by the [CIOs office](https://whitewater.ibm.com/){:target=_blank} and lives within the IBM Firewall. It offers distributed revision control, source code management, project issue tracking, and access control in support of a [collaborative](https://whitewater.ibm.com/field-guide/practices/social-coding){:target=_blank} development workflow.## Getting Access- GitHub is automatically available to all IBMers (including contractors). Log in with your w3ID here: [http://github.ibm.com](http://github.ibm.com){:target=_blank}  IMPORTANT:  IBMers and contractors requiring access to git repositories associated with Watson Health must first complete [HIPAA Training](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/W6a642739bb36_44d9_90cd_f2ec86efebbe/page/HIPAA%20Training){:target=_blank}.## Social CodingGitHub is designed as a [Social Coding](https://whitewater.ibm.com/field-guide/practices/social-coding){:target=_blank} platform, and as such source code is expected to be _publicly available_ (available only to IBMers inside the IBM Firewall). GHE, and especially Social Coding on it, are [approved for Proprietary Source Code development](https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W591f471daa37_4d0e_b162_c3a4c07e0f9e/page/Source%20Code%20Asset%20Protection%20Guidelines){:target=_blank}.- Jewel Code is allowed if [specific policies are followed](https://whitewater.ibm.com/field-guide/policies/repository-visibility){:target=_blank}.- Special Watson Group Projects that complete with a client retaining the IP (as opposed to IBM) _can now be allowed_ on GHE as long as [specific policies are followed](../../client-owned-ip/).## Terminology- term: Organization  definition: >    A top-level repository owner designed to simplify [management and permissions](https://github.com/blog/2020-improved-organization-permissions){:target=_blank} of group-owned repositories, including the ability to divide a group up in to teams with specific repository access and permissions.- term: Team  definition: >    An collection of users in an organization that can be granted specific permissions to specific organization-owned repositories and can be notified by `@mentioning` the team name.- term: Repository  definition: >    Source code with included issues and optional wiki. This is the home for a project and cross-discipline team communication and collaboration about that project.## Tracking Jira Issues with Git1. [Configuring Git commit messages to aid local Git repository commit procedures](../github_configcommitmsg)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/github/index/",
    },
    {
      "title": "Jirasidebar: toolsbreadcrumb: Atlassian Jira",
      "text": "---title: Jirasidebar: toolsbreadcrumb: Atlassian Jiraweight: 5---The Watson Health instance of Jira Enterprise is a web-based software project management tool for agile teams and lives within the IBM Firewall.Jira provides requirements management, project management, reporting on implementation status, process control, and issue tracking.## Getting Access### WARNING: Jira/Confluence is still under development and is not in production yet for Watson Health1. Offering Managers must request access to the Jira/Confluence instance through their management2. Offering Managers can then onboard their offerings by filling out the [onboarding request form](https://vbc-jira.watson-health.ibm.com/secure/CreateIssue.jspa?pid=18878&issuetype=12){:target=_blank}3. Finally, Offering Managers can request [access for project users](https://vbc-jira.watson-health.ibm.com/secure/CreateIssue.jspa?pid=13687&issuetype=12500){:target=_blank} to the [Watson Health Instance](https://vbc-jira.watson-health.ibm.com){:target=_blank}.## Considerations for Working in a Requirements Project  Overview1. [Working in WH Jira Requirements Projects](../jira_reqs_overview)1. [Working with DCRs in WH Jira Requirements Projects](../jira_reqs_dcr_overview)  Working with 3-Tier Requirements Projects1. [(3-Tier) Progressing High Level Feature Requirements from Draft to Approved](../jira_3tier_hl_reqs_draft_to_approved)1. [(3-Tier) Decomposing HL Feature Requirements to SL User Requirements](../jira_3tier_decomposing_hl_to_sl)1. [(3-Tier) HL Baselining SL User Requirements](../jira_3tier_hl_baseline_sl_requirement)1. [(3-Tier) Decomposing SL User Requirements to DL Requirements](../jira_3tier_decomposing_sl_to_dl)## Considerations for Working in a Development Project1. [Setting up your Development work environment](../jira_setup_devenv_GitHub)1. [Configuring Git commit messages to aid local Git repository commit procedures](../../github/github_configcommitmsg)1. [Working with Development Stories](../jira_workingwithdevstories)1. [Working with Development Tasks](../jira_workingwithdevtasks)1. [Addressing Bug issues opened by Test](../jira_bugfromtest_workflow)## Considerations for Integrating External Applications1. [Creating an OAuth Token for Integrating External Applications with Jira](../jira_integrating_externalapps)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/index/",
    },
    {
      "title": "(3-Tier) Decomposing HL Feature Requirements to SL User Requirementssidebar: toolsbreadcrumb: (3-Tier) Decomposing HL Feature Requirements to SL User Requirements",
      "text": "---title: (3-Tier) Decomposing HL Feature Requirements to SL User Requirementssidebar: toolsbreadcrumb: (3-Tier) Decomposing HL Feature Requirements to SL User Requirements---# DRAFT## Before You BeginFor Watson Health (WH) Offerings that are following a 3-Tier model for requirements, Requirements Authors work with and decompose High Level (HL) Feature Requirements into one or more System Level (SL) User Requirements, which can then be groomed into one or more Detail Level (DL) Requirements. The HL Feature Requirement is functionally equivalent to the Epic in Aha! such that there is a one-to-one (1-to-1) mapping between the HL Feature and the Epic. SL User Requirements and the associated DL Requirements are the requirements that define the work that is sent to Development for their development work. SL User Requirements must be approved before baselining the requirement.The Watson Health Application Lifecycle Management (ALM) Solution automatically sets the relationship between the HL Feature Requirement and SL User Requirement and handles the tracing between the requirements. Review the [Traceability Metamodel](../../index#traceability-metamodel) which illustrates the relationships between an Epic in Jira, a Design Change Request (DCR) and requirements.For WH Requirements projects in the WH ALM Solution:- High Level (HL) Feature Requirements are prefixed by HL: and are type = High Level Feature- System Level (SL) User Requirements are prefixed by UR: and are type = System Level Requirement- Detail Level (DL) Requirements are prefixed by DL: and are type = Detail Level RequirementApplicable Role(s):  WH Requirements Author## Procedure1. The Requirements Author confirms the HL Feature Requirement is in “Approved” status by viewing the Requirements Kanban board or viewing the detailed page for the HL Feature Requirement.1. From the approved HL Feature Requirement, the Requirements Author clicks the Add SL button to create a System Level (SL) User Requirement.   ![Add Sl button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_decompose_hl_sl_addsl_button.png Add SL button)1. Navigate to the newly created SL User Requirement in one of the following ways:- In the Issue Links \> Satisfied By section of the HL Feature Requirement detailed view, click the issue hyperlink.     ![Issue hyperlink](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_decompose_hl_sl_issue_link.png Issue hyperlink)    - From the Kanban board, click the SL User Requirement located in the Draft column of the  System Level Req (SL) (1) and then click the SL User Requirement link in the preview pane (2).      ![SL User Requirement](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_decompose_hl_sl_kanban_sl_req.png SL User Requirement)1. Click the Edit button on the SL User Requirement detailed view screen.![Edit button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_decompose_hl_sl_edit_btn.png Edit button)1. In the edit window, at a minimum, populate the following required fields:- Assignee- Summary- Acceptance Criteria- Requirement Statement- Requirement Type Classification- Description (optional field that can be used to provide additional information about the Requirement Statement)1. When you are finished editing the fields, click Update.>Tip: You might receive a Workflow Error message if you did not complete a required field. Just edit the SL User Requirement to add the required information and click Update.1. Move the SL User Requirement from “Draft” status to “In Review” status by either dragging it to the In Review column on the Kanban board, or by clicking the Ready for Review button on the detailed view screen. The Review is an informal review for Requirements Authors to use within their teams and it is not tracked with electronic signature.   ![Ready for Review button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_decompose_hl_sl_ready_review_btn.png Ready for Review button)>Tip: If you have multiple browser pages open, such as the Kanban view and the detailed view of the HL or other pages, be sure to refresh the individual browser pages so that the information you are viewing is the most current.The SL User Requirement is now “In Review” status.1. When ready to approve the SL User Requirement, drag it to the Approved column on the Kanban board, or click the Approve button on the detailed view screen. The Approval is an informal approval for Requirements Authors to use within their teams and approval is not tracked with electronic signature.   ![Approve button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_decompose_hl_sl_approve_btn.png Approve button)## What to do nextNow that the SL User Requirement is approved, the Requirements Author can now [progress the SL User Requirement to “HL Baselined” status](../jira_3tier_hl_baseline_sl_requirement/).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/jira_3tier_decomposing_hl_to_sl/",
    },
    {
      "title": "(3-Tier ) Decomposing SL User Requirements to DL Requirementssidebar: toolsbreadcrumb: (3-Tier ) Decomposing SL User Requirements to DL Requirements",
      "text": "---title: (3-Tier ) Decomposing SL User Requirements to DL Requirementssidebar: toolsbreadcrumb: (3-Tier ) Decomposing SL User Requirements to DL Requirements---# DRAFT## Before You BeginFor Watson Health (WH) Offerings that are following a 3-Tier model for requirements, Requirements Authors work with and decompose High Level (HL) Feature Requirements into one or more System Level (SL) User Requirements which can then be groomed into one or more Detail Level (DL) Requirements.Once the SL User Requirement and its associated HL Feature Requirement is in “HL Baselined” status, and the required Design Change Request (DCR) Release documentation artifacts are added to the DCR for the release, the Requirements Author can decompose a SL User Requirement  into one or more DL Requirements.SL User Requirements and the associated DL Requirements are the requirements that define the work that is sent to Development for their development work.The Watson Health Application Lifecycle Management (ALM) Solution automatically sets the relationship between the HL Feature Requirement and associated SL User Requirement(s) and DL Requirement(s), and handles the tracing between the requirements. Review the Traceability Metamodel [Traceability Metamodel](../../index#traceability-metamodel) which illustrates the relationships between an Epic in Jira, a Design Change Request (DCR) and requirements.For WH Requirements projects in the WH ALM Solution:- High Level (HL) Feature Requirements are prefixed by HL: and are type = High Level Req- System Level (SL) User Requirements are prefixed by UR: and are type = System Level Req- Detail Level (DL) Requirements are prefixed by DL: and are type = Detail Level ReqApplicable Role(s):  WH Requirements Author## Procedure1. The Requirements Author confirms the SL User Requirement  is in “HL Baselined” status by viewing the Requirements Kanban board or viewing the detailed page for the SL User Requirement . The Requirements Author also checks that the required DCR Release documentation artifacts have been added to the DCR by viewing the DCR. When these conditions are true, a SL User Requirement can be decomposed into one or more DL Requirements by the Requirements Author.1. From the SL User Requirement, the Requirements Author clicks the Add DL button to add a DL Requirement.![Add DL button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_decomp_sldl_adddl_btn.png Add DL button)1. Navigate to the newly created DL Requirement in one of the following ways:- In the Issue Links \> Satisfied By section of the SL User Requirement , click the issue hyperlink.![Issue hyperlink](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_decomp_sldl_issuelink.png Issue hyperlink)- From the Kanban board, click the DL Requirement located in the Draft column of the Detail Level Req (SL) swim lane. Then click the DL Requirement link in the preview pane to open the detailed view of the DL Requirement.     ![SL User Requirement ](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_decomp_sldl_kanban.png SL User Requirement )1. Click the Edit button on the DL detailed view screen.![Edit button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_decomp_sldl_edit_btn.png Edit button)1. In the edit window, at a minimum, populate the following required fields:- Assignee- Summary- Requirement Statement- Requirement Type Classification- Description   Note: The system automatically copies the following values from the SL User Requirement  to the DL Requirement; however, these values can be updated in the edit issue page.     - Component     - Acceptance criteria     - User Need     - Non-functional Category     - Label Category1. When you are finished editing the fields, click Update.1. Move the DL Requirement from “Draft” status to “In Review” status by either dragging it to the In Review column on the Kanban board, or by clicking the Ready for Review button on the detailed view page.   ![Ready for Review button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_decomp_sldl_rdy_review_btn.png Ready for Review button)   >Tip: If you have multiple browser pages open, such as the Kanban view and the detailed view of the HL or other pages, be sure to refresh the individual browser pages so that the information you are viewing is the most current.1. When ready to approve the DL Requirement, drag it to the Approved column on the Kanban board, or click the Approve button on the detailed view page.   ![Approve button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_decomp_sldl_approve_btn.png Approve button)1. The DL Requirement is now in “Dev Backlog” status and the system automatically generates a Development Story issue in the Offering’s Development project.  The Development Story is in “Dev Backlog” status. There is a 1-1 mapping between the Development Story to the DL Requirement.   From the Issue Links section of the DL Requirement, you can view the relationship of the DL to its associated SL User Requirement  and the generated Development Story.   ![DL/SL relationship](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_decomp_sldl_relationship.png DL/SL relationship)## What to do nextDevelopment can work with and assess the generated Development Epic and Development Story for implementation.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/jira_3tier_decomposing_sl_to_dl/",
    },
    {
      "title": "(3-Tier) HL Baselining SL User Requirementssidebar: toolsbreadcrumb: (3-Tier) HL Baselining SL User Requirements",
      "text": "---title: (3-Tier) HL Baselining SL User Requirementssidebar: toolsbreadcrumb: (3-Tier) HL Baselining SL User Requirements---# DRAFT## Before You BeginFor Watson Health (WH) Offerings that are following a 3-Tier model for requirements, Requirements Authors work with and decompose High Level (HL) Feature Requirements into one or more System Level (SL) User Requirements which can then be groomed into one or more Detail Level (DL) Requirements. SL User Requirements and the associated DL Requirements are the requirements that define the work that is sent to Development for their development work. SL User Requirements must be approved before baselining the requirement.Once the following conditions are true, a Requirements Author can _HL Baseline_ the SL User Requirement(s).- The SL User Requirement that is associated with the HL Feature Requirement is in “Approved” status;- The DCR for the release (the _Fix Version_ of the HL Feature Requirement) is in “Approved” statusTo _HL Baseline_ the SL User Requirement means to establish the high level design input baseline marker or milestone at a point in time. When the SL User Requirement is in _“HL Baselined”_ status, the SL User Requirement becomes read-only. At this point, a Requirements Author can only update the SL User Requirement with comments and any changes to the SL User Requirement are made through the Watson Health Change Control process.When all associated SL User Requirements for a given HL Feature Requirement are in _“HL Baselined”_ status, the HL Feature Requirement itself transitions to _“HL Baselined”_ status. When the HL Requirement is in _“HL Baselined”_ status, the HL Feature Requirement becomes read-only. At this point, a Requirements Author can only update the HL Feature Requirement with comments and any changes are made through the Watson Health Change Control process.When a SL User Requirement and the HL Feature Requirement are both in _“HL Baselined”_ status, the system creates an Epic in the Offering’s Development project area of Jira in the WH Application Lifecycle Management (ALM) Solution. The Epic in the Development project is a clone of the approved SL User Requirement. Applicable Role(s):  WH Requirements Author## Procedure1. The Requirements Author confirms the SL User Requirement is in “Approved” status by viewing the Requirements Kanban board or viewing the detailed page for the SL User Requirement.1. From the approved SL User Requirement, the Requirements Author clicks the HL Baseline button to baseline the SL Requirement.   ![HL Baseline button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_hl_baseline_sl_hlbaseline_btn.png HL Baseline button)1. The SL Requirement is now in “HL Baselined” status.![HL Baselined status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_hl_baseline_sl_hlbaselined_status.png HL Baselined status)1. The Requirements Author completes the required Design release documentation.  For 3-Tier Requirements projects, use the Design Input Specification template WH_QMS_TPL_0021.  Follow applicable Standard Operating Procedures and procedures for this manual step.1. When the appropriate design documentation is approved, the Requirements Author works with the DCR Author to add the approved document information to the DCR for the release. The DCR Author clicks Add Approval.   ![Add Approval button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_hl_baseline_sl_add_appv_btn.png Add Approval button)1. The Add Approval page opens.  Select the Document Generation Type from the drop-down menu and compete the required fields following the help text instructions.  Click Add Approval to complete this page.   ![The Add Approval page](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_hl_baseline_sl_add_appv_pg.png The Add Approval page)1. From the DCR, the approved document is added to the Release Documentation tab.   ![Release Documentation tab details](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_hl_baseline_sl_doc_tab.png Release Documentation tab details)1. Now that HL Baselining activities are completed, the Requirements Author navigates to the SL User Requirement, which is in “HL Baselined” status, and clicks Add DL to add a Detail Level Requirement to the SL User Requirement.   ![Add DL button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_hl_baseline_sl_add_dl_btn.png Add DL button)1. From the Issue Links section of the SL User Requirement, see the traceability of the SL User Requirement to the associated HL Requirement by the Satisfies relationship and that the associated HL Feature Requirement is also in “HL Baselined” status.   For this example, there is only one SL User Requirement associated with the HL Feature Requirement. If there were more than one SL User Requirement associated with the HL Feature Requirement, when all the associated SL User Requirements are in “HL Baselined” status, the HL Requirement transitions to “HL Baselined” status.   ![Traceability of the SL User Requirement to the associated HL Requirement](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_hl_baseline_sl_satisfies_relation.png Traceability of the SL User Requirement to the associated HL Requirement)1. When the SL User Requirement is in “HL Baselined” status, the system automatically generates a Development Epic in the Development project. The Development Epic is in “Dev Backlog” status. There is a 1-1 mapping between Development Epics to SL User Requirements.## What to do nextOnce the SL User Requirement is in “HL Baselined” status and the DCR for the release has been updated to include required Release Documentation, the Requirements Author can then [add Detail Level (DL) Requirements to the SL User Requirement](../jira_3tier_decomposing_sl_to_dl/).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/jira_3tier_hl_baseline_sl_requirement/",
    },
    {
      "title": "(3-Tier) Progressing High Level Feature Requirements from Draft to Approvedsidebar: toolsbreadcrumb: (3-Tier) Progressing HL Feature Requirements from Draft to Approved",
      "text": "---title: (3-Tier) Progressing High Level Feature Requirements from Draft to Approvedsidebar: toolsbreadcrumb: (3-Tier) Progressing HL Feature Requirements from Draft to Approved---# DRAFT## Before You BeginAfter Offering Management approves an Epic in Aha! and pushes the Epic into a Jira Requirements project, the Epic comes into Jira as a non-modifiable Epic.If the Watson Health (WH) Offering is following a 3-Tier model for Requirements, which models IBM Design Thinking Hill-Epic-Story approach, the WH Application Lifecycle Management (ALM) Solution automatically creates the following in the Jira Requirements project:- a non-modifiable Epic in Jira which links back to the Aha! Epic;- a Design Change Request (DCR) in Jira for the Release (if it doesn’t already exist) and links the DCR for the release to the Epic; and- a High Level Feature Requirement (HL). The HL Feature Requirement is functionally equivalent to the Epic in Aha! such that there is a one-to-one (1-to-1) mapping between the HL Feature and the Epic. Requirements Authors can work with and decompose HL Feature Requirements into one or more System Level (SL) User Requirements and further decompose SL User Requirements into one or more Detail Level (DL) Requirements to send to development teams.A WH Offering establishes whether it follows a 2-Tier model for Requirements or a 3 Tier Model for Requirements in the Offering’s request to be onboarded to the WH Jira Solution. The established requirements model is set for the life of the WH Offering in the WH ALM Solution cannot be changed. See [Onboarding a Project Offering to the WH Application Lifecycle Management (ALM) Solution](../../onboarding/request_onboarding_project_offering/) for more information.The following illustration depicts the relationship between an Epic that is pushed from Aha! to the non-modifiable Epic and the generated HL Feature Requirement in the Jira Requirement project. ![Relationship between Aha! Epics and HL Feature Requirements](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_overv_ahaepic_toreqs.png Relationship between Aha! Epic and HL Feature Requirements)Applicable Role(s):  WH Requirements Author## Procedure1. Navigate to and open the HL Feature Requirement in your Offering’s Requirement project.    A. Locate the HL Feature Requirement in your Offering’s Requirements project on the Kanban board.    B. Preview the HL Feature Requirement by clicking on the HL Feature Requirement.    C. Open the detailed view of the HL Feature Requirement by clicking the link to the HL Feature Requirement from the preview.![Kanban board view of HL Feature Requirement](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_progresshl_kanban_view.png Kanban board view of HL Feature Requirement)1. The HL Feature Requirement detailed view is open.  The HL Feature Requirement is in “Draft” status.![HL Feature Requirement detailed view](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_progresshl_detail_view.png HL Feature Requirement detailed view)1. Confirm that the Requirement Statement field is populated as this is a required field before you can begin decomposing the HL Feature Requirement.1. To begin working on the HL Feature Requirement, assign the HL Feature Requirement.  You can assign it to yourself by clicking the Assign to me link or by clicking the i key on your keyboard. To assign it to someone else, click the Assignee field and enter a name.   ![Assign an owner](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_progresshl_assign.png Assign an owner)> Tip: Because of the mapping of the HL Feature Requirement to the Epic in Jira, you cannot change the Name, Summary, or Requirements Statement fields of the HL Feature Requirement.1. Move the HL Feature Requirement from “Draft” status to “In Review” status by either dragging it to the In Review column on the Kanban board, or by clicking the Ready for Review button on the detailed view screen. The Review is an informal review for Requirements Authors to use within their teams and it is not tracked with electronic signature.   ![HL Ready for Review button and HL Kanban board view](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_progresshl_ready_review_btn.png HL Ready for Review button and HL Kanban board view)The HL Feature Requirement is now in “In Review” status.![HL with a status of In Review](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_progresshl_in_review_status.png HL with a status of In Review)> Tip: If you have multiple browser pages open, such as the Kanban view and the detailed view of the HL or other pages, be sure to refresh the individual browser pages so that the information you are viewing is the most current.1. When ready to approve the HL Feature Requirement, drag it to the Approved column on the Kanban board, or click the Approve button on the detailed view screen. The Approval is an informal approval for Requirements Authors to use within their teams and approval is not tracked with electronic signature.   ![HL Approve button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_progresshl_approve_btn.png HL Approve button)1. When the HL Feature Requirement is in “Approved” status, you can:- Click Add SL - to add a System Level (SL) User Requirement that is associated with the HL Feature Requirement;- Click Change – to change the HL back to “Draft” status; or- Click Retire – to retire or obsolete the requirement.![Add SL, Change, and Retire buttons](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_3t_progresshl_approved_status.png Add SL, Change, and Retire buttons)## What to do nextTo continue working with the HL Feature Requirement, [add a System Level User Requirement](../jira_3tier_decomposing_hl_to_sl/).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/jira_3tier_hl_reqs_draft_to_approved/",
    },
    {
      "title": "Addressing Bug Issues opened by Test  sidebar: tools  breadcrumb: Addressing Bug Issues opened by Test",
      "text": "---  title: Addressing Bug Issues opened by Test  sidebar: tools  breadcrumb: Addressing Bug Issues opened by Test---# DRAFT## Before You BeginAfter a Bug issue is created against development code as a result from an Xray Test, Development addresses the Bug issue.Applicable Roles:  WH Developer, Xray Test Team Member, Xray Test Team LeadPre-requisite:  An Xray Test Team Member or Xray Test Team Lead has created a Bug issue in the appropriate Jira Development project area.A WH Developer completes the following procedure to address the Bug issue.## Procedure1.  From the Jira Development project, open Issues and click the My open issues filter to view open issues assigned to you (the WH Developer).![My open issues filter](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_myopenissues.png My open issues filter)1. From the Open Issues list, open the Bug issue. Upon opening the Bug, the Developer has the following options: Assign the Bug to a different Developer; Start Working on the Bug; or Return the Bug issue to the person who reported the Bug for more information and request Info Needed.![Dev Assigns, Starts Work or Requests Info Needed](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_bugoptions_assignstartwkorneedinfo.png Dev Assigns, Starts Work or Requests Info Needed)1. To begin working on the Bug issue, click Start Working.  This action assigns the Bug to you and transitions the Bug to In Progress status.![Bug: In Progress status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_buginprogress.png Bug: In Progress status)1.  Once unit testing activities are performed and the fix is uploaded to GitHub, click Verify to transition the Bug to In Test status.![Bug: In Test status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_bugintest.png Bug: In Test status)1.  Once the Bug is in In Test status, specify an Assignee, add a comment such as Ready to re-test, and click Assign to assign the Bug to an appropriate test team member to re-test.![Assign Bug to retest](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_bugintest_retest.png Assign Bug to retest)1.  The Tester tests to check if the Bug is fixed. If the Tester finds the Bug is not fixed, the Tester clicks Fail Verification and reassigns the Bug to the original Developer.![Tester specifies Bug fix fails](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_bugfixresult_fail.png Tester specifies Bug fix fails) If the Tester verifies the Bug is fixed, the Tester clicks Testing Complete to transition the Bug to Verified status.![Tester specifies Bug fix complete](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_bugfixresult_complete.png Tester specifies Bug fix complete)![Bug: Verified status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_bugfixresult_verified.png Bug: Verified status)## Next StepsThe Developer can check the status of Bug issues that they have performed work against in the Issue Links section of the parent Story.![Story:  Issue Links](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_story_issuelinks.png Story:  Issue Links)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/jira_bugfromtest_workflow/",
    },
    {
      "title": "Decomposing High Level Requirementssidebar: toolsbreadcrumb: Decomposing High Level Requirements",
      "text": "---title: Decomposing High Level Requirementssidebar: toolsbreadcrumb: Decomposing High Level Requirements---# DRAFT## Before You BeginAfter Offering Management approves an Epic in Aha! and pushes the Epic into a Jira Requirements project, the Epic comes into Jira as a non-modifiable Epic. Jira automatically creates an associated High Level (HL) Requirement in the Requirements project. Requirements Authors can groom and decompose HL Requirements into System Level (SL) Requirements and further decompose SL Requirements into Detail Level (DL) Requirements to send to Development.The following illustration depicts the relationship between an Epic that is pushed for Aha! to the non-modifiable Epic and the generated HL Requirement in the Jira Requirement project. ![Relationship between Aha! Epics and HL Requirements](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_overv_ahaepic_toreqs.png Relationship between Aha! Epic and HL Requirement)In Jira, for Watson Health (WH) Requirements projects:- High Level (HL) Requirements are prefixed by HL: and are type = High Level Req- System Level (SL) Requirements are prefixed by SL: and are type = System Level Req- Detail Level (DL) Requirements are prefixed by DL: and are type = Detail Level ReqApplicable Role(s):  WH Requirements AuthorPrerequisite(s): Confirm that the Requirement Statement is pre-populated in the HL Requirement.## Procedure1. Locate the HL Requirement in the Requirements project.  Confirm that the Requirement Statement field is populated with a Requirement Statement as this is a required field before you can begin decomposing the HL Requirement.![Kanban board view of HL Requirement](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_kanban_hl_indraft.png Kanban board view of HL Requirement)1. To begin working on the HL Requirement, assign it to yourself by clicking the Assign to me link, or to someone else by clicking the Assignee field and entering a name.![Assign an owner](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/decomposing_hl_assign.png Assign an owner)1. Move the HL Requirement from Draft status to In Review status by either dragging it to the In Review column on the Kanban board, or by clicking the Ready for Review button on the detailed view screen. The Review is an informal review and is not tracked with electronic signature.![Ready for Review button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/decomposing_hl_ready_for_review.png Ready for Review button)> Tip: If you have multiple browser pages open, such as the Kanban view and the detailed view of the HL or other pages, be sure to refresh the individual browser pages so that the information you are viewing is the most current.1. When ready to approve the HL Requirement, drag it to the Approved column on the Kanban board, or click the Approve button on the detailed view screen. The Approval is an informal approval and is not tracked with electronic signature.![Approve button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/decomposing_hl_approve.png Approve button)1. When the HL Requirement is in “Approved” status, you can: - Click Add SL -  to add a System Level (SL) Requirement that is associated with the HL Requirement - Click Change – to change the HL back to “Draft” status; or - Click Retire – to retire or obsolete the requirement.![Add SL, Change, and Retire buttons](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/decomposing_hl_add_sl.png Add SL, Change, and Retire buttons)## Next StepsTo continue grooming the HL Requirement, [add a SL Requirement](../jira_decomposing_hl_to_sl/).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/jira_decomposing_hl_requirements/",
    },
    {
      "title": "Decomposing HL Requirements to SL Requirementssidebar: toolsbreadcrumb: Decomposing HL Requirements to SL Requirements",
      "text": "---title: Decomposing HL Requirements to SL Requirementssidebar: toolsbreadcrumb: Decomposing HL Requirements to SL Requirements---# DRAFT## Before You BeginRequirements Authors groom and decompose High Level (HL) Requirements into one or more System Level (SL) Requirements which can then be groomed into one or more Detail Level (DL) Requirements. SL Requirements and the associated DL Requirements are the requirements that define the work that is sent to Development for their development work. SL Requirements must be approved before baselining the requirement.In Jira, for Watson Health (WH) Requirements projects:- High Level (HL) Requirements are prefixed by HL: and are type = High Level Req- System Level (SL) Requirements are prefixed by SL: and are type = System Level Req- Detail Level (DL) Requirements are prefixed by DL: and are type = Detail Level ReqApplicable Role(s):  WH Requirements Author## Procedure1. The Requirements Author confirms the HL Requirement is in “Approved” status by viewing the Requirements Kanban board or viewing the detailed page for the HL Requirement.1. From the approved HL Requirement, the Requirements Author clicks the Add SL button to create a System Level (SL) Requirement. Jira automatically handles the tracing and sets the relationship between the HL Requirement and SL Requirement.![Add Sl button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/decomposing_hl2sl_addsl_button.png Add SL button)1. Navigate to the newly created SL Requirement in one of the following ways:- In the Issue Links \> Satisfied By section of the HL Requirement, click the issue hyperlink.![Issue hyperlink](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/decomposing_hl2sl_issue_hyperlink.png Issue hyperlink)- From the Kanban board, click the SL Requirement located in the Draft column of the  System Level Req (SL) swim lane.![SL Requirement](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/decomposing_hl2sl_kanban_sl_req.png SL Requirement)1. Click the Edit button on the SL detailed view screen.![Edit button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/decomposing_hl2sl_edit_button.png Edit button)1. In the edit window, at a minimum, populate the following required fields:- Assignee- Summary- Acceptance Criteria- Requirement Statement- Description1. When you are finished editing the fields, click Update.1. Move the SL Requirement from “Draft” status to “In Review” status by either dragging it to the In Review column on the Kanban board, or by clicking the Ready for Review button on the detailed view screen.![Ready for Review button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/decomposing_hl2sl_ready_review_button.png Ready for Review button)>Tip: If you have multiple browser pages open, such as the Kanban view and the detailed view of the HL or other pages, be sure to refresh the individual browser pages so that the information you are viewing is the most current.1. When ready to approve the SL Requirement, drag it to the Approved column on the Kanban board, or click the Approve button on the detailed view screen.![Approve button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/decomposing_hl2sl_approve_button.png Approve button)## What to do nextYou can [progress the SL Requirement to “HL Baselined” status](../jira_hl_baseline_sl_requirement/) or you can [add DL Requirement(s) to a SL Requirement](../jira_decomposing_sl_to_dl/).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/jira_decomposing_hl_to_sl/",
    },
    {
      "title": "Decomposing SL Requirements to DL Requirementssidebar: toolsbreadcrumb: Decomposing SL Requirements to DL Requirements",
      "text": "---title: Decomposing SL Requirements to DL Requirementssidebar: toolsbreadcrumb: Decomposing SL Requirements to DL Requirements---# DRAFT## Before You BeginRequirements Authors groom and decompose High Level (HL) Requirements into one or more System Level (SL) Requirements which can then be groomed into one or more Detail Level (DL) Requirements.After a SL Requirement is in “Approved” status, the Requirements Author can decompose the SL Requirement into DL Requirements. When the SL Requirement is in “HL Baselined” status, the Requirements Author can also add DL Requirements to the SL Requirement.SL Requirements and the associated DL Requirements are the requirements that define the work that is sent to Development for their development work.In Jira, for Watson Health (WH) Requirements projects:- System Level (SL) Requirements are prefixed by SL: and are type = System Level Req.- Detail Level (DL) Requirements are prefixed by DL: and are type = Detail Level Req.Applicable Role(s):  WH Requirements Author## Procedure1. The Requirements Author confirms the SL Requirement is in “Approved” status or in “HL Baselined” status by viewing the Requirements Kanban board or viewing the detailed page for the SL Requirement.1. From the SL Requirement, the Requirements Author clicks the Add DL button to add a DL Requirement.![Add DL button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/decomposing_sl_add_dl.png Add DL button)1. Navigate to the newly created DL Requirement in one of the following ways:- In the Issue Links \> Satisfied By section of the HL Requirement, click the issue hyperlink.![Issue hyperlink](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/decomposing_sl_issue_hyperlink.png Issue hyperlink)- From the Kanban board, click the SL Requirement located in the Draft column of the System Level Req (SL) swim lane.![SL Requirement](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/decomposing_sl_kanban_sl_req.png SL Requirement)1. Click the Edit button on the DL detailed view screen.![Edit button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/decomposing_sl_edit_button.png Edit button)1. In the edit window, at a minimum, populate the following required fields:- Assignee- Summary- Acceptance Criteria- Requirement Statement- Description    The system automatically copies the following values from the SL Requirement to the DL Requirement:       - Component       - Acceptance criteria       - User Need       - Non-functional Category       - Label Category1. When you are finished editing the fields, click Update.1. Move the DL Requirement from “Draft” status to “In Review” status by either dragging it to the In Review column on the Kanban board, or by clicking the Ready for Review button on the detailed view screen.![Ready for Review button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/decomposing_sl_ready_review_btn.png Ready for Review button)>Tip: If you have multiple browser pages open, such as the Kanban view and the detailed view of the HL or other pages, be sure to refresh the individual browser pages so that the information you are viewing is the most current.1. When ready to approve the DL Requirement, drag it to the Approved column on the Kanban board, or click the Approve button on the detailed view screen.![Approve button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/decomposing_sl_approve_btn.png Approve button)1. The DL Requirement is now approved. In the Issue Links section of the DL Requirement, you can view the relationship of the DL to its associated SL Requirement.![DL/SL relationship](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/decompsing_sl_relationship.png DL/SL relationship)## What to do nextYou can [progress the DL Requirement to “DL Baselined” status](../jira_dl_baseline_dl_requirement/).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/jira_decomposing_sl_to_dl/",
    },
    {
      "title": "DL Baselining DL Requirementssidebar: toolsbreadcrumb: DL Baselining DL Requirements",
      "text": "---title: DL Baselining DL Requirementssidebar: toolsbreadcrumb: DL Baselining DL Requirements---# DRAFT## Before You BeginRequirements Authors groom and decompose High Level (HL) Requirements into one or more System Level (SL) Requirements for final decomposition into Detail Level (DL) Requirements. DL requirements will take the form of user Stories to guide developers coding efforts, ensuring that the software they are developing addresses user needs.After a SL Requirement is in “Approved” status, the Requirements Author can add DL Requirements to the SL Requirement. DL requirements can also be added to a SL Requirement when the SL Requirement is in “HL Baselined” status.The DL Requirement(s) can be DL Baselined, which means to establish the detailed level design input baseline marker or milestone at a point in time. When a DL Requirement is in “DL Baselined” status, the DL Requirement becomes read-only. At this point, you can only update the DL Requirement with comments and any changes are made through the Watson Health Change Control process.When all associated DL Requirements for a given SL Requirement are in “DL Baselined” status, the SL Requirement transitions to “DL Baselined” status. When the SL Requirement is in “DL Baselined” status, the system checks the associated HL Requirement to see if there are other SL Requirements (associated with that HL Requirement) that are not yet in “DL Baselined” status.  When all SL Requirements associated with the HL are in “DL Baselined” status, the HL Requirement transitions to “DL Baselined” status.When the HL Requirement transitions to “DL Baselined” status, the HL Requirement and all of its child SL and DL requirements (including their originating Epic managed in Aha!) become read-only and and changes can only be made through Watson Health Change Control process. The SL and its associated DL Requirements are now ready to be pushed to Development for development work.Applicable Role(s):  WH Requirements Author## Procedure1. The Requirements Author confirms the DL Requirement is in “Approved” status by viewing the Requirements Kanban board or viewing the detailed page for the SL Requirement.1. From the approved DL Requirement, the Requirements Author clicks the DL Baseline button to baseline the DL Requirement.![DL Baseline button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/dl_baselining_dl_baseline_button.png DL Baseline button)1. The DL Requirement is now in “DL Baselined” status.![DL Baselined status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/dl_baselining_dl_baselined_status.png DL Baselined status)1. In the Attachments section of the “DL Baselined” DL Requirement, see the system generated DL Baseline Snapshot. These system generated snapshot attachments cannot be deleted.![DL Baseline snapshot](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/dl_baselining_baseline_snapshot.png DL Baseline snapshot)The Baseline Snapshot is a PDF summary of the fields and their values for the DL Requirement; for example:![PDF summary of Baseline Snapshot](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/dl_baselining_baseline_pdf.png PDF Summary of Baseline Snapshot)1. From the Issue Links section of the DL Requirement, we can see the associated SL Requirement is now in “DL Baselined” status. For this example, there is only one DL Requirement associated with the SL Requirement. If there were more than one DL Requirement associated with the SL Requirement, when all the associated DL Requirements are in “DL Baselined” status, the SL Requirement transitions to “DL Baselined” status.![Associated SL Requirement showing DL Baselined status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/dl_baselining_sl_baselined.png Associated SL Requirement showing DL Baselined status)From the Issue Links section of the SL Requirement, we can see the associated HL Requirement is now in “DL Baselined” status.   For this example, there is only one DL Requirement associated with the SL Requirement and there is only one SL associated with the HL.  If there were more than one SL Requirement associated with the HL Requirement, when all of the associated SL Requirements are in “DL Baselined” status, the HL Requirement transitions to “DL Baselined” status.![Associated HL Requirement showing DL Baselined status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/dl_baselining_hl_baselined.png Associated HL Requirement showing DL Baselined status)## What to do nextWhen the SL Requirement is in “DL Baselined” status, the Requirements Author can [push the set of SL Requirements and its associated DL Requirements to Development](../jira_push_sldlreqs_todev/).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/jira_dl_baseline_dl_requirement/",
    },
    {
      "title": "HL Baselining SL Requirementssidebar: toolsbreadcrumb: HL Baselining SL Requirements",
      "text": "---title: HL Baselining SL Requirementssidebar: toolsbreadcrumb: HL Baselining SL Requirements---# DRAFT## Before You BeginRequirements Authors groom and decompose High Level (HL) Feature Requirements into one or more System Level (SL) User Requirements which can then be groomed into one or more Detail Level (DL) Requirements.After a SL Requirement is in “Approved” status, the Requirements Author can HL Baseline the SL Requirement. To HL Baseline the SL Requirement means to establish the high level design input baseline marker or milestone at a point in time. When the SL Requirement is in “HL Baselined” status, the SL Requirement becomes read-only. At this point, you can only update the SL Requirement with comments and any changes are made through the Watson Health Change Control process.When all associated SL Requirements for a given HL Requirement are in “HL Baselined” status, the HL Requirement transitions to “HL Baselined” status. When the HL Requirement is in “HL Baselined” status, the HL Requirement becomes read-only.  At this point, you can only update the HL Requirement with comments and any changes are made through the Watson Health Change Control process.When a SL Requirement and the HL Requirement are HL Baselined, the system produces a snapshot PDF of the baselined SL Requirement and its associated HL Requirement which can be used to obtain approval on the HL Baselined Requirements.Applicable Role(s):  WH Requirements Author## Procedure1. The Requirements Author confirms the SL Requirement is in “Approved” status by viewing the Requirements Kanban board or viewing the detailed page for the SL Requirement.1. From the approved SL Requirement, the Requirements Author clicks the HL Baseline button to baseline the SL Requirement.![DL Baseline button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/hl_baselining_hl_baseline_button.png HL Baseline button)1. The SL Requirement is now in “HL Baselined” status.![HL Baselined status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/hl_baselining_hl_baselined_status.png HL Baselined status)1. In the Attachments section of the “HL Baselined” SL Requirement, see the system generated HL Baseline Snapshot.  These system generated snapshot attachments cannot be deleted.![HL Baseline snapshot](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/hl_baselining_baseline_snapshot.png HL Baseline snapshot)The Baseline Snapshot is a PDF summary of the fields and their values for the SL Requirement; for example:![PDF summary of Baseline Snapshot](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/hl_baselining_baseline_pdf.png PDF Summary of Baseline Snapshot)1. From the Issue Links section of the SL Requirement, we can see the associated HL Requirement is now in “HL Baselined” status.  For this example, there is only one SL Requirement associated with the HL Requirement.  If there were more than one SL Requirement associated with the HL Requirement, when all of the associated SL Requirements are in “HL Baselined” status, the HL Requirement transitions to “HL Baselined” status.![Associated HL Requirement showing HL Baselined status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/hl_baselining_hl_baselined.png Associated HL Requirement showing HL Baselined status)## What to do nextYou can [add Detail Level (DL) Requirements to the SL Requirement](../jira_decomposing_sl_to_dl/).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/jira_hl_baseline_sl_requirement/",
    },
    {
      "title": "Creating an OAuth Token for Integrating External Applications with Jirasidebar: toolsbreadcrumb: Creating OAuth Token for Integrating External Applications",
      "text": "---title: Creating an OAuth Token for Integrating External Applications with Jirasidebar: toolsbreadcrumb: Creating OAuth Token for Integrating External Applications---# DRAFT## Before You BeginWatson Health (WH) development teams that want to link their applications withthe WH Jira Solution are required to configure authentication using the OAuthstandard to leverage the Jira REST Plugin Service for the WH Jira Solution. TheJira REST Plugin Service is used to regulate external application calls to theWH Jira Solution environment.A common scenario for using this approach is when a WH DevelopmentTeam wants to link an external application to the WH Jira Solutionenvironment to automatically update Jira issue comments related to activitiesperformed in the context of other development tools, whether they are commercialoff-the-shelf (COTS) or home-grown tools.Jira OAuth References:- OAuth authentication with Jira Server:  [https://developer.atlassian.com/server/jira/platform/oauth/](https://developer.atlassian.com/server/jira/platform/oauth/){:target=_blank}-  OAuth authentication with Jira Cloud:  [https://developer.atlassian.com/cloud/jira/platform/jira-rest-api-oauth-authentication/](https://developer.atlassian.com/cloud/jira/platform/jira-rest-api-oauth-authentication/){:target=_blank}## Procedure1. Download and build the Java OAuthJavaTutorialClient using the instructionsfor a Jira server located [here.](https://bitbucket.org/atlassianlabs/atlassian-oauth-examples/src/master/java/){:target=_blank}1. Create a public/private key pair by following the Step 1: Configuring Java instructions [here.](https://developer.atlassian.com/server/jira/platform/jira-rest-api-example-oauth-authentication-6291692/){:target=_blank}1. Setup the application link in Jira using the public key and consumer key generated in the previous step.    a) You will need to work with a WH Jira Administrator on this step.    > Tip:  Contact a WH Jira Administrator by using the [#wh-jira-support Slack channel](https://ibm-watsonhealth.slack.com/messages/GFXBBCYTY/){:target=_blank}.    b)  You only need to create the Incoming Link. The Outgoing Link can be left as-is, unless you need Jira to make changes to your application.1. Setup the config.properties file with the following properties:    - jira_home = Base URL of your Jira instance; for example: [https://vbc-jira.watson-health.ibm.com](https://vbc-jira.watson-health.ibm.com){:target=_blank}    - consumer_key = The key that was set for the incoming link; this is OauthKey in the example.    - private_key = The private key generated in step 2, without line breaks.    > Tip: If you get an error about PKIX Path Building Failed, you might need to import the Jira certificate into your JVM. Follow the command line directions at this link for help1. Run the ClientMain.java class with the `requestToken` argument.1. Go to the URL returned in the previous step to approve access. Note the verification code.1.  Run the ClientMain.java class with the arguments `accessToken ` where `` is the code granted in the previous step.## ResultYour config.properties file is updated with an access token secret and the OAuth Access Token, and it includes the parameters needed to make authenticated calls.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/jira_integrating_externalapps/",
    },
    {
      "title": "Pushing SL and DL Requirements to Developmentsidebar: toolsbreadcrumb: Pushing SL and DL Requirements to Development",
      "text": "---title: Pushing SL and DL Requirements to Developmentsidebar: toolsbreadcrumb: Pushing SL and DL Requirements to Development---# DRAFT## Before You BeginRequirements Authors groom and decompose High Level (HL) Requirements into one or more System Level (SL) Requirements which can then be groomed into one or more Detail Level (DL) Requirements.After a SL Requirement is in “DL Baselined” status, the Requirements Author can push the SL and its associated DL Requirements to Development for development work.From the SL Requirement, the Requirements Author can either Push Release or Push Feature to Development.- Push Release -- Use Push Release if you are using a software development lifecycle that requires that all requirements for the release be baselined and approved before Development can begin working on the requirements; for example, a waterfall development model. The system checks that the SL Requirement and all its associated DL Requirements for a specific Fix Version are in “DL Baselined” status before pushing to Development.  This push occurs on a release by release basis.- Push Feature -- Use Push Feature if you are using a software development lifecycle that does not require all requirements for the release be baselined and approved before Development can begin working on the requirements; for example, an agile development model.  A Requirements Author can push a set of SL Requirements and its associated DL Requirements for a single HL Requirement to Development. This push occurs on a feature by feature basis.For each SL Requirement in “DL Baselined” status that is pushed to Development (either by Feature or Release), the system automatically creates a Development Epic in the Jira Development project.  The Development Epic is not modifiable in the Development project. For each DL Requirement in “DL Baselined” status that is pushed for the release, the system automatically creates a Development Story in the Jira Development project. The system automatically sets the trace relationship horizontally between the Requirements and the Development Epic/Story.Applicable Role(s):  WH Requirements AuthorThe following illustration depicts the relationship between decomposed SL and DL Requirements that are pushed to the Jira Development project for development work.![Relationship between Requirements pushed to Development](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_overv_reqs_todev.png Relationship between Requirements pushed to Development)## Procedure1. The Requirements Author confirms the SL Requirements and its associated DL Requirements are in DL Baselined status.  Refer to [DL Baselining SL and DL Requirements](../jira_dl_baseline_dl_requirement/).1. From the SL Requirement, the Requirements Author clicks the Push Feature button to push the Feature to Development.![Push Feature button](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_slpushfeature.png Add DL button)1. The status of the associated HL, SL and DL Requirements is changed to Dev Backlog status.![HL/SL/DL in Dev Backlog status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_hlsldl_devbacklog.png HL/SL/DL in Dev Backlog status)1. As a result of the push of the SL Requirement, a non-modifiable Epic is created in the Jira Development project. The Development Epic is in Dev Backlog status.![SL Req to Dev Epic](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_slreq_to_devepic.png SL Req to Dev Epic)1. As a result of the push of the associated HL Requirement, a Development Story is created in the Jira Development project. The Development Story is in Dev Backlog status.![DL Req to Dev Story](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_dlreq_to_devstory.png DL Req to Dev Story)1. Navigate to the Development project to view the newly created Development Story from either the Kanban board or from the Dev Story detailed page view.> Tip: If you have multiple browser pages open, such as the Kanban view and the detailed view of the HL or other pages, be sure to refresh the individual browser pages so that the information you are viewing is the most current.## What to do nextDevelopment can begin evaluating the backlog for sprint assignment.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/jira_push_sldlreqs_todev/",
    },
    {
      "title": "Overview - Working with DCRs in WH Jira Requirements Projectssidebar: toolsbreadcrumb: Working with DCRs in WH Jira Requirements Projects",
      "text": "---title: Overview - Working with DCRs in WH Jira Requirements Projectssidebar: toolsbreadcrumb: Working with DCRs in WH Jira Requirements Projects---# DRAFT## Before You BeginOffering Managers create releases and specify Epics (or features) in Aha! for a release based on assessments for value to markets served by Watson Health. After Offering Management approves an Epic in Aha! and pushes the Epic into a Jira, the system automatically creates a clone of the Epic from Aha! in the Offering’s Jira Requirements project as a non-modifiable Epic.Regardless of whether the Offering is using a 2-Tier model or 3-Tier model for Requirements, the Watson Health (WH) Application Lifecycle Management (ALM) Solution ensures there is an open Design Change Release (DCR) in the WH Jira Requirements project for the specific release of the Offering and that the DCR is associated with the Epic in Aha! that was pushed to the WH ALM Solution.A DCR defines the scope of a release of an Offering and lives in an Offering’s Jira Requirements project. For each Offering, there is 1 DCR per release and theDCR specifies the associated features in the release. An Epic in Jira for a specific Offering release is associated with the DCR for that Offering releasefor traceability purposes. In other words, the DCR for an Offering release has the trace relationships to an Epic and any Configuration Change Requests (CCRs)against those Epics.  CCRs are used to manage changes to a requirement, design, development, or test artifacts.Review the Traceability Metamodel [Traceability Metamodel](../../index#traceability-metamodel) which illustrates the relationship between a DCR and an Epic in Jira.For information about the WH Jira Requirements project, see [Overview - Working in WH Jira Requirements Projects](../jira_reqs_overview/).Applicable Role(s):-   DCR Author - Typically someone in a project management role, this individual    is responsible for all content in the DCR. The DCR Author has edit rights to    the DCR in Jira and can move the DCR from “New” status through “In Analysis”    status.-   DCR Approver - Works with the release DCRs in WH Jira Solution and can    approve them.## Procedure1. The DCR Author navigates to the DCR generated by the system in the    Requirements project. The DCR is in “New” status.          ![DCR in New Status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_dcr_new_status.png DCR in New Status)    > Tip: If you know the DCR number, you can use Jira search. You can also    >   locate the DCR in the Requirements Project by navigating to the associated    >   Epic in the Kanban board and viewing the Released By information in the    >   Issue Links section of an Epic in Jira.1.  The DCR author assigns an owner to the DCR.          ![Assign owner to DCR](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_dcr_assign_owner.png Assign owner to DCR)1.  Click Edit. In the edit window, at a minimum, the DCR Author ensures an    owner is assigned and provides a Justification for the DCR. These fields    must be completed before the DCR can move to “In Analysis” state. Click    Update to save the changes.1.  Click Analyze to move the DCR to “In Analysis’ state.      ![Click Analyze](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_dcr_click_analyze.png Click Analyze)      ![DCR in In Analysis status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_dcr_inanalysis_status.png DCR in In Analysis status)1. The DCR Author completes required information for the DCR on the Overview,    Regulatory Assessment, Impact Assessment and Release Documentation tabs    within the DCR. The Release Documentation tab contains approvals for release    documents.          ![DCR Author completes required information](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_dcrauth_completes_requiredinfo.png DCR Author completes required information)    > Tip: The DCR Author works with the DCR Approver. When the required    >   information for the DCR is completed, the DCR Author can optionally assign    >   the DCR to the DCR Approver so that the system notifies the DCR Approver of the assignment.1.  To approve the DCR, the DCR Approver navigates to the DCR and clicks    Approve which opens the Approve page. This page consists of Overview,    Regulatory Assessment, Impact Assessment, and Approvers information. When    ready to complete the approval, the DCR Approver clicks Approve.      ![Approve Page](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_dcr_approve_page.png Approve Page)    While DCR approval within the Jira Requirements project is an informal  approval, this approval indicates agreement with the scope of the DCR for   the release and that work on the release can continue.    The DCR is in Approved status.      ![DCR in Approved Status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_dcr_approved_status.png DCR in Approved Status)## What to do nextA DCR Author can transition the DCR from “Approved” to “Closed” status when allthe information is populated and the DCR for the release is ready to be closed.The DCR for the release must be in “Approved” status before WH RequirementsAuthors can decompose System Level User Requirements into Detail Level (DL)Requirements. See [(2-Tier) Decomposing SL User Requirements into DL Requirements](../jira_2tier_decomposing_sl_to_dl/ 2-Tier Requirements) or  [(3-Tier) Decomposing SL User Requirements into DL Requirements](../jira_3tier_decomposing_sl_to_dl/ 3-Tier Requirements).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/jira_reqs_dcr_overview/",
    },
    {
      "title": "Overview - Working in WH Jira Requirements Projectssidebar: toolsbreadcrumb: Working in WH Jira Requirements Projects",
      "text": "---title: Overview - Working in WH Jira Requirements Projectssidebar: toolsbreadcrumb: Working in WH Jira Requirements Projects---# DRAFT## Before You BeginOffering Managers create releases and specify Epics (or features) in Aha! for a release based on assessments for value to markets served by Watson Health. After Offering Management approves an Epic in Aha! and pushes the Epic into a Jira, the system automatically creates a clone of the Epic from Aha! in the Offering’s Jira Requirements project as a non-modifiable Epic.When an Epic comes into the Jira portion of the WH Application Lifecycle Management (ALM) Solution, the system maps the Epic from Aha! to the Epic in Jira. It is most important that the author of the Epic in Aha! correctly sets values for required fields prior to pushing the Epic from Aha! to Jira. This is especially important for fields that specify the versioning of the Epic in Aha! relative to the current release and/or next release, as Aha! does not perform checks for required fields. For informationabout Epics in Aha!, see [Creating an Epic in Aha!](../../aha/aha_create_epic/)The values set for the Epic in Aha! are used by the system to determine if theEpic is:-   A new requirement    -   If the new requirement is for the “current” or “active” release, the system sets the status of the cloned Epic in Jira to “Approved” status and automatically creates associated High Level (HL) Feature requirements depending on whether the Offering is using a 2-Tier or 3-Tier model for requirements.    -   If the new requirement is for the “next” release, the system sets the status of the cloned Epic in Jira to “In Queue” status and automatically creates associated requirements depending on whether the Offering is using a 2-Tier or 3-Tier model for requirements.-   Being persisted from a prior release    -    This represents a feature that is being persisted from a prior release and is being queued up for the next release.    -    The system sets appropriate fields to indicate the prior release. The system will set the prior release as the current release, only if all associated WH Jira requirements are complete on the prior release.-   A duplicate    -   If the feature is determined to be a duplicate, the cloned Epic in the WH ALM Solution is set to “Duplicate” status.If the WH Offering is following a 2-Tier model for Requirements, the WH ALM Solution automatically creates the following in the Jira Requirements project:-  a non-modifiable Epic in Jira which links back to the Aha! Epic.- a Design Change Request (DCR) issue in Jira for the Release (if it doesn’t already exist) and links the DCR for the release to the Epic in Jira.- a High Level (HL) Feature Requirement. For offerings using the 2-Tier model, the HL Feature Requirement is generated; however, no actions are required on the HL Feature Requirement as it is not really used in the 2-Tier model.- a System Level (SL) User Requirement. The SL User Requirement is functionally equivalent to the Epic in Aha! such that there is a one-to-one (1-to-1) mapping between the SL User Requirement and the Epic. There is only one SL User Requirement for the Release. Requirements Authors can work with and decompose the SL User Requirement into one or more Detail Level (DL) Requirements to send to Development.If the WH Offering is following a 3-Tier model for Requirements, which models the IBM Design Thinking Hill-Epic-Story approach, the WH ALM Solution automatically creates the following in the Jira Requirements project:-  a non-modifiable Epic in Jira which links back to the Aha! Epic.- a Design Change Request (DCR) issue in Jira for the Release (if it doesn’t already exist) and links the DCR for the release to the Epic in Jira.- a High Level (HL) Feature Requirement. The HL Feature Requirement is functionally equivalent to the Epic in Aha! such that there is a 1-to-1 mapping between the HL Feature and the Epic. Requirements Authors can work with and decompose HL Feature Requirements into one or more System Level (SL) User Requirements and further decompose SL User Requirements into one or more Detail Level (DL) Requirements to send to Development.A WH Offering establishes whether it follows a 2-Tier or 3-Tier Model for Requirements in the Offering’s request to be onboarded to the WH ALM Solution. The established requirements model is set for the life of the WH Offering in the WH ALM Solution cannot be changed. See add link to Offering Onboarding topic.A DCR in a Jira Requirements project defines the scope of a release of an Offering. For each Offering, there is 1 DCR per release in the WH ALM Solution and the DCR specifies the associated features or Epics in the release. An Epic in Jira for a specific Offering release is associated with the DCR for that Offering release for traceability purposes. The DCR for an Offering release has the trace relationships to an Epic and any Configuration Change Requests (CCRs) against those Epics. CCRs are used to manage changes to a requirement, design, development, or test artifacts.The following illustration depicts the relationship between an Epic that is pushed from Aha! to the non-modifiable Epic and the generated HL FeatureRequirement in the Jira Requirements project. ![Relationship between Aha! Epics and requirements in Jira](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_overv_ahaepic_toreqs.png Relationship between Aha! Epics and requirements in Jira)Review the Traceability Metamodel [Traceability Metamodel](../../index#traceability-metamodel) which illustrates the relationship between a DCR and an Epic in Jira.Applicable Role(s):-   Requirements User: Has view access to an Offering’s Requirements project in Jira.-   WH Requirements Author: Works with requirements in WH ALM Solution with edit abilities. Can view DCR but does not have access to author or approve a DCR.-   DCR Author and DCR Approver: Both roles work with the release DCRs in the WH ALM Solution. DCR Authors have edit capabilities and DCR Authors can approve DCRs.## Procedure1. To view an Epic in Jira (which was pushed from Aha! to Jira), the Requirements User completes the following:   a.  Navigate to the Offering’s WH Jira Requirements project, locate the Kanban board in the left pane, and locate the “Epics from Aha!” section.    ![Locate Epics from Aha! on Kanban](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_epicfromkanban.png Locate Epics from Aha! on Kanban)    b. Click the Epic to open the Epic. You can also open the Epic by clicking the Epic Issue link (which is the Issue number).       ![Preview pane for Epic](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_epicpreview.png Preview pane for Epic)    -   View information about the Epic.      ![Detailed view of Epic](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_epicdetailview.png Detailed view of Epic)    -   View the traceability information for the Epic in the Issue Links section.        -   Realized By relationship – Shows the HL Feature Requirement that is realized by the associated Epic.        -   Released By relationship - Shows the DCR that is associated to the Epic.        ![Issue links of Epic](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_epicdetailview_issuelinks.png Issue links of Epic)1. To view traceability of the DCR to the Epic in an Offering’s WH Jira Requirements project, the Requirements User completes the following:   a. Locate and open the desired Epic in the “Epics from Aha!” section of the Offering’s WH Jira Requirements project from the Kanban board (see step 1).   b. Navigate to the Issue Links section of the Epic. The Released By section indicates the DCR that is associated with the Epic in Jira. The Realized By section indicates the HL Feature Requirement that is associated with the Epic in Jira.      ![Issue links of Epic](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_epicdetailview_issuelinks.png Issue links of Epic)    c. Click the link for the DCR issue in the Released By section to open the DCR issue.      ![Detailed view of DCR](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_dcrdetailview.png Detailed view of DCR)    d. Navigate to the Issue Links section of the DCR. The Releases section indicates the Epics in Jira that are associated with the DCR.      ![Issue links of DCR](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_dcrdetailview_issuelinks.png Issue links of DCR)3. For Offerings following the 2-Tier model for requirements, to view the SL User Requirement that was generated from the cloned Epic in Aha!, the Requirements User completes the following:   a. Locate and open the desired Epic in the “Epics from Aha!” section of the Offering’s WH Jira Requirements project from the Kanban board (see step 1).   b. Navigate to the Issue Links section of the Epic. The Realized By section indicates the HL Feature Requirement that is associated with the Epic in Jira. The Released By section indicates the DCR that is associated with the Epic in Jira.    ![(2-Tier) Issue links of Epic](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_2t_epicdetailview_issuelinks.png (2-Tier) Issue links of Epic)    c. Click the link for the HL Feature Requirement in the Realized By section to open the HL Feature Requirement issue. The HL Feature Requirement is automatically created when the Epic in Aha! is pushed to Jira. In the 2-Tier model, the HL Feature Requirement is generated; however, no actions are required on the HL Feature Requirement as it is not really used in the 2-Tier model.      ![(2-Tier) Detailed view of HL Feature Requirement](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_2t_hldetailview.png (2-Tier) Detailed view of HL Feature Requirement)      In the Issue Links section of the HL Feature Requirement illustrates the following:      - The Realized By section indicates the SL User Requirement that is associated with the Epic in Jira.      - The Released By section indicates the DCR that is associated with the Epic in Jira.          d. Click the link for the SL User Requirement in the Realized By section of the HL Feature Requirement to open the SL User Requirement. In the 2-Tier model, the system automatically generates one SL User Requirement that is associated with HL Feature Requirement and its associated Epic. There is a 1-to-1 mapping between the SL User Requirement and the Epic.    ![(2-Tier) Detailed view of SL User Requirement](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_2t_sldetailview.png (2-Tier)  Detailed view of SL User Requirement)    In the Issue Links section of the SL User Requirement, the Satisfies section shows that the SL User Requirement satisfies the associated HL Feature Requirement.    > Tip:    - In the 2-Tier model, the HL Feature Requirement exists, but is not used. The SL User Requirement has a 1-to-1 mapping to the Epic.    - When one or more Detail Level (DL) Requirements exist that are associated with a SL User Requirement, the Satisfied By section shows the SL User Requirement is satisfied by one or more DL Requirements.4. For Offerings following a 3-Tier model for requirements, to view the HL Feature Requirement that was generated from the cloned Epic in Aha!, the Requirements User completes the following:    a. Locate and open the desired Epic in the “Epics from Aha!” section of the Offering’s WH Jira Requirements project from the Kanban board (see step 1).    b. Navigate to the Issue Links section of the Epic. The Realized By section indicates the HL Feature Requirement that is associated with the Epic in Jira. The Released By section indicates the DCR that is associated with the Epic in Jira.      ![(3-Tier) Issue links of Epic](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_epicdetailview_issuelinks.png (3-Tier) Issue links of Epic)    c. Click the link for the HL Feature Requirement in the Realized By section to open the HL Feature Requirement issue. The HL Feature Requirement is    automatically created when the Epic in Aha! is pushed to Jira. The initial status of the HL Feature Requirement is “Draft” status.    ![(3-Tier) Detailed view of HL Feature Requirement](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/jira_reqs_3t_hldetailview.png (3-Tier) Detailed view of HL Feature Requirement)    In the Issue Links section of the HL Feature Requirement, the Realized By section indicates the HL Feature Requirement that is associated with the Epic in Jira. The Released By section indicates the DCR that is associated with the Epic in Jira.    d.  When one or more SL User Requirements exist that are associated with the HL Feature Requirement, the SL User Requirements are shown in the Issue Links section of the HL Feature Requirement. The Satisfied By section shows one or more SL User Requirements which satisfy the associated HL Feature Requirement.    > Tip: When one or more DL Requirements exist that are associated with a SL User Requirement, the DL User Requirements are shown in the Issue Links section of the SL User Requirement.## What to do nextIf your Offering is following the 2-Tier model, see Decomposing SL User Requirements (add link topic link).If your Offering is following the 3-Tier model, see Decomposing HL Feature Requirements (add link topic link).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/jira_reqs_overview/",
    },
    {
      "title": "Setting up your Development work environmentbreadcrumb: Setting up your Development work environmentsidebar: tools",
      "text": "---title: Setting up your Development work environmentbreadcrumb: Setting up your Development work environmentsidebar: tools---# DRAFT# Setting up your Development work environment#### Applicable Jira role:  WH Developer### Adding the GitHub repository to Eclipse or GitHub on your local machineBefore you begin to working with source code, you need to setup your development work environment with GitHub by adding the GitHub repository (where you will do your coding work) to either your Eclipse or GitHub desktop environment.1. Clone the associated Git repository.![Clone the appropriate Git repository](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/scm_task_clonegitrepos.png Clone the appropriate Git repository)- Enter the required repository information and then click Next.![Enter location of source repository](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/scm_task_clonegitlocation.png Enter location of source repository)- Select the branch associated with your coding Point of Divergence (POD) to clone and then click Next.![Select branches to clone](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/scm_task_clonebranch.png Select branches to clone)- Specify the location of your local directory for the clone and then click Finish.![Specify your local working directory for the clone](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/scm_task_clonelocal.png Specify your local working directory for the clone)### Creating a private development branch for your workOnce your local storage for the remote repository is created, developers will work on private branches to isolate their individual Task work from a given development, release, integration or master branch in GitHub prior to it being stable for integration. To create your private development branch:1. Locate the parent POD stream.  Right-click on the parent POD stream and select Create Branch.![Create private branch](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/scm_task_privatebranch.png Create private branch)- The branch name will take the format: \-\. In the following example, the branch name is `whitel-WHDD-41`. Click Finish.![Private branch name](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/scm_task_privatebranchname.png Private branch name)- Verify that your private branch was created using the Eclipse UI and confirm that you are working on your private branch via the Git client.![Verify private branch](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/scm_task_verifyprivatebranch.png Verify private branch)Now, you can work in the context of the Git command line client,  Eclipse, or the GitHub Desktop environment to create and modify code assets associated with your associated Task.### Example:  Creating and modifying a directory and file from the Git command line client```Lewiss-MacBook-Pro:ras-test-repo1 lewiswhite\$ lsREADME.mdLewiss-MacBook-Pro:ras-test-repo1 lewiswhite\$ mkdir test1Lewiss-MacBook-Pro:ras-test-repo1 lewiswhite\$ cd test1Lewiss-MacBook-Pro:test1 lewiswhite\$ vi test1.mdLewiss-MacBook-Pro:test1 lewiswhite\$ git add test1.mdLewiss-MacBook-Pro:test1 lewiswhite\$```Now, you can view the changes in your private branch.![View changes in your private branch](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/scm_task_viewchangesprivatebranch.png View changes in your private branch)Prior to checking in any code, or requesting a pull request to the branch acting as your POD, merge any changes from your POD, (or _master_ in this case) to verify that your code is working as expected.![Merge changes from POD](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/scm_task_mergechangesfrompod.png Merge changes from POD)Select the branch to merge from and then click Merge.![Select branch to merge](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/scm_task_selectbranchtomerge.png Select branch to merge)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/jira_setup_devenv_GitHub/",
    },
    {
      "title": "Working with Development Stories in Jirasidebar: toolsbreadcrumb: Working with Development Stories in Jira",
      "text": "---title: Working with Development Stories in Jirasidebar: toolsbreadcrumb: Working with Development Stories in Jira---# DRAFT## Before You BeginStories in a Development project in Jira are created from Detail Level (DL) Requirements in the Requirements project.  Story creation occurs when the Detail Level (DL) Requirements in “DL Baselined” status are pushed to the Development project.When DL Requirements are pushed to the Development project from the Requirements project, Jira creates a non-modifiable Development Epic clone for each DL Requirement that originated in the Requirements project.   For each DL Requirement cloned to a Development project Epic, back-end automation generates  a Development Story. Automated processes also set a trace relationship from the DL Requirement in the Requirements project to Development Epics and Development Stories in the Development project. This relationship is reflected in the Issue Links section of the associated artifacts. A Development Story represents work to be performed by the development team.  A Development Story can then be further decomposed into Development Tasks by development team members.In Jira for Watson Health (WH) Development projects:- Development Epics are prefixed by SL: and are issue type = epic.- Development Stories are prefixed by DL: and are issue type = story.- Development Tasks are prefixed by DT: and are issue type = task.Applicable Role:  WH Developer (_to groom Development Stories_)When Development Stories are created, they are in “Dev Backlog” status. This topic describes how a Developer works with a Development Story in “Dev Backlog” status and progresses the Story through “Ready for Sprint” status, which includes decomposing the Story into Development Tasks.## Procedure1. Developer navigates to the Development Backlog board and locates a Story in Dev Backlog status.  The Story is ready to be groomed. ![Backlog board](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/devtask_backlog_board.png Backlog board)2. Open a Story in Dev Backlog status and click Edit. ![Edit Backlog Story](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/devtask_edit_backlog_story.png Edit Backlog Story)3. Add a Sprint and estimated Story point information to the Story, then click Update. ![Update with Sprint and Story point information](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/devtask_update_sprint_storypoint.png Update with Sprint and Story point information)4.  Assign a developer to the Story. ![Assign a developer to the Story](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/devtask_assign_dev_tostory.png Assign a developer to the Story)5.  Add a Development Task to the Story by clicking Workflow-\>Add Dev Task. A minimum of one Development Task is required to be assigned to a Development Story prior to an assigned Developer being able to begin working on the Story. ![Add a development task](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/devtask_add_devtask.png Add a development task)6. Select the appropriate Task from the Story issue. This opens the Task. ![Select Task from the Story Issue](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/devtask_select_task_fromstory_issue.png Select Task from the Story Issue)7. Click Edit to edit the Task. ![Edit the Task](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/devtask_edit_task.png Edit the Task)8. Enter a Summary, select a Dev Task Type, then click Update. The Task associated with the Story is created. ![Enter a Summary, Dev Task Type](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/devtask_enter_summary_devtasktype.png Enter a Summary, Dev Task Type)9. Now that the Story has at least one associated Task and the Story is in Dev Backlog status, you can move the Story into Ready for Sprint status, meaning it is ready to be added to a Sprint.  Click Sprint Ready on the Story. ![Associate Story with desired Sprint](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/devtask_associate_sprint_tostory.png Associate Story with desired Sprint)10. Confirm that the Story is associated with the desired Sprint. ![Confirm Story is associated with Sprint](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/devtask_verify_story_withsprint.png Confirm Story is associated with Sprint)11. From the Story, click Planned to transition the Story to In Sprint status. ![Click Planned](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/devtask_transition_story_to_insprint_a.png Click Planned)![Transition Story to In Sprint status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/devtask_transition_story_to_insprint_b.png Transition Story to In Sprint status)12. From either the Story or from the Kanban board for the development project,  confirm the Story is in In Sprint status. ![Confirm Story status from Kanban board](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/devtask_confirm_story_status_from_kanban.png Confirm Story status from Kanban board)13.  Now that the Story is In Sprint status, the developer assigned to the development Story clicks  Start Progress, which transitions the Story to In Development status.#### Detail View![Start Progress transitions Story to In Development status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/devtask_startprogress_transitions_to_indevelopment.png Start Progress transitions Story to In Development status)![Story shows In Development status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/devtask_story_indevelopment_status.png Story shows In Development status)#### Kanban view![Story shows In Development status from Kanban](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/devtask_story_indevelopment_status_from_kanban.png Story shows In Development status from Kanban)## Next StepsAdd additional Development Tasks to the Story as needed.Development can begin [Working with Development Tasks](../jira_workingwithdevtasks/).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/jira_workingwithdevstories/",
    },
    {
      "title": "Working with Development Tasks in Jirabreadcrumb: Working with Development Tasks in Jirasidebar: tools",
      "text": "---title: Working with Development Tasks in Jirabreadcrumb: Working with Development Tasks in Jirasidebar: tools---# DRAFT## Before You BeginDevelopment Tasks are decomposed from Development Stories.In Jira for Watson Health (WH) Development projects:- Development Stories are prefixed by DL: and are issue type = story.- Development Tasks are prefixed by DT: and are issue type = task.Applicable Role:  WH DeveloperThis task describes how to begin working on a Development Task and transition the Task into In Progress status.Before you begin this task, be sure to [setup your Development work environment](../jira_setup_devenv_GitHub) in GitHub before working with source code.## Procedure1. From a Development project, open a Story that is in In Development state.![Story In Development state](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/scm_story_in_devstate.png Story In Development state)1. In the Story, locate the Sub-Tasks section and click the Task that you want to work on. Opening the Task in a new tab enables you to keep the original Story open for reference while working on the associated Task.![Open Task from Sub-Tasks section](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/scm_story_opentask_fromstory.png Open Task from Sub-Tasks section)1. In the Task, click Start Working.![Start Working on Task](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/scm_task_startworking.png Start Working on Task)The Task changes to In Progress state.![Task In Progress state](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/jira/scm_task_inprogress.png Task In Progress state)1. Identify the Task ID associated with your Jira Task Issue.  From the previous step, the example Task ID is `WHDD-41`.  You will need the Task ID to track your work in GitHub as you ensure the branches, comments, and code changes associated with your work are tracked at the Jira Task level and are traceable to the associated Story.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/jira_workingwithdevtasks/",
    },
    {
      "title": "Add Title Heresidebar: toolsbreadcrumb: Add Breadcrumb here using Title",
      "text": "---title: Add Title Heresidebar: toolsbreadcrumb: Add Breadcrumb here using Title---# DRAFT## Before You Begin\Applicable role(s): \Prerequisite(s): \Procedure \1.  \2.  \    > Tip:  \Add Tip info, where applicable3.  \4.  \What to do next\",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/jira/whpb_tools_task_template/",
    },
    {
      "title": "Compliance Onboardingsidebar: toolsbreadcrumb: Compliance Onboarding",
      "text": "---title: Compliance Onboardingsidebar: toolsbreadcrumb: Compliance Onboarding---",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/onboarding/compliance-onboarding/",
    },
    {
      "title": "Design Onboardingsidebar: toolsbreadcrumb: Design Onboarding",
      "text": "---title: Design Onboardingsidebar: toolsbreadcrumb: Design Onboarding---",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/onboarding/design-onboarding/",
    },
    {
      "title": "Development Onboardingsidebar: toolsbreadcrumb: Development Onboarding",
      "text": "---title: Development Onboardingsidebar: toolsbreadcrumb: Development Onboarding---",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/onboarding/dev-onboarding/",
    },
    {
      "title": "Offering Management Onboardingsidebar: toolsbreadcrumb: Offering Management Onboarding",
      "text": "---title: Offering Management Onboardingsidebar: toolsbreadcrumb: Offering Management Onboarding---",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/onboarding/offering-manager-onboarding/",
    },
    {
      "title": "Requesting Onboarding for Project Offeringssidebar: toolsbreadcrumb: Requesting Onboarding for Project Offerings",
      "text": "---title: Requesting Onboarding for Project Offeringssidebar: toolsbreadcrumb: Requesting Onboarding for Project Offerings---# DRAFT## Before You BeginThe Watson Health Application Lifecycle Management (ALM) Solution is a system which integrates Aha!, Jira, Xray Test Management, Confluence, and GitHub to create an end-to-end solution for WH Offerings to manage requirements, develop and test approved requirements, and enable traceability across key elements of the system.The Onboarding Request for a Project Offering initiates the request to add and setup the solution and its components for use by the Project Offering.Use the [onboarding request form](https://vbc-jira.watson-health.ibm.com/secure/CreateIssue.jspa?pid=18878&issuetype=12){:target=_blank} to initiate the request.Applicable Role(s):  Offering Manager The Offering Manager that completes and submits the Onboarding Request Form for a Project Offering must have access to the WH Jira Solution.## Procedure1. Open the [onboarding request form](https://vbc-jira.watson-health.ibm.com/secure/CreateIssue.jspa?pid=18878&issuetype=12){:target=_blank}.1. Select WH Project Offering Request from the Project field and select Task from the Issue Type field. Click the Next button.![Create Issue form](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/onboarding/offering_onboarding_create_issue_form.png Create Issue form)1. On the Create Issue screen, complete the following required fields: - Summary: A summary of the Offering request. - Request Offering Name: The name of the Offering request. - GxP: Whether it is a GxP Offering or not. - WH QMS Requirements Approach: Specify whether the Offering is following the 2 Tier model for requirements or the 3 Tier model. - Offering Market (UT L17): Select the market segment for the Offering. If Other is selected, be sure to specify what Other means in the Description field. - Due Date: The desired date for the onboarding request to be completed by.![Offering Request form](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/onboarding/offering_onboarding_details_form.png Offering Request form)1. Once the form has been completed, click the Create button. The ticket is submitted, and Jira automatically creates the associated sub-tasks for the work to be completed.1. You will be redirected to the Task that was created in Jira, where you can see the sub-tasks that have been created that will help the Tools Team get started in implementing the request.![Jira sub-tasks](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/onboarding/offering_onboarding_subtasks.png Jira sub-tasks)## What happens nextThe Tools Team will begin to work through the assigned sub-tasks. Upon completion of the sub-tasks, the Project Offering is setup in the Watson Health ALM Solution and teams can begin using the system.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/onboarding/request_onboarding_project_offering/",
    },
    {
      "title": "Requesting Onboarding for Userssidebar: toolsbreadcrumb: Requesting Onboarding for Users",
      "text": "---title: Requesting Onboarding for Userssidebar: toolsbreadcrumb: Requesting Onboarding for Users---# DRAFT## Before You BeginThe Watson Health Application Lifecycle Management (ALM) Solution is a system which integrates Aha!, Jira, Xray Test Management, Confluence, and GitHub to create an end-to-end solution for WH Offerings to manage requirements, develop and test approved requirements, and enable traceability across key elements of the system.The Onboarding Request for a user to the Solution initiates a request to grant user access to applicable elements of the Watson Health Application Lifecycle Management (ALM) Solution.Use the [onboarding request form](https://vbc-jira.watson-health.ibm.com/secure/CreateIssue.jspa?pid=13687&issuetype=12500){:target=_blank} to initiate the request.Applicable Role(s): Anyone with access to the WH Jira Solution.## Procedure1. Open the [Application Access Request Form](https://vbc-jira.watson-health.ibm.com/secure/CreateIssue.jspa?pid=13687&issuetype=12500){:target=_blank} and complete the form for the individual you are requesting access for.1. The following fields are required for every request: - Summary: A summary of the access request. - First Name: The first name of the user who need access. - Last Name: The last name of the user who need access. - App Access User Email:  The internet email address of the user needing access (xyz@ibm.com). - Manager’s Name: The manager’s name, or a manager designee that can approve the request. - Description: A detailed description of the type of access that is needed. Include any information such as which group(s) and application(s) access is needed for. If you are requesting to have the same access as an existing team member, state that in the description and provide the name of the team member. - Password Reset: If this is a password reset request, select the system for which the password reset is needed. - Requested Access: Select all the applications for which access is needed. - Reporter: The individual raising the request. - HIPAA Security Training: Acknowledge whether the user requesting access is HIPAA compliant or not. - ITCS300: Acknowledge whether the user requesting access is ITCS300 compliant or not.![Application Access form](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/onboarding/user_onboarding_application_access.png Application Access form)1. Once the form has been completed with as much detailed information as possible, click the Create button to submit the request.## What happens nextA ticket is created in Jira and auto-assigned to the Application Access Team to verify validity. Once the request is determined valid, the ticket will be assigned to the manager that was input into the Manager’s Name field for approval or rejection. If the manager approves the request, the ticket is auto-routed back to the queue of the Application Access Team for completion.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/onboarding/request_onboarding_user/",
    },
    {
      "title": "Slack - Best Practicessidebar: toolsbreadcrumb: Slack Best Practices",
      "text": "---title: Slack - Best Practicessidebar: toolsbreadcrumb: Slack Best Practices---[Overview](../../../tools/slack/)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Best Practices](../../../tools/slack/best-practices)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Integrations](../../../tools/slack/integrations)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Audio & Video Calling](../../../tools/slack/slack-calls)Slack is at its best when used as an _internally-public_ collaboration tool. As teams continue to adopt modern practices, especially [social coding](https://whitewater.ibm.com/field-guide/practices/social-coding){:target=_blank}, [DevOps](http://calmedia.atlanta.ibm.com/agile_academy/courses/agile_devops_deployment/index.php?id=4388194968001){:target=_blank}, and [whole-team collaboration](https://w3-connections.ibm.com/blogs/chill/entry/A_whole_team_approach_to_discovery_and_delivery?lang=en_us){:target=_blank}, these recommended best practices become essential to supporting the transparency and cross-role collaboration thats needed to successfully deliver modern products in modern ways.## The Dos and Donts of SlackWhile Slack provides an informal communication channel that works to break down barriers between teams, it should still be treated as an extension of your physical work space. Everyone is expected to adhere to IBMs [Business Conduct Guidelines](https://w3-03.ibm.com/ibm/documents/corpdocweb.nsf/ContentDocsByTitle/IBM+Business+Conduct+Guidelines){:target=_blank} while using Slack. Always keep in mind that on the other name of a screen name and avatar is a coworker.### Do 3rd party tools (like Giphy) can aid in decreasing barriers to communication and increasing the sense of community in a team, but we do not curate the content. If one of these tools returns something inappropriate, please delete it. Encourage public over private discussion. Slack works best as a public (to IBM) archive of knowledge and communication. Moving discussions in to public forums will allow others to learn. Respect timezones and availability.   We have coworkers throughout the world in our Slack room, they may not share your timezone.   While Slack feels real-time when everyone is on at once, it also functions as an asynchronous communication platform; if someone doesnt respond immediately they may be busy. Dont expect an immediate response at all times Set up integrations to push project updates in to Slack. Work with your rooms admin to do so.   GitHub integrations for issues updates, pull requests, comments, etc…   Any other tools you want to integrate with slack (e.g. for testing reports etc...) Try to keep the conversation to a single thread so the entire thread can be referenced as a URL in tools such as Github or Aha.### Dont Dont include [IBM Confidential](https://w3-03.ibm.com/ibm/documents/corpdocweb.nsf/ContentDocsByCtryTitle/United+States~Corporate+classification+and+control+of+IBM+information+-+Frequently+Asked+Questions/){:target=_blank} information in your communication _unless you are in a Whitewater tiered room_ Dont use `@channel`, `@here`, or `@mention` someone unless the targets of those notifications absolutely positively must drop everything they are doing and take action against your message at that very moment. All do so regardless of timezone.   `@channel` will notify _everyone in a channel even if they are not logged in_   `@here` will notify _everyone currently logged in and active in a channel_   `@mention` will notify _the mentioned individual_ Dont rely on Slack to store files indefinitely. All files that need a permanent home should be placed in [Box](http://ibm.box.com/){:target=_blank} or [GitHub](http://github.ibm.com/){:target=_blank} Dont share [Protected Health Information (PHI)](https://en.wikipedia.org/wiki/Protected_health_information){:target=_blank}, [Personally Identifiable Information (PII)](https://en.wikipedia.org/wiki/Personally_identifiable_information), or [Sensitive Personal Information (SPI)](https://en.wikipedia.org/wiki/Sensitive_personal_information){:target=_blank} in Slack. If you suspect PHI, PII, or SPI has been shared in Slack, unintentionally or otherwise, please immediately send an email to [Watson Security/Jericho/IBM@IBMUS](mailto:wmssec@us.ibm.com?Subject=Potential%20Security%20Incident%2C%20Watson%20Slack){:target=_blank} and copy your manager. Indicate that a potential security incident may have occurred in the Watson Slack room. Your manager and the Watson Security Team will work together to help you determine whether an incident has occurred and, if so, what the next steps are required to remedy the incident.   IMPORTANT: Our primary concern is not to place blame or get anyone in trouble, but to determine the depth of any incidents that may occur and contain them as quickly as possible. If you see something you are unsure of, it is safer to report it to the Watson Security Team than to not do so. They are here to help protect both you and IBM. Please give the Watson Security Team your full cooperation, and please do not take any action to contain or remediate an incident unless doing so under the direction of the Watson Security Team.### Channels  Channels are the life-blood of Slack. Thanks to Slack Enterprise Grid, we have new options when creating public Channels. They are:  Public: Public channels are shared within a single Slack Team (nothing changed for Public channels with Slack Enterprise Grid). Any member of the team can find, join, and participate in a Public channel. (e.g. http://ibm-watson.slack.com/messages/watson-cambridge)  Shared (Multi-Team): Slack Enterprise Grid allows us to share Public channels with a specific set of IBM-owned Slack Teams. Ask in your #general channel how to create a Multi-Team Shared Channel.  Shared (IBM Global): Slack Enterprise Grid allows us to share Public channels with every other IBM-owned Slack Team. Anyone in the company can find, join, and participate in the channel. Ask in your #general channel how to create an IBM Global Shared Channel. (e.g. http://ibm-cio.slack.com/messages/slack-at-ibm)  Naming Conventions  When discussing namespacing, the following pattern should be used, replacing `` with its relevant value: `--`. In order to support self-directed teams, open communication channels, and channel discovery, the following best practices are recommended:   Use as few acronyms as possible when naming channels   Each product should have a public channel where all team communication about a project takes place, namespaced in the following way:     [Watson Engagement Advisor](https://github.ibm.com/watson-engagement-advisor){:target=_blank} - `wea`     [Watson Explorer](https://github.ibm.com/Watson-Explorer){:target=_blank} - `wex`     [Watson Discovery & Exploration](https://github.ibm.com/watson-discovery-and-exploration){:target=_blank} - `wda`     [Watson Services](https://github.ibm.com/watson-services){:target=_blank} - `wdc`     Multiple parts of [Watson](https://github.ibm.com/Watson){:target=_blank} - `wts`     WCTS - `wcts`   Many groups across IBM are adopting the [Spotify Squad](http://blog.crisp.se/2012/11/14/henrikkniberg/scaling-agile-at-spotify){:target=_blank} model. It is recommended that even with this model that most product specific communication happen in a _product channel_. Rooms based on this model should adhere to the following:     Squads       Public       Prefixed with ``     Tribe       Public       Prefixed with ``     Chapter       Public       Prefixed ``     Guild       Public       Prefixed ``   When integrating aspects of [ChatOps](http://blog.crisp.se/2012/11/14/henrikkniberg/scaling-agile-at-spotify){:target=_blank}, especially integrating Code, DevOps (test, build, and deploy), and Track & Plan notifications in to Slack, should adhere to the following:     All notifications must be available to everyone who has access to the products public channel     Notifications should post inside the products public channel or within a sibling public channel suffixed `int`   Channels meant for discussing general topics (such as `development-standards` or `whitewater`) should be public and not include acronyms in their name   Channels specific to a given site (New York, Austin, Tokyo, etc…) should be public and should clearly indicate what site theyre associated with (in name or as a suffix to the channel).",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/slack/best-practices/",
    },
    {
      "title": "Slacksidebar: toolsbreadcrumb: Slack Messaging",
      "text": "---title: Slacksidebar: toolsbreadcrumb: Slack Messaging---[Overview](../../../tools/slack/)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Best Practices](../../../tools/slack/best-practices)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Integrations](../../../tools/slack/integrations)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Audio & Video Calling](../../../tools/slack/slack-calls)[Slack](https://whitewater.ibm.com/tools/slack?tab=overview){:target=_blank} is messaging done right. Your conversations follow you no matter what device you use (web / app / tablet / phone). We live in Slack.WorkspacesSlack is organized around Workspaces. Workspaces bring people together in an open, collaborative environment. IBM has a great many Slack Workspaces, [join a few](../../../support/onboarding#slack).ChannelsOrganize your conversations in open channels. Make a channel for a project, a topic, a Squad, or anything—everyone has a transparent view of all that’s going on. For truly sensitive information, [create private channels](#private) and invite a few team members. Slack Enterprise Grid brings us the ability to create IBM-wide [shared channels](#shared). Share what you know, help each other out, break those bottlenecks by working out in the open.Direct MessagesSend messages directly to another person or to a small group of people for more focused conversations.CallsTake a conversation from typing to face-to-face by starting a voice or video call in any Channel or Direct Message. [Make one-on-one or group calls](../../../tools/slack/slack-calls/) right from Slack without needing to open another app or share invite links.Apps and IntegrationsConnect all the tools you use to Slack and avoid all that constant switching between apps. [Set up your integration](../../../tools/slack/integrations/) so that you get all your notifications directly within Slack—from support requests, code check-ins, and error logs to sales leads—all of them searchable in one central archive.### Getting access- See the [onboarding](../../../support/onboarding#slack) page to request access to Slack- All Slack users must read the [Slack@IBM Training Guide](https://ibm.biz/slack-training){:target=_blank} and the [Slack@IBM FAQ](https://ibm.biz/slack-faq){:target=_blank}.### Getting Help- The CIOs Office has created a number of helpful [Guides for using Slack at IBM](https://whitewater.ibm.com/tools/slack?tab=training){:target=_blank}- Hit the #slack-at-ibm channel in your Slack Team### Apps for Slack...Amongst high-functioning and highly-collaborative teams, Slacks extendability is essential. There are a number of apps that plug directly in to Slack, providing a great amount of functionality beyond simple messaging directly in to the communication stream of teams. Not every Slack App can be used at IBM. Head to the [Integrations](../../../tools/slack/integrations) page to see what you can and cant use. Slack also provides a very extensive [API](https://api.slack.com/){:target=_blank} to allow custom integrations to be built. This extendability makes Slack an ideal platform to build [ChatOps](https://www.pagerduty.com/blog/what-is-chatops/){:target=_blank} on top of, which has been show to improve team communication and collaboration.### ChannelsThere are _thousands_ of internally-public channels covering a myriad of topics on Slack.- Click CHANNELS in the Slack sidebar to search our list of channels.- Your Squad members will have some suggestions, ask them...### Shared ChannelsTo help different groups to work together efficiently, you can share channels with specific Slack Teams or with all Slack Teams.> Tip: Read about shared channels in the [IBM Whitewater guide](https://whitewater.ibm.com/guides/slack/using-shared-channels){:target=_blank} before you request one.#### Request a shared channelSlack channels are not shared by default. An admin can create a shared channel or convert an existing channel. If you work in Watson Health (you use the _ibm-watsonhealth.slack.com_ IBM Watson Health Slack team), open a [Github issue](https://github.ibm.com/Watson-Health/slack/issues/new?title=Shared%20Channel%20Request&body=Please%20share%20the%20following%20channel%20in%20the%20IBM%20Watson%20Slack%20Team.%0A%0AChannel%20name:%0A%0APlease%20let%20us%20know%20if%20you%20would%20like%20to%20share%20the%20channel%20with%20all%20IBM%20Teams%20or%20just%20specific%20teams...%0A){:target=_blank} and ask to share a channel. Or if you are part of other Slack teams, ask how to request a shared channel in your _#general_ channel.> Important: You cant go back. Shared channels cant be “unshared”.### Private Channels> Note: This section is specifically for the ibm-watson.slack.com team, different Slack teams have different rules, ask in your #general channel...We work out in the open in Slack (internally-open that is). This is possible due to the fact that entire IBM Watson Slack Team is managed as an IBM Confidential Slack Team. You can discuss virtually any topic with other Watson Team members in our channels.Previously, to comply with IBM Legal and Security controls, only Admins were allowed to create private channels (so that an export of that channel could be guaranteed if requested by Legal/Security).With Slacks [recent changes to comply with GDPR](https://slack.com/gdpr){:target=_blank}, Slack can now provide our CIOs Office with the ability to export a channel (even private channels) if we need to comply with a specific Legal/Security request.As a result, we are switching back to allowing the creation of Private Channels to everyone.Before you do though, remember that there are still only a _very_ few good reasons to use private channels (temporary acquisition channels, legal clauses in a specific client contract).We work out in the open so that everyone can be on the same page, please dont forget that.> Important: You cant go back. Private channels cant ever be made public. Think before you switch.### Private Guest ChannelsFor those projects working closely with external partners, we have the ability to create Private Guest Channels by request. These channels allow you to invite external users that can then join that single channel and communicate with your team. These external guests can only see the contents of that specific channel and members. They cannot see anything else.To request a Private Guest Channel for the Watson Health Slack Team, [open an issue](http://github.ibm.com/Watson-Health/slack/issues/new?title=Private guest channel request&body=Please create a private guest channel to be used with external partners.%0A%0AChannel name:%0A%0AList of external partner email addresses %28one per line%29:%0A%0A){:target=_blank}- A Slack Admin will need to be a member of the channel- Private channels can never be made public once they have been created.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/slack/index/",
    },
    {
      "title": "Slack - Integrationssidebar: toolsbreadcrumb: Slack Integrations",
      "text": "---title: Slack - Integrationssidebar: toolsbreadcrumb: Slack Integrations---[Overview](../../../tools/slack/)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Best Practices](../../../tools/slack/best-practices)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Integrations](../../../tools/slack/integrations)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Audio & Video Calling](../../../tools/slack/slack-calls)Slack is at its best when its at the center of a network of [integrations](https://slack.com/apps){:target=_blank}, each providing their own information into the chat stream. The [ambient awareness](https://en.wikipedia.org/wiki/Ambient_awareness){:target=_blank} generated by the stream of information in Slack, especially from integrations, helps to provide users with an almost omnipresent knowledge of their team members and project status.There are two basic types of integrations, incoming integrations that send data into a Slack channel, and outgoing integrations which send data out of a Slack channel.As Slack Teams may contain IBM Confidential content, for any given channel, at any point in time, there are some rules to follow.## Internal IBM Integrations and BotsBased on the new [security standard](https://pages.github.ibm.com/it-standards/main/2015/01/24/itss.html){:target=_blank}, integrations and bots created by our Squads can be added to channels that may contain IBM Confidential data as long as those channels do not cover “sensitive” topics.An example of _non-sensitive_ IBM Confidential data: possible features in the upcoming version of Watson Conversation new launch date for our Discovery ServiceAn example of a _sensitive_ data would be: Discussions of acquiring (public company) Acme corp. or How to position the slight earnings miss in next weeks earnings announcement or The recovery outlook for Watson Health patient John Smith.Internal IBM integrations and bots can be hosted in IBM Bluemix and use IBM-created services in the Bluemix catalog.### Requesting Integrations> Note: This section is specific to the IBM Watson Slack Team. Ask in your #general channel how to request an Incoming WebHook Request...Incoming IBM Integrations Incoming WebHooks can be created by anyone in the IBM Watson Slack Team, you just have to request one here: [Incoming WebHook Request](https://ibm-watsonhealth.slack.com/apps/A0F7XDUAZ-incoming-webhooks){:target=_blank}Outgoing IBM IntegrationsBots and Apps can be connected with outgoing Integrations with the following restrictions: Outgoing data _must_ be encrypted. You _must not_ send data to third-parties (Google, Microsoft, etc) Bots and Apps _must_ be IBM-hosted (Bluemix Public/Dedicated/Premium, or hosted on the 9.x network) You _must not_ use third-party services in the Bluemix catalog You _must not_ allow raw channel data from Slack to be available to IBMers outside of Slack You _must not_ allow raw channel data from Slack to be available to third parties Integrations _may not_ be used in private channels that are used for sensitive data/topics/conversations. You _must_ update the Channel Purpose to state that there is an outgoing integration deployed and you _must_ include a link to a page with details about your outgoing integration. All bots _must_ announce themselves when invited into a channel and in that announcement provide a link to a page with details about themselves. To request an integration to be used with an IBM-created Bot or App, open an issue: [Outgoing Integration Request](https://github.ibm.com/Watson-Health/slack/issues/new?title=Internal%20IBM%20Integration%20request){:target=_blank}## Third-Party Integration Requirements Integrations _may_ post information one-way in to Slack. Integrations _may_ provide slash commands (such as `/giphy`) if and only if that is the only information they are able to receive from Slack. Integrations _must_ be work appropriate. Integrations _may not_ have access to the full Chat history unless that history _only_ resides in a server that is secured and approved to hold IBM Confidential information. This is very common for most chat bots, so unfortunately most of them are not allowed. Integration endpoints (especially WebHook endpoints) _must_ be kept secret and _may not_ be shared amongst multiple individuals (but _may_ be shared amongst multiple integrations if they are kept secret). Consider integration endpoints as secret and secure as a password. Integrations _must_ be configured by the Slack administrators and _only_ the Slack administrators. Integrations that require a specific users login to configure and use are unfortunately not available. This also means that integrations can only be configured for channels the Slack administrators have access to. Integrations _must only_ be used for the purpose they were requested for. General-purpose integration endpoints will not be granted (except in the case where an incoming WebHook is needed, in which case that integration will be monitored to ensure it only provides information related to its initial request). The [Slack@IBM FAQ](https://ibm.biz/slack-faq){:target=_blank} has a non-comprehensive list of approved integrations that can be sued as a first-pass check as to whether an integration can be made available.### Configured and Approved IntegrationsA number of integrations are pre-approved and can be requested simply. In addition, we have a number of configurations already configured and ready for use.### Configured ApplicationsThe following integrations are already configured and available for use throughout Slack: [Giphy](https://slack.com/apps/A0F827J2C-giphy{:target=_blank} - Animated GIFs, can be used via the `/giphy` slash command [Screenhero](https://slack.com/apps/A0F7XDVHB-screenhero){:target=_blank} - Screen sharing and voice chat for Slacks Screenhero application. Requires a Screenhero account (registration currently closed as features are folded in to Slack) [Twitter](https://slack.com/apps/A0F7XDW93-twitter){:target=_blank} - Automatically expand tweets pasted in [Calls](https://get.slack.help/hc/en-us/articles/216771908-Making-voice-calls-in-Slack){:target=_blank} - One-to-one and group voice and video calls### Approved IntegrationsThe following integrations have been approved to be individually configured: [GitHub](https://slack.com/apps/A0F7YS2SX-github){:target=_blank} - Configurable for incoming information for both GitHub Enterprise and public GitHub [Travis CI](https://slack.com/apps/A0F81FP4N-travis-ci){:target=_blank} - Configurable for incoming information for both Travis Enterprise and public Travis [Jenkins CI](https://slack.com/apps/A0F7VRFKN-jenkins-ci){:target=_blank} - Configurable for incoming information [PagerDuty](https://slack.com/apps/A0F81FMQW-pagerduty){:target=_blank} - Configurable for incoming information [Twitter](https://slack.com/apps/A0F7XDW93-twitter){:target=_blank} - Configurable for incoming tweets from a specific user account## Requesting an IntegrationIn order to expedite Slack integration requests, please [file an issue](https://github.ibm.com/Watson-Health/slack/issues){:target=_blank} with the following information: What integration you would like to have enabled What channel you would like the integration configured for (for multiple channels, multiple integration points will need to be created) If applicable, how you would like the integration configured If requesting a WebHook, where the information will be coming from (this will allow us to determine if a WebHook is appropriate and secure)Once an issue has been filed, one of the Watson Slack admins will follow up with the requester with next steps.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/slack/integrations/",
    },
    {
      "title": "Slack - Audio & Video Callingbreadcrumb: Slack (Calling)sidebar: tools",
      "text": "---title: Slack - Audio & Video Callingbreadcrumb: Slack (Calling)sidebar: tools---[Overview](../../../tools/slack/)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Best Practices](../../../tools/slack/best-practices)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Integrations](../../../tools/slack/integrations)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Audio & Video Calling](../../../tools/slack/slack-calls)Slack has added both audio and video calling to Slack EnterpriseWorking with the CIO and the CISO teams, weve gotten Slack audio and video conferencing [approved](https://github.ibm.com/Whitewater/Slack/blob/master/security-assessments/videoconference.md){:target=_blank} for IBM Confidential conversations - this is a GREAT solution for Squad-based video conferencing. You can call a single person, or add up to 15 people to a single call.Call Basics- To call a someone, open a Direct Message and click the phone handset icon at the top of the Slack window.>ProTip: All calls start as audio only, to switch to video, click the camera icon in the call Window- To add people to an existing call, click the [+] icon in the top right of the call window.- You can initiate a multi-person call by starting the call from a multi-person direct message.> Please note that Slack limits you to 15 people per callAdvanced Features- The Slack support site has great documentation about using audio/video calling: [Making calls in Slack](https://get.slack.help/hc/en-us/articles/216771908-Make-calls-in-Slack){:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/slack/slack-calls/",
    },
    {
      "title": "Watson Announcements Channelsidebar: toolsbreadcrumb: Announcements",
      "text": "---title: Watson Announcements Channelsidebar: toolsbreadcrumb: Announcements---### OverviewWeve set up an IBM-wide Shared Channel on Slack Enterprise Grid that Watson Platform Leaders can use to provide IBMers with the latest and greatest information about what weve released.> ProTip: Absolutely, positively, do not pre-announce anything. This channel can be seen by all IBMers (including our Sellers) and is not approved for IBM Confidential Material.### Accessing the ChannelThe channel can be joined by any IBMer, but only a select few can post anything in the channel.- [https://ibm-watson.slack.com/messages/watson-announcements](https://ibm-watson.slack.com/messages/watson-announcements){:target=_blank}### Request Posting RightsOpen an issue: [Slack Annoucements Channel Posting Request](https://github.ibm.com/Watson-Health/slack-annoucements-channel-requests/issues/new?title=Posting%20Rights%20Request){:target=_blank}### Posting TemplatesAs the channel will be an official communications tool for us, we need to maintain alignment around annoucements. Please use these patterns...## Minor Release/Sprintly Release/Tell IBMers Service Name / Epic or Feature / Release status / Link to blog post> Discovery Service / Entity Disambiguation v1 / GA> https://apps.na.collabserv.com/blogs/152f58a2-3bb3-4992-86a7-c56ad4bbd21c/entry/Entity_Disambiguation_v1_Release_in_Watson_Discovery_Service?lang=en_us Always add a link to internal (or external) blog post You can include where to go for questions (slack channel #watson-products-help, #watson-services-help, etc)     Dont forget that people cannot reply to you in the announcements channel!  Its extra important that you provide a method (channel, email, Community, etc.) that they can access for follow up questions.## Major Release/Quarterly Marketing Release/Tell the worldALL OF THE ABOVE, PLUS... Link to Seller Enablement Registration/Playback (event central link) Link to Technical (aka T3) Enablement Registration/Playback (event central link) Link to box folder with other marketing collateral, if applicable External Blog Post",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/slack/watson-announcements-channel/",
    },
    {
      "title": "Xray Test Managementsidebar: tools",
      "text": "---title: Xray Test Managementsidebar: tools---# DRAFT# Getting Started with the Xray pluginXray Test Management tool for Jira that supports test planning, test design, test execution and test reporting. The following diagram describes the relationship of various Xray entities.![Xray Entity Relationship Diagram](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_er.jpg)### Known Xray plugin limitations-   Unable to associate Jira requirement type issues down to the test step level for manual tests.-   Need to clone test assets to associate them with a new release.-   Unable to track change history for Test versions.-   Unable to run the same Test with different variables required for more than one Test Plan. If there is a requirement to run the same Test with different variables in another Test Plan, the tester will need to duplicate the Test(s) for use at the appropriate time in another Test Plan.-   A unique Xray Test Execution Issue must be created for each Test run.### Xray Test Management topics#### General Information-  [About Xray Test Artifacts](../xray_testartifacts/)-  [Xray Test Roles](../xray_testroles/)-  [Xray Test Workflows](../xray_workflows/)-  [Creating Xray Test Artifacts](../xray_create_testartifacts/)#### Automated Testing-  [Preparing to use Cucumber for testing in the Xray Environment](../xray_preparingtousecuke/)-  [Creating Cucumber Test Cases in the Xray Environment](../xray_cuke_createtestcases/)-  [Generating Cucumber Test results in the Xray Environment](../xray_cuke_testresults/)-  [Testing with Xray Generic Automation](../xray_genericautomation/)#### Manual Testing-  [Creating Bug Issues when running Xray Manual Tests](../xray_openbug_4manualteststepfail/)-  [Assigning In Progress Test Executions Among Test Team Members](../xray_workwith_inprogress_testexecutions/)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/xray/index/",
    },
    {
      "title": "Creating Xray Test Artifactssidebar: toolsbreadcrumb: Xray Test Artifacts",
      "text": "---title: Creating Xray Test Artifactssidebar: toolsbreadcrumb: Xray Test Artifacts---# DRAFT## Creating an Xray Test Plan or ComponentCreate one or more Xray Test Plans and Components with a focus on various features or functional areas to be tested.![Xray Test Plans](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/issue_flow_1.jpg)![Xray Components](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/issue_flow_2.jpg)## Creating an Xray Test Repository to mirror the Component hierarchyCreate an Xray Test Repository hierarchy that mirrors your Component hierarchy to organize your Test artifacts.![Create Xray Test Repository](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/issue_flow_3.jpg)## Creating Xray Test SetsCreate Xray Test Set(s) with a meaningful label, referencing their Component, to logically group related Tests, mirroring your Component and Test Repository hierarchy.From the associated Jira Development project, reference the Epic and Story Kanban board, or query:```Project = Watson for Oncology Suite_Test ORDER BY issuetype ASC```## Creating Xray Test from StoryCreate Xray Tests from Story issue types, associating them with their requisite Test Set and Test Plan.As required, use the ‘Import’ function of Xray to import test steps previously created via a CSV file.## Associating Test Sets to Test Plans1. Verify content on the Xray Test Plan Board, to include building out a folder structure mimicking your Component and Test Repository folders and assigning your Tests as appropriate.1. Create Xray Test Pre-Conditions as required and associate them with the appropriate Xray Tests.1. Create Xray Test Executions for individual Tests or all Tests associated with an Xray Test Set.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/xray/xray_create_testartifacts/",
    },
    {
      "title": "Creating Cucumber Test Cases in the Xray Environmentsidebar: toolsbreadcrumb: Cucumber Test Cases",
      "text": "---title: Creating Cucumber Test Cases in the Xray Environmentsidebar: toolsbreadcrumb: Cucumber Test Cases---# DRAFTGherkin is plain language parser used to construct [Behavior-Driven Development](https://en.wikipedia.org/wiki/Behavior-driven_development){:target=_blank} (BDD) test scenarios documented via a “.feature” file that is referenced by Cucumber at test run-time. Gherkin test cases are collaboratively authored by offering management, test and development focals. Following a “Given, When, Then” requirement authoring construct, scenario authors can reasonably expect that the resulting automated tests accurately reflect stakeholder requirements. See [Gherkin syntax](https://docs.cucumber.io/gherkin/reference/){:target=_blank}## Given, When, Then definitions- Given: A system in a known state before a user or external system begins interacting with the system.- When: Used to describe the key action the user or external system performs on the system.- Then: Observe the resulting outcome, which should be related to the business value or benefit associated with your feature description.Cucumber supports Ruby and Java development languages, requiring knowledge of those languages to author the backend code to support automated test execution for the Cucumber feature files.Step code, (also referred to as “glue code”), follows a regular expression syntax, with all rules written in Cucumber templates or class files broken into two pieces: Cucumber rule + data point. As long as you match the Cucumber rule and provide the correct expected data points, tests will successfully run. When utilizing Cucumber templates, if rules are referenced during execution that are not currently implemented, a “No step found” exception will result making it necessary to coordinate with the relevant stakeholder and create a new rule and write the underlying back end code to support the rule.Additional References:- {:target=_blank}- {:target=_blank}- Watson Health “AMIGO” Test Generator Code Repository (Cucumber/Gerkhin .feature template artifacts for potential re-use):  - {:target=_blank}  - {:target=_blank}",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/xray/xray_cuke_createtestcases/",
    },
    {
      "title": "Generating Cucumber Test results in the Xray Environmentsidebar: toolsbreadcrumb: Cucumber Test results",
      "text": "---title: Generating Cucumber Test results in the Xray Environmentsidebar: toolsbreadcrumb: Cucumber Test results---# DRAFTCucumber can be configured to produce test pass/fail log output in either HTML or JSON format.## Generating Log Output in HTML formatIn addition to running Cucumber tests individually from the command line or via .sh script, to enable Cucumber HTML output when running from the Eclipse client, ensure the following runtime option is added to your test runner code. In the context of this document, runTest.java contains the following:```package cucumberreport;import org.junit.runner.RunWith;import cucumber.junit.Cucumber;@RunWith(Cucumber.class)//Set log output HTML format in your Eclipse project target/Destination folder@Cucumber.Options(		   format = {pretty, html:target/Destination} )public class runTest {}```At the completion of your test, log output in HTML format will be generated in your projects target/Destination folder as follows:```/Users/lewiswhite/pythonscripts/cucumberReport/target/DestinationLewiss-MacBook-Pro:Destination lewiswhite$ ls  index.htmlindex.html```Opening the file with a web browser (Chrome in this case) yields the following:![Cucumber Log Output](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/test_log_output.jpg)## Generating Log Output in JSON formatTo enable Cucumber JSON log output when running from the Eclipse client, ensure the following runtime option is added to your test runner code. In the context of this document, runTest.java contains the following:```package cucumberreport;import org.junit.runner.RunWith;import cucumber.junit.Cucumber;@RunWith(Cucumber.class)//Set log output to JSON format and export to the projects target/Destination folder@Cucumber.Options(format = {json:target/Destination/cucumber.json} )public class runTest {}```At the completion of your test, log output in JSON format will be generated in the target/Destination folder of your project as follows:> Note: The following JSON has been made human readable, normally it is returned as a single line of code.```[  {    comments: [      {        line: 1,        value: #This is to check test result for Pass test case      },      {        line: 2,        value: #Feature:  Successful User Login      },      {        line: 3,        value: #Scenario: Login functionality exists      },      {        line: 4,        value: #    Given I have opened the browser      },      {        line: 5,        value: #   When I open Facebook website      },      {        line: 6,        value: #    Then Login button should exist      },      {        line: 8,        value: #This is to check test result for Failed test case      }    ],    line: 9,    elements: [      {        line: 10,        name: Forgot password exists,        description: ,        id: failed-user-login;forgot-password-exists,        type: scenario,        keyword: Scenario,        steps: [          {            result: {              duration: 507398030,              error_message: org.openqa.selenium.WebDriverException: Cannot find firefox binary in PATH. Make sure firefox is installed. OS appears to be: MAC\nBuild info: version: 2.47.1, revision: unknown, time: 2015-07-30 11:02:44\nSystem info: host: Lewiss-MacBook-Pro.local, ip: 192.168.0.5, os.name: Mac OS X, os.arch: x86_64, os.version: 10.14, java.version: 1.8.0_151\nDriver info: driver.version: FirefoxDriver\n\tat org.openqa.selenium.firefox.internal.Executable.(Executable.java:74)\n\tat org.openqa.selenium.firefox.FirefoxBinary.(FirefoxBinary.java:60)\n\tat org.openqa.selenium.firefox.FirefoxBinary.(FirefoxBinary.java:56)\n\tat org.openqa.selenium.firefox.FirefoxDriver.(FirefoxDriver.java:125)\n\tat cucumberreport.cucumberReport.openBrowser(cucumberReport.java:16)\n\tat ✽.Given I have open the browser(cucumberreport/cucumberReport.feature:11)\n,              status: failed            },            line: 11,            name: I have open the browser,            match: {              location: cucumberReport.openBrowser()            },            keyword: Given           },          {            result: {              status: skipped            },            line: 12,            name: I open Facebook website,            match: {              location: cucumberReport.goToFacebook()            },            keyword: When           },          {            result: {              status: skipped            },            line: 13,            name: Forgot password link should exist,            match: {              location: cucumberReport.forgotPWD()            },            keyword: Then           }        ]      }    ],    name: Failed User Login,    description: ,    id: failed-user-login,    keyword: Feature,    uri: cucumberreport/cucumberReport.feature  }]```References for Xray and Cucumber Reporting:- {:target=_blank}- {:target=_blank}- {:target=_blank}## Cucumber JSON Test Reporting with JenkinsTo configure Cucumber JSON test reporting with Jenkins, the [Cucumber Test Result Plugin](https://wiki.jenkins.io/display/JENKINS/Cucumber+Test+Result+Plugin){:target=_blank} for Jenkins is required.### Running Xray Generic Automation TestsFrom an Xray plugin perspective, tests written in a language other than Cucumber are viewed as _Generic_ tests.For general Xray guidance, see .Good example showing how to reference your test script written in a language other than Cucumber to run in Travis CI, and send the result to Xray for reporting- ### Recommended values when creating Tests| Tab      | Field               | Sample Value                                ||--------------|-------------------------|-------------------------------------------------|| General      | Environment             | Chrome                                          ||              | Labels                  | wh-\-v1                              ||              | Test Repository Path    |                                                 || Test Details | Test Type               | Manual Cucumber (automated) Generic (automated) ||              | Generic Test Definition | \ or \                        |### Integrating Xray with JenkinsRequest Jenkins instance via [TAAS](https://pages.github.ibm.com/TAAS/tools_guide/introduction/taas-info.html){:target=_blank}Once provisioned, uninstall the following plugin:-   GitHub Pull Requestor Plugin (known security issue)If you are unfamiliar, review DSL pipeline scripting via “declarative pipelines”Reference:- {:target=_blank}Configure your Jenkins pipeline per [these instructions](https://github.ibm.com/Cloud-DevOps-Transformation-Services/demo-jenkins-pipeline/blob/master/README.md){:target=_blank}._EDITORIAL_ TODO:_Fully document Jira/Xray plugin integration with Jenkins once a hosted Jira environment is available._Jenkins plugins:- {:target=_blank}- {:target=_blank}### Integrating Xray with Travis CIIn addition to Jenkins, the Xray plugin for Jira can also be used to integrate with Travis CI to automate testing jobs#### Travis CI Workflow_Important:_ Use only spaces (versus tabs) for indenting in the context of requirements.txt or .travis.yml files to ensure proper run-time interpretation and for editor portabilityPre-requisites:Requirements.txt file, to track any test dependencies. Reference:- {:target=_blank}Example requirements.txt content:```#Travis CI Selenium and Python test dependencies for Jira-Xray integration#python3-pipseleniumsauceclient```Example .travis.yml file to install any required dependencies and to call your automatedtest.Reference: {:target=_blank}Example content:```language: pythonpython:    - 2.7install:    - pip install -r requirements.txtscript:    - python jira/jira-xray/uitests/GitHubNavigation.py```With your test script and prerequisites in place:1. Create Xray automated test type associated with its requisite Jira requirement.1. Manage your Xray tests to its associated Xray test plan repository to keep them organized.1. Manage your test case source code in github.ibm.com.1. Configure Travis CI to scan your github.ibm.com repos and toggle on whichever one(s) you need to test with.1. Once your test is done executing you can export your xml results back to your Xray test in Jira for reporting.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/xray/xray_cuke_testresults/",
    },
    {
      "title": "Testing with Xray Generic Automationsidebar: toolsbreadcrumb: Xray Generic Automation",
      "text": "---title: Testing with Xray Generic Automationsidebar: toolsbreadcrumb: Xray Generic Automation---# DRAFTFrom an Xray plugin perspective, tests written in a language other than Cucumber are viewed as _Generic_ tests.For general Xray guidance, see {:target=_blank}.For an example showing how to reference your test script written in a language other than Cucumber to run in Travis CI, and send the result to Xray for reporting, see [HelloWorld with Travis CI](<https://github.com/softwaresaved/build_and_test_examples/blob/master/travis/HelloWorld.md){:target=_blank}.### Recommended Xray Automation Test Values| Tab      | Field               | Sample Value                                ||--------------|-------------------------|-------------------------------------------------|| General      | Environment             | Chrome                                          ||              | Labels                  | wh-\-v1                              ||              | Test Repository Path    |                                                 || Test Details | Test Type               | Manual Cucumber (automated) Generic (automated) ||              | Generic Test Definition | \ or \                        |## Integrating Xray with Jenkins1. Request a Jenkins instance via [TAAS](https://pages.github.ibm.com/TAAS/tools_guide/introduction/taas-info.html){:target=_blank}.1. Once provisioned, uninstall the following plugin: -   GitHub Pull Requestor Plugin (known security issue)	If you are unfamiliar, review DSL pipeline scripting via “declarative pipelines”.	Reference:  {:target=_blank}1. Configure your Jenkins pipeline per [these instructions](https://github.ibm.com/Cloud-DevOps-Transformation-Services/demo-jenkins-pipeline/blob/master/README.md){:target=_blank}._EDITORIAL_ TODO:_Fully document Jira/Xray plugin integration with Jenkins once a hosted Jira environment is available._Jenkins plugins:- {:target=_blank}- {:target=_blank}## Integrating Xray with Travis CIIn addition to Jenkins, the Xray plugin for Jira can also be used to integrate with Travis CI to automate testing jobs.### Travis CI Workflow_Important:_ Use only spaces (versus tabs) for indenting in the context of `requirements.txt` or `.travis.yml` files to ensure proper run-time interpretation and for editor portability.#### Prerequisites:Requirements `.txt file` to track any test dependencies.Reference: {:target=_blank}Example `requirements.txt` content:```#Travis CI Selenium and Python test dependencies for Jira-Xray integration#python3-pipseleniumsauceclient```Example `.travis.yml` file to install any required dependencies and to call your automatedtest.Reference: {:target=_blank}Example `.travis.yml` content:```language: pythonpython:    - 2.7install:    - pip install -r requirements.txtscript:    - python jira/jira-xray/uitests/GitHubNavigation.py```With your test script and prerequisites in place:1. Create Xray automated test type associated with its requisite Jira requirement.1. Manage your Xray tests to its associated Xray test plan repository to keep them organized.1. Manage your test case source code in github.ibm.com.1. Configure Travis CI to scan your github.ibm.com repositories and toggle on whichever one(s) you need to test with.1. Once your test is finished running, you can export your xml results back to your Xray test in Jira for reporting.",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/xray/xray_genericautomation/",
    },
    {
      "title": "Creating Bug Issues when running Xray Manual Testssidebar: toolsbreadcrumb: Creating Bug Issues",
      "text": "---title: Creating Bug Issues when running Xray Manual Testssidebar: toolsbreadcrumb: Creating Bug Issues---# DRAFT## Before You BeginAn Xray Test Team Member or Xray Test Team Lead identifies a defect when running a manual test in Xray, requiring them to open an issue against a development code change.Applicable Role:  Xray Test Team Member or Xray Test Team LeadPre-requisite:  An Xray Test Team Member or Xray Test Team Lead has created an Xray Test that is linked to an associated Story in a Watson Health Jira Development project.## Procedure1.  During manual test execution, the Xray Test Team Member identifies a failing test step.![Tester identifies failing test step](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_testeridentifies_manualteststepfail.png Tester identifies failing test step)2. The Tester selects the Add icon ![Add icon](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_add_icon.png Add icon) for defects to create a Bug issue type in the appropriate Watson Health Jira Development project.![Add defect icon to create Defect Issue](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_createbug_adddefect.png Add defect icon to create Defect Issue)3. To create the defect, select the Create Defect option:![Select Create Defect](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_createbug_createdefect.png Select Create Defect)4. Enter the required information to create the Bug Issue.  Required fields include Project, Issue Type, Summary and Reporter.![Enter required fields to create Issue](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_createbug_requiredfields.png Enter required fields to create Issue)5. Complete the remaining fields to provide good information to assist the development team in their root cause analysis. Be sure to link the Bug Issue to the associated Development Story in the Linked Issues section.  Important:  Be sure the Linked Issues drop-down list contains the Impacts link type as illustrated in the following image.  Once information for these fields is completed, click Create to create the Bug Issue.![Add Linked Issues and other Bug information](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_createbug_linkedissues_otherfields.png Add Linked Issues and other Bug information)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/xray/xray_openbug_4manualteststepfail/",
    },
    {
      "title": "Preparing to use Cucumber for testing in the Xray Environmentsidebar: toolsbreadcrumb: Using Cucumber",
      "text": "---title: Preparing to use Cucumber for testing in the Xray Environmentsidebar: toolsbreadcrumb: Using Cucumber---# DRAFT## Standard Cucumber workflowIn this workflow, Tests are created and managed in Jira, thus Jira will be the master for the Cucumber scenarios.![Cucumber Workflow](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/cucumber_workflow.jpg)1.  Specify Cucumber tests using natural language, in Jira.2.  Export Cucumber features from Jira to the CI environment, using the [REST API](https://confluence.xpand-it.com/pages/viewpage.action?pageId=21760334){:target=_blank}.3.  Implement tests in code and commit them to the source code versioning system.4.  Execute tests in the CI environment.5.  Report results to Xray, using the [REST API](https://confluence.xpand-it.com/display/XRAY/Import+Execution+Results+-+REST){:target=_blank}.## Prerequisites for Cucumber Development Environments>   Reference the [Watson Health Tools Index](https://watsonvmsrv01.rch.stglabs.ibm.com/watson/tools_vnv/){:target=_blank} for the latest approved Cucumber and Maven binaries and their associated OS-specific install and configuration instructions.1.  JDK 1.8 (or the latest validated version)2.  Eclipse Oxygen (or the latest validated version)3.  Cucumber plugin for Eclipse. From the Eclipse UI    1.  Select Help-\>Install new software    2.  In the Available Software dialogue box, enter        `http://cucumber.github.cucumber-eclipse/update-site` and complete the installation.    ![Confirm Features](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/eclipse_plugin.jpg)4.  Maven is an automation build tool installed by default with Eclipse. Creating your Cucumber testing as a Maven project enables you to manage dependencies via a pom.xml file, offering the benefit of centrally managed build dependencies. For example, if you need to upgrade the JAR files used in your project, you only have to edit the associated pom.xml JAR file dependency with the desired version. Once your pom.xml dependency has been updated, select `Project-\>Clean` in your Eclipse project and your environment will be ready to begin using the new JAR files.## Naming Conventions for Tests typesTo ensure consistent naming conventions across Watson Health test teams and to provide standard keywords for Jira queries, use the following naming conventions; for example:| Jira Requirement Type | Xray Test Type Label Prefix | Xray Test Label Name | Full Xray Test Label | Cucumber Feature  File Name ||---------------------------|---------------------------------|--------------------------|--------------------------|-------------------------------------|| Functional                | FUN01, FUN02…                   | Login                    | FUN01_Login              | FUN01_Login.feature                 || Configuration             | CONF01, CONF02..                | Memory                   | CONF01_Memory            | CONF01_Memory.feature               || User Interface            | UI01, UI02…                     | RadioButton              | UI01_RadioButton         | UI01_RadioButton.feature            || Performance               | PERF01, PERF02…                 | ResponseTime             | PERF01_ResponseTime      | PERF01_ResponseTime.feature         || Security                  | SEC01, SEC02…                   | Access                   | SEC01_Access             | SEC01_Access.feature                |## Best Practices for running Cucumber Tests-   Continually strive to run a single test scenario, associated with a single requirement against a single feature.-   Clearly comment your code to reduce ambiguity and ensure that the next person that needs to maintain your test cases understands your scenarios and how they exercise functionality that will bring business value to your stakeholders.-   Collaboratively author feature files with OM, test and development stakeholders early in the development cycle.-   Create feature-focused Cucumber Test Plans as part of your Xray Test Projects to track and report on test case executions.-   Additional Best Practices links:    -     - ## Best Practices for organizing Xray TestsWorking in Xray, all test assets will contain the prefix of the Test Plan associated by default, which can initially make it difficult to organize your test assets. As a best practice, organize your test early using labels, priorities and components to classify your tests.Additionally, Xray offers a Test Repository feature, offering the ability to organize your tests in a hierarchical manner as depicted below. An important point to bear in mind is the Xray “Test Repository” feature is not a replacement for GitHub source code control for your test scripts; instead, it offers another method to group your tests in an organized manner.![Xray Repository Organization](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/repository_org.jpg)## Hierarchy of Cucumber ProjectsCucumber projects are written in either Ruby or Java. The following Cucumber project hierarchy examples assume that Watson Health test teams will be using Java as the primary programming languageUpon creating your Maven project, the project hierarchy will be similar to the following:![Project Hierarchy](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/package_hierarchy.jpg)## Cucumber, Java and Junit dependenciesWhen creating your Maven project, the following pom.xml example documents key Cucumber, Java and Junit dependencies. Be sure to update your specific dependency versions as required:```  4.0.0  cucumberReport  cucumberReport  0.0.1-SNAPSHOT            org.seleniumhq.selenium     selenium-java     2.47.1              info.cukes     cucumber-java     1.0.2     test              info.cukes     cucumber-junit     1.0.2     test              junit     junit     4.10     test    ```In addition to pom.xml, additional files are required in order to execute Cucumber scenarios.  The files include feature files, step definition code and test runner code, which is managed in the context of a Java package. For example, the following screen shot shows a sample file hierarchy for a working project:![Maven/Cucumber Project Hierarchy](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/maven-cucumber_project.jpg)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/xray/xray_preparingtousecuke/",
    },
    {
      "title": "Xray Test Artifactssidebar: toolsbreadcrumb: Xray Test Artifacts",
      "text": "---title: Xray Test Artifactssidebar: toolsbreadcrumb: Xray Test Artifacts---# DRAFT## Hierarchy of Test Artifacts| Xray Artifact | Contains                                     | Purpose                  ||-------------------|--------------------------------------------------|------------------------------|| Xray Project      | One, or more of all Xray artifacts               | Xray Projects are used to: - Maintain a definitive collection of all test assets associated with a specific offering  || Test Plan         | Project Versions Test Sets Tests Test Executions | Test Plans are used to: - Group related Xray Test Plans and Test Sets for tracking and reporting     || Test Set          | Tests Test Execution                             | Test Sets are used to: - Compartmentalize related Tests- Automate Test Execution of multiple Tests- Associate one or more requirements to a group of related Tests      || Test              | Test Execution Pre-Condition Requirement         | Tests are used to: - Test and map one-to one with a specific Jira Requirement (e.g., Story)          || Test Execution    | Project Version                                  | Test Executions are used to: - Track Test Executions associated with Test Plans, Test Sets, or Tests.- A Test Execution issue type is required in order to generate a Test result for a Test Plan, Test Set or Test |## Hierarchy of Xray projects![Xray Project Herarchy](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/hierarchy.jpg)Referencing the previous diagram, there will be one Xray project per offering; for example: `Watson for Oncology Suite_Test`.Each Xray Project will contain one, or more Test Plans. Test Plans are used to compartmentalize related Xray Tests to ease tracking and reporting tasks. For example, the following Test Plan naming convention could apply:```Clinical Decision Support Admin UI v2.0Clinical Decision Support Data Services v2.0Clinical Decision Support Common Services v2.0```Each Test Plan can consist of one, or more Tests or Test Sets. [Test Sets](https://www.getxray.app/blog/5-tips-for-using-test-sets/){:target=_blank} consist of a flat list of Tests used to group Tests in some logical way. For example, you can create a Test Set to reference all Tests related to a functional area.Creating a Test Set and associating Tests with this Test Set enables you to associate one or more requirements to a single Test Set and all of its associated Tests.For example, the following Test Set naming convention could apply:```CDS User Admin UICDS Public Access Data ServicesCDS Common Subscriber Services```One or more Tests can be run either independently, or as part of a Test Set in the context of a Test Plan.Putting it all together, the following is an Xray project hierarchy that represents the described nomenclature:- Xray Project: Watson For Oncology Suite_Test    - Xray Test Plan: Clinical Decision Support Admin UI v2.0        - Xray Test Set: CDS User Admin UI            - Xray Tests: Test1, Test2, Test3…        - Xray Test Set: CDS Access and Authorization            - Xray Tests: Test1, Test2, Test3…",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/xray/xray_testartifacts/",
    },
    {
      "title": "Test Rolessidebar: toolsbreadcrumb: Test Roles",
      "text": "---title: Test Rolessidebar: toolsbreadcrumb: Test Roles---# DRAFT## Test Roles| QMS Test Role | Description | JIRA Test Project Role | License ||---------------------------|---------------------------------|--------------------------|--------------------------|-------------------------------------|| Approver | Test Team member with test asset approval responsibilities in preparation for the Dry Run testing phase | Xray Approver | Jira || Test Lead | Test Team member with additional responsibilities including performing Test reviews, and creating and managing Test Plans. | Xray Test Lead | Jira || Test Team Member | Test Team member with read/write access to a given Xray project.| Xray Test Team Member | Jira |",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/xray/xray_testroles/",
    },
    {
      "title": "Xray Test Workflowssidebar: toolsbreadcrumb: Xray Test Workflows",
      "text": "---title: Xray Test Workflowssidebar: toolsbreadcrumb: Xray Test Workflows---# DRAFTThe following sections depict the workflows associated with each Xray Issue type.### Test Plan Workflow![Test Plan Workflow](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_testplanwf.png Test Plan Workflow)The editable workflow states for Xray Test Plan include “Xray Draft”, “Under Review”, “In Dry Run” and  “Under Approval”.   The other Xray Test Plan workflow states are read-only to ensure that once a test asset has undergone review, that its associated test steps and requirements links are not changed through its successful “Run for Record” state.### Test Set and Test Workflow#### Test Set Workflow![Test Set Workflow](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_testsetwf.png Test Set Workflow)#### Test Workflow![Test Workflow](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_testwf.png Test Workflow)Test Set and Test Issue types share the same workflow as depicted in the previous diagrams. Editable workflow states for Xray Test Set and Test Issue types include “Xray Draft”, “Under Review”, “In Dry Run” and  “Under Approval”.  The other Xray Test Set and Test Issue type workflow states are read-only to ensure that once a test asset has undergone review, that its associated test steps and requirements links are not changed through its successful “Run for Record” state.### Test Execution Workflow![Test Execution Workflow](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_testexecution_wf.png Test Execution Workflow)### Pre-Condition Workflow![Pre-Condition Workflow](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_precondition_wf.png Pre-Condition Workflow)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/xray/xray_workflows/",
    },
    {
      "title": "Assigning In Progress Test Executions Among Test Team Memberssidebar: toolsbreadcrumb: Assigning In Progress Test Executions",
      "text": "---title: Assigning In Progress Test Executions Among Test Team Memberssidebar: toolsbreadcrumb: Assigning In Progress Test Executions---# DRAFT## Before You BeginSometimes, a Test Team Member might need to hand off a Test Execution associated with a manual test that is In Progress status to a different Test Team Member for completion. This topic describes how to reassign a Test Execution for a manual test that is In Progress to a different Test Team Member without losing the In Progress status of the Test Execution.Applicable Role:  Test Team MemberKnown limitations: Test Executions that are In Progress can be reassigned to another Tester and remain In Progress status as long as the associated Test Steps completed to that point in time are in a status other than Fail or Aborted. Attempting to reassign an In Progress Test Execution to another Tester when any test step has a status of FAIL or ABORTED will result in the Test Execution transitioning to a FAIL or ABORTED status. A new Test Execution will need to be created and started from the beginning. If any of the associated Test Steps of an In Progress Test Execution are in a Fail or Aborted status and the Tester either logs out of Jira or terminates the browser session where the test execution is taking place, then the Test Execution will transition to Closed status.  A new Test Execution must be created and started from the beginning. When more than one Tester is used to complete a Test Execution, the Tester that originally started the Test Execution must manually transition the Test Execution to Closed status to preserve the Test Execution result.## Procedure1. Tester1 starts the Test Execution. In the following example, WHDT-60 is the Jira issue associated with the Test Execution.![Tester1 starts Test Execution](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_test_execution.png Tester1 starts Test Execution)2. Tester1 completes one or more steps of the Test. When Tester1 is ready to reassign the Test to a different Tester, Tester1 clicks Return to Test Execution.![Return to test execution](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_return_to_test_execution.png Return to test execution)3. Tester1 reassigns the Test Execution to Tester2.![Tester1 reassigns Test Execution to Tester2](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_reassign_to_tester2.png Tester1 reassigns Test Execution to Tester2)4. Tester2 opens the Test Execution. The status of the Test Execution is In Progress.![Tester2 opens Test Execution](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_tester2_open.png Tester2 opens Test Execution)5. Tester2 continues the Test Execution.![Tester2 continues Test Execution](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_tester2_continue_test.png Tester2 continues Test Execution)6. Tester2 completes the remaining steps of the Test Execution.![Tester2 completes remaining steps of Test Execution](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_complete_remaining_steps.png Tester2 completes remaining steps of Test Execution)7. Tester2 verifies the Test Execution reflects a completed status by opening the parent Xray Test. In the following example, WHDT-40 is the parent Xray Test.![Tester2 verifies completed status from parent Xray Test](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_verify_completed_status.png Tester2 verifies completed status from parent Xray Test)8. Tester1 checks to see if the Test Execution reflects a Closed status.  If the Test Execution is not in Closed status, click Close to close the Test Execution.![Tester1 checks to see if Test Execution is in Closed status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_status_inprogress_click_close.png Tester1 checks to see if Test Execution is in Closed status)9. The Test Execution reflects Closed status.![Test Execution in Closed status](https://pages.github.ibm.com/watson-health-playbook/resources/images/tools/xray/xray_test_execution_closed.png Test Execution in Closed status)",
      "tags": "",
      "url": "https://pages.github.ibm.com/watson-health-playbook/tools/xray/xray_workwith_inprogress_testexecutions/",
    },
  ]
};
